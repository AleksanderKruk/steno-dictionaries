# Generated from ./PloverDictionary.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,120,3309,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,
        0,1,0,1,0,1,0,5,0,97,8,0,10,0,12,0,100,9,0,1,0,3,0,103,8,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,114,8,1,1,1,1,1,1,2,1,2,4,2,120,
        8,2,11,2,12,2,121,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,155,8,3,1,4,1,4,1,4,4,4,160,8,4,11,4,12,4,161,
        1,4,1,4,1,5,1,5,3,5,168,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1023,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1034,8,7,11,7,12,7,1035,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1049,8,7,11,7,12,7,1050,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1062,8,7,11,7,12,7,1063,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1079,8,7,
        11,7,12,7,1080,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,4,7,1096,8,7,11,7,12,7,1097,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,4,7,1111,8,7,11,7,12,7,1112,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,4,7,1124,8,7,11,7,12,7,1125,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,4,7,1137,8,7,11,7,12,7,1138,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,4,7,1148,8,7,11,7,12,7,1149,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,4,7,1163,8,7,11,7,12,7,1164,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,4,7,1178,8,7,11,7,12,7,1179,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,4,7,1191,8,7,11,7,12,7,1192,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1206,8,7,11,7,12,7,1207,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1221,8,7,11,7,12,7,1222,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,1235,8,7,11,7,12,7,1236,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1250,8,7,1,8,1,8,
        1,8,3,8,1255,8,8,1,8,1,8,1,8,1,8,1,8,3,8,1262,8,8,1,8,1,8,1,8,1,
        8,3,8,1268,8,8,1,8,1,8,1,8,3,8,1273,8,8,1,8,3,8,1276,8,8,1,9,1,9,
        3,9,1280,8,9,1,9,1,9,1,9,3,9,1285,8,9,1,9,1,9,1,9,1,9,3,9,1291,8,
        9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1299,8,9,1,9,1,9,3,9,1303,8,9,1,10,
        1,10,1,10,3,10,1308,8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1316,
        8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1324,8,10,1,10,3,10,1327,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1337,8,11,1,11,
        3,11,1340,8,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,3,14,1355,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,3,16,1369,8,16,1,17,1,17,1,17,1,17,1,17,
        1,17,3,17,1377,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,1385,8,18,
        1,19,1,19,1,19,1,19,1,19,1,19,3,19,1393,8,19,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,1401,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1409,
        8,21,1,22,1,22,1,22,3,22,1414,8,22,1,22,1,22,1,22,1,22,3,22,1420,
        8,22,1,22,1,22,1,22,1,22,3,22,1426,8,22,1,22,1,22,1,22,1,22,1,22,
        3,22,1433,8,22,1,22,1,22,3,22,1437,8,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        3,23,1457,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        1468,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1478,8,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1487,8,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,1496,8,24,1,24,1,24,1,24,1,24,3,24,1502,
        8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1511,8,24,1,24,1,24,
        1,24,1,24,3,24,1517,8,24,1,25,1,25,1,26,1,26,1,26,1,26,3,26,1525,
        8,26,1,27,1,27,1,27,1,27,1,27,3,27,1532,8,27,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1547,8,30,1,31,
        1,31,1,31,1,31,3,31,1553,8,31,1,31,1,31,3,31,1557,8,31,1,31,1,31,
        1,31,1,31,1,31,3,31,1564,8,31,1,31,1,31,3,31,1568,8,31,1,31,3,31,
        1571,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1591,8,32,1,33,1,33,1,33,
        1,33,1,33,3,33,1598,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,
        1607,8,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,1615,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,39,1,39,1,39,1,39,1,39,1,40,3,40,1638,8,40,1,40,1,40,1,40,5,40,
        1643,8,40,10,40,12,40,1646,9,40,1,41,1,41,3,41,1650,8,41,1,42,3,
        42,1653,8,42,1,42,3,42,1656,8,42,1,42,3,42,1659,8,42,1,42,3,42,1662,
        8,42,1,42,3,42,1665,8,42,1,42,3,42,1668,8,42,1,42,3,42,1671,8,42,
        1,42,3,42,1674,8,42,1,42,3,42,1677,8,42,1,42,1,42,3,42,1681,8,42,
        1,42,3,42,1684,8,42,1,42,3,42,1687,8,42,1,42,3,42,1690,8,42,1,42,
        3,42,1693,8,42,1,42,3,42,1696,8,42,1,42,3,42,1699,8,42,1,42,3,42,
        1702,8,42,1,42,3,42,1705,8,42,1,42,3,42,1708,8,42,1,42,3,42,1711,
        8,42,1,42,3,42,1714,8,42,1,42,3,42,1717,8,42,1,42,3,42,1720,8,42,
        1,42,3,42,1723,8,42,1,42,3,42,1726,8,42,1,42,3,42,1729,8,42,1,42,
        3,42,1732,8,42,1,42,3,42,1735,8,42,1,42,1,42,3,42,1739,8,42,1,42,
        3,42,1742,8,42,1,42,3,42,1745,8,42,1,42,3,42,1748,8,42,1,42,3,42,
        1751,8,42,1,42,3,42,1754,8,42,1,42,3,42,1757,8,42,1,42,3,42,1760,
        8,42,1,42,3,42,1763,8,42,1,42,3,42,1766,8,42,1,42,3,42,1769,8,42,
        1,42,3,42,1772,8,42,1,42,3,42,1775,8,42,1,42,3,42,1778,8,42,1,42,
        3,42,1781,8,42,1,42,3,42,1784,8,42,1,42,3,42,1787,8,42,1,42,3,42,
        1790,8,42,1,42,3,42,1793,8,42,1,42,3,42,1796,8,42,1,42,3,42,1799,
        8,42,1,42,1,42,3,42,1803,8,42,1,42,3,42,1806,8,42,1,42,3,42,1809,
        8,42,1,42,3,42,1812,8,42,1,42,3,42,1815,8,42,1,42,3,42,1818,8,42,
        1,42,3,42,1821,8,42,1,42,3,42,1824,8,42,1,42,3,42,1827,8,42,1,42,
        3,42,1830,8,42,1,42,3,42,1833,8,42,1,42,3,42,1836,8,42,1,42,3,42,
        1839,8,42,1,42,3,42,1842,8,42,1,42,3,42,1845,8,42,1,42,3,42,1848,
        8,42,1,42,3,42,1851,8,42,1,42,3,42,1854,8,42,1,42,3,42,1857,8,42,
        1,42,3,42,1860,8,42,1,42,3,42,1863,8,42,1,42,1,42,3,42,1867,8,42,
        1,42,3,42,1870,8,42,1,42,3,42,1873,8,42,1,42,3,42,1876,8,42,1,42,
        3,42,1879,8,42,1,42,3,42,1882,8,42,1,42,3,42,1885,8,42,1,42,3,42,
        1888,8,42,1,42,3,42,1891,8,42,1,42,3,42,1894,8,42,1,42,3,42,1897,
        8,42,1,42,3,42,1900,8,42,1,42,3,42,1903,8,42,1,42,3,42,1906,8,42,
        1,42,3,42,1909,8,42,1,42,3,42,1912,8,42,1,42,3,42,1915,8,42,1,42,
        3,42,1918,8,42,1,42,3,42,1921,8,42,1,42,3,42,1924,8,42,1,42,3,42,
        1927,8,42,1,42,1,42,3,42,1931,8,42,1,42,3,42,1934,8,42,1,42,3,42,
        1937,8,42,1,42,3,42,1940,8,42,1,42,3,42,1943,8,42,1,42,3,42,1946,
        8,42,1,42,3,42,1949,8,42,1,42,3,42,1952,8,42,1,42,3,42,1955,8,42,
        1,42,3,42,1958,8,42,1,42,3,42,1961,8,42,1,42,3,42,1964,8,42,1,42,
        3,42,1967,8,42,1,42,3,42,1970,8,42,1,42,3,42,1973,8,42,1,42,3,42,
        1976,8,42,1,42,3,42,1979,8,42,1,42,1,42,3,42,1983,8,42,1,42,3,42,
        1986,8,42,1,42,3,42,1989,8,42,1,42,3,42,1992,8,42,1,42,3,42,1995,
        8,42,1,42,3,42,1998,8,42,1,42,1,42,3,42,2002,8,42,1,42,3,42,2005,
        8,42,1,42,3,42,2008,8,42,1,42,3,42,2011,8,42,1,42,3,42,2014,8,42,
        1,42,3,42,2017,8,42,1,42,3,42,2020,8,42,1,42,3,42,2023,8,42,1,42,
        3,42,2026,8,42,1,42,3,42,2029,8,42,1,42,1,42,3,42,2033,8,42,1,42,
        3,42,2036,8,42,1,42,3,42,2039,8,42,1,42,3,42,2042,8,42,1,42,3,42,
        2045,8,42,1,42,1,42,3,42,2049,8,42,1,42,3,42,2052,8,42,1,42,3,42,
        2055,8,42,1,42,3,42,2058,8,42,1,42,3,42,2061,8,42,1,42,3,42,2064,
        8,42,1,42,3,42,2067,8,42,1,42,3,42,2070,8,42,1,42,3,42,2073,8,42,
        1,42,3,42,2076,8,42,1,42,1,42,3,42,2080,8,42,1,42,3,42,2083,8,42,
        1,42,3,42,2086,8,42,1,42,3,42,2089,8,42,1,42,1,42,3,42,2093,8,42,
        1,42,3,42,2096,8,42,1,42,3,42,2099,8,42,1,42,3,42,2102,8,42,1,42,
        3,42,2105,8,42,1,42,3,42,2108,8,42,1,42,3,42,2111,8,42,1,42,3,42,
        2114,8,42,1,42,3,42,2117,8,42,1,42,3,42,2120,8,42,1,42,1,42,3,42,
        2124,8,42,1,42,3,42,2127,8,42,1,42,3,42,2130,8,42,1,42,1,42,3,42,
        2134,8,42,1,42,3,42,2137,8,42,1,42,3,42,2140,8,42,1,42,3,42,2143,
        8,42,1,42,3,42,2146,8,42,1,42,3,42,2149,8,42,1,42,3,42,2152,8,42,
        1,42,3,42,2155,8,42,1,42,3,42,2158,8,42,1,42,3,42,2161,8,42,1,42,
        1,42,3,42,2165,8,42,1,42,3,42,2168,8,42,1,42,1,42,3,42,2172,8,42,
        1,42,3,42,2175,8,42,1,42,3,42,2178,8,42,1,42,3,42,2181,8,42,1,42,
        3,42,2184,8,42,1,42,3,42,2187,8,42,1,42,3,42,2190,8,42,1,42,3,42,
        2193,8,42,1,42,3,42,2196,8,42,1,42,3,42,2199,8,42,1,42,1,42,3,42,
        2203,8,42,1,42,1,42,3,42,2207,8,42,1,42,3,42,2210,8,42,1,42,3,42,
        2213,8,42,1,42,3,42,2216,8,42,1,42,3,42,2219,8,42,1,42,3,42,2222,
        8,42,1,42,3,42,2225,8,42,1,42,3,42,2228,8,42,1,42,3,42,2231,8,42,
        1,42,3,42,2234,8,42,1,42,1,42,1,42,3,42,2239,8,42,1,42,3,42,2242,
        8,42,1,42,3,42,2245,8,42,1,42,3,42,2248,8,42,1,42,3,42,2251,8,42,
        1,42,3,42,2254,8,42,1,42,3,42,2257,8,42,1,42,3,42,2260,8,42,1,42,
        3,42,2263,8,42,1,42,3,42,2266,8,42,1,42,1,42,3,42,2270,8,42,1,42,
        3,42,2273,8,42,1,42,3,42,2276,8,42,1,42,3,42,2279,8,42,1,42,3,42,
        2282,8,42,1,42,3,42,2285,8,42,1,42,3,42,2288,8,42,1,42,3,42,2291,
        8,42,1,42,3,42,2294,8,42,1,42,3,42,2297,8,42,1,42,1,42,1,42,3,42,
        2302,8,42,1,42,3,42,2305,8,42,1,42,3,42,2308,8,42,1,42,3,42,2311,
        8,42,1,42,3,42,2314,8,42,1,42,3,42,2317,8,42,1,42,3,42,2320,8,42,
        1,42,3,42,2323,8,42,1,42,3,42,2326,8,42,1,42,1,42,1,42,3,42,2331,
        8,42,1,42,3,42,2334,8,42,1,42,3,42,2337,8,42,1,42,3,42,2340,8,42,
        1,42,3,42,2343,8,42,1,42,3,42,2346,8,42,1,42,3,42,2349,8,42,1,42,
        3,42,2352,8,42,1,42,1,42,1,42,3,42,2357,8,42,1,42,3,42,2360,8,42,
        1,42,3,42,2363,8,42,1,42,3,42,2366,8,42,1,42,3,42,2369,8,42,1,42,
        3,42,2372,8,42,1,42,3,42,2375,8,42,1,42,1,42,1,42,3,42,2380,8,42,
        1,42,3,42,2383,8,42,1,42,3,42,2386,8,42,1,42,3,42,2389,8,42,1,42,
        3,42,2392,8,42,1,42,3,42,2395,8,42,1,42,1,42,1,42,3,42,2400,8,42,
        1,42,3,42,2403,8,42,1,42,3,42,2406,8,42,1,42,3,42,2409,8,42,1,42,
        3,42,2412,8,42,1,42,1,42,1,42,3,42,2417,8,42,1,42,3,42,2420,8,42,
        1,42,3,42,2423,8,42,1,42,3,42,2426,8,42,1,42,1,42,1,42,3,42,2431,
        8,42,1,42,3,42,2434,8,42,1,42,3,42,2437,8,42,1,42,1,42,1,42,3,42,
        2442,8,42,1,42,3,42,2445,8,42,1,42,1,42,1,42,3,42,2450,8,42,1,42,
        1,42,3,42,2454,8,42,1,43,3,43,2457,8,43,1,43,3,43,2460,8,43,1,43,
        3,43,2463,8,43,1,43,3,43,2466,8,43,1,43,3,43,2469,8,43,1,43,3,43,
        2472,8,43,1,43,3,43,2475,8,43,1,43,3,43,2478,8,43,1,43,3,43,2481,
        8,43,1,43,1,43,3,43,2485,8,43,1,43,3,43,2488,8,43,1,43,3,43,2491,
        8,43,1,43,3,43,2494,8,43,1,43,3,43,2497,8,43,1,43,3,43,2500,8,43,
        1,43,3,43,2503,8,43,1,43,3,43,2506,8,43,1,43,3,43,2509,8,43,1,43,
        3,43,2512,8,43,1,43,3,43,2515,8,43,1,43,3,43,2518,8,43,1,43,3,43,
        2521,8,43,1,43,3,43,2524,8,43,1,43,3,43,2527,8,43,1,43,3,43,2530,
        8,43,1,43,3,43,2533,8,43,1,43,3,43,2536,8,43,1,43,3,43,2539,8,43,
        1,43,1,43,3,43,2543,8,43,1,43,3,43,2546,8,43,1,43,3,43,2549,8,43,
        1,43,3,43,2552,8,43,1,43,3,43,2555,8,43,1,43,3,43,2558,8,43,1,43,
        3,43,2561,8,43,1,43,3,43,2564,8,43,1,43,3,43,2567,8,43,1,43,3,43,
        2570,8,43,1,43,3,43,2573,8,43,1,43,3,43,2576,8,43,1,43,3,43,2579,
        8,43,1,43,3,43,2582,8,43,1,43,3,43,2585,8,43,1,43,3,43,2588,8,43,
        1,43,3,43,2591,8,43,1,43,3,43,2594,8,43,1,43,3,43,2597,8,43,1,43,
        3,43,2600,8,43,1,43,3,43,2603,8,43,1,43,1,43,3,43,2607,8,43,1,43,
        3,43,2610,8,43,1,43,3,43,2613,8,43,1,43,3,43,2616,8,43,1,43,3,43,
        2619,8,43,1,43,3,43,2622,8,43,1,43,3,43,2625,8,43,1,43,3,43,2628,
        8,43,1,43,3,43,2631,8,43,1,43,3,43,2634,8,43,1,43,3,43,2637,8,43,
        1,43,3,43,2640,8,43,1,43,3,43,2643,8,43,1,43,3,43,2646,8,43,1,43,
        3,43,2649,8,43,1,43,3,43,2652,8,43,1,43,3,43,2655,8,43,1,43,3,43,
        2658,8,43,1,43,3,43,2661,8,43,1,43,1,43,3,43,2665,8,43,1,43,3,43,
        2668,8,43,1,43,3,43,2671,8,43,1,43,3,43,2674,8,43,1,43,3,43,2677,
        8,43,1,43,3,43,2680,8,43,1,43,3,43,2683,8,43,1,43,3,43,2686,8,43,
        1,43,3,43,2689,8,43,1,43,3,43,2692,8,43,1,43,3,43,2695,8,43,1,43,
        3,43,2698,8,43,1,43,3,43,2701,8,43,1,43,3,43,2704,8,43,1,43,3,43,
        2707,8,43,1,43,3,43,2710,8,43,1,43,3,43,2713,8,43,1,43,3,43,2716,
        8,43,1,43,3,43,2719,8,43,1,43,1,43,3,43,2723,8,43,1,43,3,43,2726,
        8,43,1,43,3,43,2729,8,43,1,43,3,43,2732,8,43,1,43,3,43,2735,8,43,
        1,43,3,43,2738,8,43,1,43,3,43,2741,8,43,1,43,3,43,2744,8,43,1,43,
        3,43,2747,8,43,1,43,3,43,2750,8,43,1,43,1,43,3,43,2754,8,43,1,43,
        3,43,2757,8,43,1,43,3,43,2760,8,43,1,43,3,43,2763,8,43,1,43,3,43,
        2766,8,43,1,43,3,43,2769,8,43,1,43,3,43,2772,8,43,1,43,3,43,2775,
        8,43,1,43,3,43,2778,8,43,1,43,3,43,2781,8,43,1,43,3,43,2784,8,43,
        1,43,3,43,2787,8,43,1,43,3,43,2790,8,43,1,43,3,43,2793,8,43,1,43,
        3,43,2796,8,43,1,43,3,43,2799,8,43,1,43,3,43,2802,8,43,1,43,3,43,
        2805,8,43,1,43,1,43,3,43,2809,8,43,1,43,3,43,2812,8,43,1,43,3,43,
        2815,8,43,1,43,3,43,2818,8,43,1,43,3,43,2821,8,43,1,43,3,43,2824,
        8,43,1,43,3,43,2827,8,43,1,43,3,43,2830,8,43,1,43,3,43,2833,8,43,
        1,43,3,43,2836,8,43,1,43,3,43,2839,8,43,1,43,3,43,2842,8,43,1,43,
        3,43,2845,8,43,1,43,3,43,2848,8,43,1,43,3,43,2851,8,43,1,43,3,43,
        2854,8,43,1,43,3,43,2857,8,43,1,43,3,43,2860,8,43,1,43,3,43,2863,
        8,43,1,43,1,43,3,43,2867,8,43,1,43,3,43,2870,8,43,1,43,3,43,2873,
        8,43,1,43,3,43,2876,8,43,1,43,3,43,2879,8,43,1,43,3,43,2882,8,43,
        1,43,3,43,2885,8,43,1,43,3,43,2888,8,43,1,43,3,43,2891,8,43,1,43,
        3,43,2894,8,43,1,43,3,43,2897,8,43,1,43,3,43,2900,8,43,1,43,3,43,
        2903,8,43,1,43,3,43,2906,8,43,1,43,3,43,2909,8,43,1,43,3,43,2912,
        8,43,1,43,3,43,2915,8,43,1,43,3,43,2918,8,43,1,43,3,43,2921,8,43,
        1,43,1,43,3,43,2925,8,43,1,43,3,43,2928,8,43,1,43,3,43,2931,8,43,
        1,43,3,43,2934,8,43,1,43,3,43,2937,8,43,1,43,3,43,2940,8,43,1,43,
        3,43,2943,8,43,1,43,3,43,2946,8,43,1,43,3,43,2949,8,43,1,43,3,43,
        2952,8,43,1,43,3,43,2955,8,43,1,43,3,43,2958,8,43,1,43,3,43,2961,
        8,43,1,43,3,43,2964,8,43,1,43,3,43,2967,8,43,1,43,3,43,2970,8,43,
        1,43,3,43,2973,8,43,1,43,3,43,2976,8,43,1,43,3,43,2979,8,43,1,43,
        3,43,2982,8,43,1,43,1,43,3,43,2986,8,43,1,43,3,43,2989,8,43,1,43,
        3,43,2992,8,43,1,43,3,43,2995,8,43,1,43,3,43,2998,8,43,1,43,3,43,
        3001,8,43,1,43,3,43,3004,8,43,1,43,3,43,3007,8,43,1,43,3,43,3010,
        8,43,1,43,3,43,3013,8,43,1,43,3,43,3016,8,43,1,43,3,43,3019,8,43,
        1,43,3,43,3022,8,43,1,43,3,43,3025,8,43,1,43,3,43,3028,8,43,1,43,
        3,43,3031,8,43,1,43,3,43,3034,8,43,1,43,3,43,3037,8,43,1,43,3,43,
        3040,8,43,1,43,1,43,3,43,3044,8,43,1,43,3,43,3047,8,43,1,43,3,43,
        3050,8,43,1,43,3,43,3053,8,43,1,43,3,43,3056,8,43,1,43,3,43,3059,
        8,43,1,43,3,43,3062,8,43,1,43,3,43,3065,8,43,1,43,3,43,3068,8,43,
        1,43,3,43,3071,8,43,1,43,3,43,3074,8,43,1,43,3,43,3077,8,43,1,43,
        3,43,3080,8,43,1,43,3,43,3083,8,43,1,43,3,43,3086,8,43,1,43,3,43,
        3089,8,43,1,43,3,43,3092,8,43,1,43,3,43,3095,8,43,1,43,3,43,3098,
        8,43,1,43,1,43,3,43,3102,8,43,1,43,3,43,3105,8,43,1,43,3,43,3108,
        8,43,1,43,3,43,3111,8,43,1,43,3,43,3114,8,43,1,43,3,43,3117,8,43,
        1,43,3,43,3120,8,43,1,43,3,43,3123,8,43,1,43,3,43,3126,8,43,1,43,
        3,43,3129,8,43,1,43,3,43,3132,8,43,1,43,3,43,3135,8,43,1,43,3,43,
        3138,8,43,1,43,3,43,3141,8,43,1,43,3,43,3144,8,43,1,43,3,43,3147,
        8,43,1,43,3,43,3150,8,43,1,43,3,43,3153,8,43,1,43,3,43,3156,8,43,
        1,43,1,43,3,43,3160,8,43,1,43,3,43,3163,8,43,1,43,3,43,3166,8,43,
        1,43,3,43,3169,8,43,1,43,3,43,3172,8,43,1,43,3,43,3175,8,43,1,43,
        3,43,3178,8,43,1,43,3,43,3181,8,43,1,43,3,43,3184,8,43,1,43,3,43,
        3187,8,43,1,43,3,43,3190,8,43,1,43,3,43,3193,8,43,1,43,3,43,3196,
        8,43,1,43,3,43,3199,8,43,1,43,3,43,3202,8,43,1,43,3,43,3205,8,43,
        1,43,3,43,3208,8,43,1,43,1,43,3,43,3212,8,43,1,43,3,43,3215,8,43,
        1,43,3,43,3218,8,43,1,43,1,43,3,43,3222,8,43,1,43,3,43,3225,8,43,
        1,43,3,43,3228,8,43,1,43,3,43,3231,8,43,1,43,3,43,3234,8,43,1,43,
        3,43,3237,8,43,1,43,3,43,3240,8,43,1,43,3,43,3243,8,43,1,43,3,43,
        3246,8,43,1,43,3,43,3249,8,43,1,43,3,43,3252,8,43,1,43,3,43,3255,
        8,43,1,43,1,43,3,43,3259,8,43,1,43,3,43,3262,8,43,1,43,3,43,3265,
        8,43,1,43,3,43,3268,8,43,1,43,3,43,3271,8,43,1,43,3,43,3274,8,43,
        1,43,3,43,3277,8,43,1,43,3,43,3280,8,43,1,43,3,43,3283,8,43,1,43,
        3,43,3286,8,43,1,43,3,43,3289,8,43,1,43,3,43,3292,8,43,3,43,3294,
        8,43,1,44,4,44,3297,8,44,11,44,12,44,3298,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,3307,8,45,1,45,0,0,46,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,0,3,1,0,111,112,4,0,14,14,19,
        19,109,109,116,116,3,0,109,109,111,112,116,116,4111,0,92,1,0,0,0,
        2,107,1,0,0,0,4,119,1,0,0,0,6,154,1,0,0,0,8,156,1,0,0,0,10,167,1,
        0,0,0,12,1022,1,0,0,0,14,1249,1,0,0,0,16,1275,1,0,0,0,18,1302,1,
        0,0,0,20,1326,1,0,0,0,22,1339,1,0,0,0,24,1341,1,0,0,0,26,1346,1,
        0,0,0,28,1351,1,0,0,0,30,1358,1,0,0,0,32,1368,1,0,0,0,34,1376,1,
        0,0,0,36,1384,1,0,0,0,38,1392,1,0,0,0,40,1400,1,0,0,0,42,1408,1,
        0,0,0,44,1436,1,0,0,0,46,1456,1,0,0,0,48,1516,1,0,0,0,50,1518,1,
        0,0,0,52,1524,1,0,0,0,54,1531,1,0,0,0,56,1533,1,0,0,0,58,1536,1,
        0,0,0,60,1546,1,0,0,0,62,1570,1,0,0,0,64,1590,1,0,0,0,66,1592,1,
        0,0,0,68,1601,1,0,0,0,70,1610,1,0,0,0,72,1616,1,0,0,0,74,1622,1,
        0,0,0,76,1626,1,0,0,0,78,1631,1,0,0,0,80,1637,1,0,0,0,82,1649,1,
        0,0,0,84,2453,1,0,0,0,86,3293,1,0,0,0,88,3296,1,0,0,0,90,3306,1,
        0,0,0,92,98,5,111,0,0,93,94,3,2,1,0,94,95,5,115,0,0,95,97,1,0,0,
        0,96,93,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,102,
        1,0,0,0,100,98,1,0,0,0,101,103,3,2,1,0,102,101,1,0,0,0,102,103,1,
        0,0,0,103,104,1,0,0,0,104,105,5,112,0,0,105,106,5,0,0,1,106,1,1,
        0,0,0,107,108,5,116,0,0,108,109,3,80,40,0,109,110,5,116,0,0,110,
        111,5,113,0,0,111,113,5,116,0,0,112,114,3,4,2,0,113,112,1,0,0,0,
        113,114,1,0,0,0,114,115,1,0,0,0,115,116,5,116,0,0,116,3,1,0,0,0,
        117,120,3,6,3,0,118,120,3,88,44,0,119,117,1,0,0,0,119,118,1,0,0,
        0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,5,1,0,0,0,
        123,155,3,8,4,0,124,155,3,16,8,0,125,155,3,18,9,0,126,155,3,20,10,
        0,127,155,3,24,12,0,128,155,3,26,13,0,129,155,3,34,17,0,130,155,
        3,38,19,0,131,155,3,54,27,0,132,155,3,42,21,0,133,155,3,52,26,0,
        134,155,3,56,28,0,135,155,3,32,16,0,136,155,3,44,22,0,137,155,3,
        46,23,0,138,155,3,62,31,0,139,155,3,60,30,0,140,155,3,64,32,0,141,
        155,3,70,35,0,142,155,3,68,34,0,143,155,3,36,18,0,144,155,3,40,20,
        0,145,155,3,50,25,0,146,155,3,28,14,0,147,155,3,66,33,0,148,155,
        3,22,11,0,149,155,3,48,24,0,150,155,3,72,36,0,151,155,3,74,37,0,
        152,155,3,78,39,0,153,155,3,76,38,0,154,123,1,0,0,0,154,124,1,0,
        0,0,154,125,1,0,0,0,154,126,1,0,0,0,154,127,1,0,0,0,154,128,1,0,
        0,0,154,129,1,0,0,0,154,130,1,0,0,0,154,131,1,0,0,0,154,132,1,0,
        0,0,154,133,1,0,0,0,154,134,1,0,0,0,154,135,1,0,0,0,154,136,1,0,
        0,0,154,137,1,0,0,0,154,138,1,0,0,0,154,139,1,0,0,0,154,140,1,0,
        0,0,154,141,1,0,0,0,154,142,1,0,0,0,154,143,1,0,0,0,154,144,1,0,
        0,0,154,145,1,0,0,0,154,146,1,0,0,0,154,147,1,0,0,0,154,148,1,0,
        0,0,154,149,1,0,0,0,154,150,1,0,0,0,154,151,1,0,0,0,154,152,1,0,
        0,0,154,153,1,0,0,0,155,7,1,0,0,0,156,157,5,111,0,0,157,159,5,117,
        0,0,158,160,3,10,5,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,
        0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,5,112,0,0,164,9,1,0,
        0,0,165,168,3,12,6,0,166,168,3,14,7,0,167,165,1,0,0,0,167,166,1,
        0,0,0,168,11,1,0,0,0,169,1023,5,99,0,0,170,1023,5,100,0,0,171,1023,
        5,101,0,0,172,1023,5,102,0,0,173,1023,5,103,0,0,174,1023,5,104,0,
        0,175,1023,5,105,0,0,176,1023,5,106,0,0,177,1023,5,107,0,0,178,1023,
        5,108,0,0,179,1023,5,1,0,0,180,1023,5,2,0,0,181,1023,5,3,0,0,182,
        1023,5,4,0,0,183,1023,5,5,0,0,184,1023,5,6,0,0,185,1023,5,7,0,0,
        186,1023,5,8,0,0,187,1023,5,9,0,0,188,1023,5,10,0,0,189,1023,5,11,
        0,0,190,1023,5,12,0,0,191,1023,5,13,0,0,192,1023,5,14,0,0,193,1023,
        5,15,0,0,194,1023,5,16,0,0,195,1023,5,17,0,0,196,1023,5,18,0,0,197,
        1023,5,19,0,0,198,1023,5,20,0,0,199,1023,5,21,0,0,200,1023,5,22,
        0,0,201,1023,5,23,0,0,202,1023,5,24,0,0,203,1023,5,25,0,0,204,205,
        5,1,0,0,205,206,5,1,0,0,206,207,5,3,0,0,207,208,5,20,0,0,208,209,
        5,19,0,0,209,1023,5,5,0,0,210,211,5,1,0,0,211,212,5,3,0,0,212,213,
        5,9,0,0,213,214,5,17,0,0,214,215,5,3,0,0,215,216,5,20,0,0,216,217,
        5,13,0,0,217,218,5,6,0,0,218,219,5,12,0,0,219,220,5,5,0,0,220,1023,
        5,23,0,0,221,222,5,1,0,0,222,223,5,3,0,0,223,224,5,20,0,0,224,225,
        5,19,0,0,225,1023,5,5,0,0,226,227,5,1,0,0,227,228,5,4,0,0,228,229,
        5,9,0,0,229,230,5,1,0,0,230,231,5,5,0,0,231,232,5,17,0,0,232,233,
        5,5,0,0,233,234,5,18,0,0,234,235,5,9,0,0,235,1023,5,18,0,0,236,237,
        5,1,0,0,237,1023,5,5,0,0,238,239,5,1,0,0,239,240,5,7,0,0,240,241,
        5,17,0,0,241,242,5,1,0,0,242,243,5,21,0,0,243,1023,5,5,0,0,244,245,
        5,1,0,0,245,246,5,13,0,0,246,247,5,16,0,0,247,248,5,5,0,0,248,249,
        5,17,0,0,249,250,5,18,0,0,250,251,5,1,0,0,251,252,5,14,0,0,252,1023,
        5,4,0,0,253,254,5,1,0,0,254,255,5,16,0,0,255,256,5,15,0,0,256,257,
        5,18,0,0,257,258,5,19,0,0,258,259,5,17,0,0,259,260,5,15,0,0,260,
        261,5,16,0,0,261,262,5,8,0,0,262,1023,5,5,0,0,263,264,5,1,0,0,264,
        265,5,17,0,0,265,266,5,9,0,0,266,267,5,14,0,0,267,1023,5,7,0,0,268,
        269,5,1,0,0,269,270,5,18,0,0,270,271,5,3,0,0,271,272,5,9,0,0,272,
        273,5,9,0,0,273,274,5,3,0,0,274,275,5,9,0,0,275,276,5,17,0,0,276,
        277,5,3,0,0,277,278,5,20,0,0,278,1023,5,13,0,0,279,280,5,1,0,0,280,
        281,5,18,0,0,281,282,5,3,0,0,282,283,5,9,0,0,283,284,5,9,0,0,284,
        285,5,19,0,0,285,286,5,9,0,0,286,287,5,12,0,0,287,288,5,4,0,0,288,
        1023,5,5,0,0,289,290,5,1,0,0,290,291,5,18,0,0,291,292,5,19,0,0,292,
        293,5,5,0,0,293,294,5,17,0,0,294,295,5,9,0,0,295,296,5,18,0,0,296,
        1023,5,11,0,0,297,298,5,1,0,0,298,1023,5,19,0,0,299,300,5,1,0,0,
        300,301,5,19,0,0,301,302,5,9,0,0,302,303,5,12,0,0,303,304,5,4,0,
        0,304,1023,5,5,0,0,305,306,5,2,0,0,306,307,5,1,0,0,307,308,5,3,0,
        0,308,309,5,11,0,0,309,310,5,18,0,0,310,311,5,12,0,0,311,312,5,1,
        0,0,312,313,5,18,0,0,313,1023,5,8,0,0,314,315,5,2,0,0,315,316,5,
        1,0,0,316,1023,5,17,0,0,317,318,5,2,0,0,318,319,5,17,0,0,319,320,
        5,1,0,0,320,321,5,3,0,0,321,322,5,5,0,0,322,323,5,12,0,0,323,324,
        5,5,0,0,324,325,5,6,0,0,325,1023,5,19,0,0,326,327,5,2,0,0,327,328,
        5,17,0,0,328,329,5,1,0,0,329,330,5,3,0,0,330,331,5,5,0,0,331,332,
        5,17,0,0,332,333,5,9,0,0,333,334,5,7,0,0,334,335,5,8,0,0,335,1023,
        5,19,0,0,336,337,5,2,0,0,337,338,5,17,0,0,338,339,5,1,0,0,339,340,
        5,3,0,0,340,341,5,11,0,0,341,342,5,5,0,0,342,343,5,19,0,0,343,344,
        5,12,0,0,344,345,5,5,0,0,345,346,5,6,0,0,346,1023,5,19,0,0,347,348,
        5,2,0,0,348,349,5,17,0,0,349,350,5,1,0,0,350,351,5,3,0,0,351,352,
        5,11,0,0,352,353,5,5,0,0,353,354,5,19,0,0,354,355,5,17,0,0,355,356,
        5,9,0,0,356,357,5,7,0,0,357,358,5,8,0,0,358,1023,5,19,0,0,359,360,
        5,2,0,0,360,361,5,17,0,0,361,362,5,15,0,0,362,363,5,11,0,0,363,364,
        5,5,0,0,364,365,5,14,0,0,365,366,5,2,0,0,366,367,5,1,0,0,367,1023,
        5,17,0,0,368,369,5,3,0,0,369,370,5,3,0,0,370,371,5,5,0,0,371,372,
        5,4,0,0,372,373,5,9,0,0,373,374,5,12,0,0,374,375,5,12,0,0,375,1023,
        5,1,0,0,376,377,5,3,0,0,377,378,5,5,0,0,378,379,5,4,0,0,379,380,
        5,9,0,0,380,381,5,12,0,0,381,382,5,12,0,0,382,1023,5,1,0,0,383,384,
        5,3,0,0,384,385,5,5,0,0,385,386,5,14,0,0,386,1023,5,19,0,0,387,388,
        5,3,0,0,388,389,5,12,0,0,389,390,5,5,0,0,390,391,5,1,0,0,391,1023,
        5,17,0,0,392,393,5,3,0,0,393,394,5,15,0,0,394,395,5,12,0,0,395,396,
        5,15,0,0,396,1023,5,14,0,0,397,398,5,3,0,0,398,399,5,15,0,0,399,
        400,5,13,0,0,400,401,5,13,0,0,401,1023,5,1,0,0,402,403,5,3,0,0,403,
        404,5,15,0,0,404,405,5,16,0,0,405,406,5,24,0,0,406,407,5,17,0,0,
        407,408,5,9,0,0,408,409,5,7,0,0,409,410,5,8,0,0,410,1023,5,19,0,
        0,411,412,5,3,0,0,412,413,5,20,0,0,413,414,5,17,0,0,414,415,5,17,
        0,0,415,416,5,5,0,0,416,417,5,14,0,0,417,418,5,3,0,0,418,1023,5,
        24,0,0,419,420,5,4,0,0,420,421,5,5,0,0,421,422,5,7,0,0,422,423,5,
        17,0,0,423,424,5,5,0,0,424,1023,5,5,0,0,425,426,5,4,0,0,426,427,
        5,9,0,0,427,428,5,1,0,0,428,429,5,5,0,0,429,430,5,17,0,0,430,431,
        5,5,0,0,431,432,5,18,0,0,432,433,5,9,0,0,433,1023,5,18,0,0,434,435,
        5,4,0,0,435,436,5,9,0,0,436,437,5,21,0,0,437,438,5,9,0,0,438,439,
        5,18,0,0,439,440,5,9,0,0,440,441,5,15,0,0,441,1023,5,14,0,0,442,
        443,5,4,0,0,443,444,5,15,0,0,444,445,5,12,0,0,445,446,5,12,0,0,446,
        447,5,1,0,0,447,1023,5,17,0,0,448,449,5,5,0,0,449,450,5,1,0,0,450,
        451,5,3,0,0,451,452,5,20,0,0,452,453,5,19,0,0,453,1023,5,5,0,0,454,
        455,5,5,0,0,455,456,5,3,0,0,456,457,5,9,0,0,457,458,5,17,0,0,458,
        459,5,3,0,0,459,460,5,20,0,0,460,461,5,13,0,0,461,462,5,6,0,0,462,
        463,5,12,0,0,463,464,5,5,0,0,464,1023,5,23,0,0,465,466,5,5,0,0,466,
        467,5,4,0,0,467,468,5,9,0,0,468,469,5,1,0,0,469,470,5,5,0,0,470,
        471,5,17,0,0,471,472,5,5,0,0,472,473,5,18,0,0,473,474,5,9,0,0,474,
        1023,5,18,0,0,475,476,5,5,0,0,476,477,5,7,0,0,477,478,5,17,0,0,478,
        479,5,1,0,0,479,480,5,21,0,0,480,1023,5,5,0,0,481,482,5,5,0,0,482,
        483,5,26,0,0,483,484,5,20,0,0,484,485,5,1,0,0,485,1023,5,12,0,0,
        486,487,5,5,0,0,487,488,5,19,0,0,488,1023,5,8,0,0,489,490,5,5,0,
        0,490,491,5,23,0,0,491,492,5,3,0,0,492,493,5,12,0,0,493,494,5,1,
        0,0,494,1023,5,13,0,0,495,496,5,5,0,0,496,497,5,23,0,0,497,498,5,
        3,0,0,498,499,5,12,0,0,499,500,5,1,0,0,500,501,5,13,0,0,501,502,
        5,4,0,0,502,503,5,15,0,0,503,504,5,22,0,0,504,1023,5,14,0,0,505,
        506,5,7,0,0,506,507,5,17,0,0,507,508,5,1,0,0,508,509,5,21,0,0,509,
        1023,5,5,0,0,510,511,5,7,0,0,511,512,5,17,0,0,512,513,5,5,0,0,513,
        514,5,1,0,0,514,515,5,19,0,0,515,516,5,5,0,0,516,1023,5,17,0,0,517,
        518,5,7,0,0,518,519,5,20,0,0,519,520,5,9,0,0,520,521,5,12,0,0,521,
        522,5,12,0,0,522,523,5,5,0,0,523,524,5,13,0,0,524,525,5,15,0,0,525,
        526,5,19,0,0,526,527,5,12,0,0,527,528,5,5,0,0,528,529,5,6,0,0,529,
        1023,5,19,0,0,530,531,5,7,0,0,531,532,5,20,0,0,532,533,5,9,0,0,533,
        534,5,12,0,0,534,535,5,12,0,0,535,536,5,5,0,0,536,537,5,13,0,0,537,
        538,5,15,0,0,538,539,5,19,0,0,539,540,5,17,0,0,540,541,5,9,0,0,541,
        542,5,7,0,0,542,543,5,8,0,0,543,1023,5,19,0,0,544,545,5,8,0,0,545,
        546,5,24,0,0,546,547,5,16,0,0,547,548,5,8,0,0,548,549,5,5,0,0,549,
        1023,5,14,0,0,550,551,5,9,0,0,551,552,5,1,0,0,552,553,5,3,0,0,553,
        554,5,20,0,0,554,555,5,19,0,0,555,1023,5,5,0,0,556,557,5,9,0,0,557,
        558,5,3,0,0,558,559,5,9,0,0,559,560,5,17,0,0,560,561,5,3,0,0,561,
        562,5,20,0,0,562,563,5,13,0,0,563,564,5,6,0,0,564,565,5,12,0,0,565,
        566,5,5,0,0,566,1023,5,23,0,0,567,568,5,9,0,0,568,569,5,4,0,0,569,
        570,5,9,0,0,570,571,5,1,0,0,571,572,5,5,0,0,572,573,5,17,0,0,573,
        574,5,5,0,0,574,575,5,18,0,0,575,576,5,9,0,0,576,1023,5,18,0,0,577,
        578,5,9,0,0,578,579,5,7,0,0,579,580,5,17,0,0,580,581,5,1,0,0,581,
        582,5,21,0,0,582,1023,5,5,0,0,583,584,5,12,0,0,584,585,5,5,0,0,585,
        586,5,18,0,0,586,1023,5,18,0,0,587,588,5,13,0,0,588,589,5,1,0,0,
        589,590,5,3,0,0,590,591,5,17,0,0,591,592,5,15,0,0,592,1023,5,14,
        0,0,593,594,5,13,0,0,594,595,5,1,0,0,595,596,5,18,0,0,596,597,5,
        3,0,0,597,598,5,20,0,0,598,599,5,12,0,0,599,600,5,9,0,0,600,601,
        5,14,0,0,601,1023,5,5,0,0,602,603,5,13,0,0,603,604,5,9,0,0,604,605,
        5,14,0,0,605,606,5,20,0,0,606,1023,5,18,0,0,607,608,5,13,0,0,608,
        1023,5,20,0,0,609,610,5,13,0,0,610,611,5,20,0,0,611,612,5,12,0,0,
        612,613,5,19,0,0,613,614,5,9,0,0,614,615,5,16,0,0,615,616,5,12,0,
        0,616,1023,5,24,0,0,617,618,5,14,0,0,618,619,5,15,0,0,619,620,5,
        2,0,0,620,621,5,17,0,0,621,622,5,5,0,0,622,623,5,1,0,0,623,624,5,
        11,0,0,624,625,5,18,0,0,625,626,5,16,0,0,626,627,5,1,0,0,627,628,
        5,3,0,0,628,1023,5,5,0,0,629,630,5,14,0,0,630,631,5,15,0,0,631,632,
        5,19,0,0,632,633,5,18,0,0,633,634,5,9,0,0,634,635,5,7,0,0,635,1023,
        5,14,0,0,636,637,5,14,0,0,637,638,5,19,0,0,638,639,5,9,0,0,639,640,
        5,12,0,0,640,641,5,4,0,0,641,1023,5,5,0,0,642,643,5,14,0,0,643,644,
        5,20,0,0,644,645,5,13,0,0,645,646,5,2,0,0,646,647,5,5,0,0,647,648,
        5,17,0,0,648,649,5,18,0,0,649,650,5,9,0,0,650,651,5,7,0,0,651,1023,
        5,14,0,0,652,653,5,15,0,0,653,654,5,1,0,0,654,655,5,3,0,0,655,656,
        5,20,0,0,656,657,5,19,0,0,657,1023,5,5,0,0,658,659,5,15,0,0,659,
        660,5,3,0,0,660,661,5,9,0,0,661,662,5,17,0,0,662,663,5,3,0,0,663,
        664,5,20,0,0,664,665,5,13,0,0,665,666,5,6,0,0,666,667,5,12,0,0,667,
        668,5,5,0,0,668,1023,5,23,0,0,669,670,5,15,0,0,670,671,5,4,0,0,671,
        672,5,9,0,0,672,673,5,1,0,0,673,674,5,5,0,0,674,675,5,17,0,0,675,
        676,5,5,0,0,676,677,5,18,0,0,677,678,5,9,0,0,678,1023,5,18,0,0,679,
        680,5,15,0,0,680,681,5,7,0,0,681,682,5,17,0,0,682,683,5,1,0,0,683,
        684,5,21,0,0,684,1023,5,5,0,0,685,686,5,15,0,0,686,687,5,14,0,0,
        687,688,5,5,0,0,688,689,5,8,0,0,689,690,5,1,0,0,690,691,5,12,0,0,
        691,1023,5,6,0,0,692,693,5,15,0,0,693,694,5,14,0,0,694,695,5,5,0,
        0,695,696,5,26,0,0,696,697,5,20,0,0,697,698,5,1,0,0,698,699,5,17,
        0,0,699,700,5,19,0,0,700,701,5,5,0,0,701,1023,5,17,0,0,702,703,5,
        15,0,0,703,704,5,14,0,0,704,705,5,5,0,0,705,706,5,18,0,0,706,707,
        5,20,0,0,707,708,5,16,0,0,708,709,5,5,0,0,709,710,5,17,0,0,710,711,
        5,9,0,0,711,712,5,15,0,0,712,1023,5,17,0,0,713,714,5,15,0,0,714,
        715,5,15,0,0,715,716,5,2,0,0,716,717,5,12,0,0,717,718,5,9,0,0,718,
        719,5,26,0,0,719,720,5,20,0,0,720,1023,5,5,0,0,721,722,5,15,0,0,
        722,723,5,17,0,0,723,724,5,4,0,0,724,725,5,6,0,0,725,726,5,5,0,0,
        726,727,5,13,0,0,727,728,5,9,0,0,728,729,5,14,0,0,729,730,5,9,0,
        0,730,731,5,14,0,0,731,1023,5,5,0,0,732,733,5,15,0,0,733,734,5,18,
        0,0,734,735,5,12,0,0,735,736,5,1,0,0,736,737,5,18,0,0,737,1023,5,
        8,0,0,738,739,5,15,0,0,739,740,5,19,0,0,740,741,5,9,0,0,741,742,
        5,12,0,0,742,743,5,4,0,0,743,1023,5,5,0,0,744,745,5,16,0,0,745,746,
        5,1,0,0,746,747,5,17,0,0,747,748,5,1,0,0,748,749,5,7,0,0,749,750,
        5,17,0,0,750,751,5,1,0,0,751,752,5,16,0,0,752,1023,5,8,0,0,753,754,
        5,16,0,0,754,755,5,1,0,0,755,756,5,17,0,0,756,757,5,5,0,0,757,758,
        5,14,0,0,758,759,5,12,0,0,759,760,5,5,0,0,760,761,5,6,0,0,761,1023,
        5,19,0,0,762,763,5,16,0,0,763,764,5,1,0,0,764,765,5,17,0,0,765,766,
        5,5,0,0,766,767,5,14,0,0,767,768,5,17,0,0,768,769,5,9,0,0,769,770,
        5,7,0,0,770,771,5,8,0,0,771,1023,5,19,0,0,772,773,5,16,0,0,773,774,
        5,5,0,0,774,775,5,17,0,0,775,776,5,3,0,0,776,777,5,5,0,0,777,778,
        5,14,0,0,778,1023,5,19,0,0,779,780,5,16,0,0,780,781,5,5,0,0,781,
        782,5,17,0,0,782,783,5,9,0,0,783,784,5,15,0,0,784,1023,5,4,0,0,785,
        786,5,16,0,0,786,787,5,5,0,0,787,788,5,17,0,0,788,789,5,9,0,0,789,
        790,5,15,0,0,790,791,5,4,0,0,791,792,5,3,0,0,792,793,5,5,0,0,793,
        794,5,14,0,0,794,795,5,19,0,0,795,796,5,5,0,0,796,797,5,17,0,0,797,
        798,5,5,0,0,798,1023,5,4,0,0,799,800,5,16,0,0,800,801,5,12,0,0,801,
        802,5,20,0,0,802,1023,5,18,0,0,803,804,5,16,0,0,804,805,5,12,0,0,
        805,806,5,20,0,0,806,807,5,18,0,0,807,808,5,13,0,0,808,809,5,9,0,
        0,809,810,5,14,0,0,810,811,5,20,0,0,811,1023,5,18,0,0,812,813,5,
        26,0,0,813,814,5,20,0,0,814,815,5,5,0,0,815,816,5,18,0,0,816,817,
        5,19,0,0,817,818,5,9,0,0,818,819,5,15,0,0,819,1023,5,14,0,0,820,
        821,5,26,0,0,821,822,5,20,0,0,822,823,5,5,0,0,823,824,5,18,0,0,824,
        825,5,19,0,0,825,826,5,9,0,0,826,827,5,15,0,0,827,828,5,14,0,0,828,
        829,5,4,0,0,829,830,5,15,0,0,830,831,5,22,0,0,831,1023,5,14,0,0,
        832,833,5,26,0,0,833,834,5,20,0,0,834,835,5,15,0,0,835,836,5,19,
        0,0,836,837,5,5,0,0,837,838,5,4,0,0,838,839,5,2,0,0,839,1023,5,12,
        0,0,840,841,5,26,0,0,841,842,5,20,0,0,842,843,5,15,0,0,843,844,5,
        19,0,0,844,845,5,5,0,0,845,846,5,12,0,0,846,847,5,5,0,0,847,848,
        5,6,0,0,848,1023,5,19,0,0,849,850,5,26,0,0,850,851,5,20,0,0,851,
        852,5,15,0,0,852,853,5,19,0,0,853,854,5,5,0,0,854,855,5,17,0,0,855,
        856,5,9,0,0,856,857,5,7,0,0,857,858,5,8,0,0,858,1023,5,19,0,0,859,
        860,5,17,0,0,860,861,5,5,0,0,861,862,5,7,0,0,862,863,5,9,0,0,863,
        864,5,18,0,0,864,865,5,19,0,0,865,866,5,5,0,0,866,867,5,17,0,0,867,
        868,5,5,0,0,868,1023,5,4,0,0,869,870,5,17,0,0,870,871,5,5,0,0,871,
        872,5,19,0,0,872,873,5,20,0,0,873,874,5,17,0,0,874,1023,5,14,0,0,
        875,876,5,18,0,0,876,877,5,5,0,0,877,878,5,3,0,0,878,879,5,19,0,
        0,879,880,5,9,0,0,880,881,5,15,0,0,881,1023,5,14,0,0,882,883,5,18,
        0,0,883,884,5,5,0,0,884,885,5,13,0,0,885,886,5,9,0,0,886,887,5,3,
        0,0,887,888,5,15,0,0,888,889,5,12,0,0,889,890,5,15,0,0,890,1023,
        5,14,0,0,891,892,5,18,0,0,892,893,5,12,0,0,893,894,5,1,0,0,894,895,
        5,18,0,0,895,1023,5,8,0,0,896,897,5,18,0,0,897,898,5,16,0,0,898,
        899,5,1,0,0,899,900,5,3,0,0,900,1023,5,5,0,0,901,902,5,18,0,0,902,
        903,5,18,0,0,903,904,5,8,0,0,904,905,5,1,0,0,905,906,5,17,0,0,906,
        1023,5,16,0,0,907,908,5,18,0,0,908,909,5,19,0,0,909,910,5,5,0,0,
        910,911,5,17,0,0,911,912,5,12,0,0,912,913,5,9,0,0,913,914,5,14,0,
        0,914,1023,5,7,0,0,915,916,5,19,0,0,916,917,5,1,0,0,917,1023,5,2,
        0,0,918,919,5,19,0,0,919,920,5,8,0,0,920,921,5,15,0,0,921,922,5,
        17,0,0,922,1023,5,14,0,0,923,924,5,19,0,0,924,925,5,8,0,0,925,926,
        5,17,0,0,926,927,5,5,0,0,927,928,5,5,0,0,928,929,5,26,0,0,929,930,
        5,20,0,0,930,931,5,1,0,0,931,932,5,17,0,0,932,933,5,19,0,0,933,934,
        5,5,0,0,934,935,5,17,0,0,935,1023,5,18,0,0,936,937,5,19,0,0,937,
        938,5,8,0,0,938,939,5,17,0,0,939,940,5,5,0,0,940,941,5,5,0,0,941,
        942,5,18,0,0,942,943,5,20,0,0,943,944,5,16,0,0,944,945,5,5,0,0,945,
        946,5,17,0,0,946,947,5,9,0,0,947,948,5,15,0,0,948,1023,5,17,0,0,
        949,950,5,19,0,0,950,951,5,22,0,0,951,952,5,15,0,0,952,953,5,18,
        0,0,953,954,5,20,0,0,954,955,5,16,0,0,955,956,5,5,0,0,956,957,5,
        17,0,0,957,958,5,9,0,0,958,959,5,15,0,0,959,1023,5,17,0,0,960,961,
        5,20,0,0,961,962,5,1,0,0,962,963,5,3,0,0,963,964,5,20,0,0,964,965,
        5,19,0,0,965,1023,5,5,0,0,966,967,5,20,0,0,967,968,5,3,0,0,968,969,
        5,9,0,0,969,970,5,17,0,0,970,971,5,3,0,0,971,972,5,20,0,0,972,973,
        5,13,0,0,973,974,5,6,0,0,974,975,5,12,0,0,975,976,5,5,0,0,976,1023,
        5,23,0,0,977,978,5,20,0,0,978,979,5,4,0,0,979,980,5,9,0,0,980,981,
        5,1,0,0,981,982,5,5,0,0,982,983,5,17,0,0,983,984,5,5,0,0,984,985,
        5,18,0,0,985,986,5,9,0,0,986,1023,5,18,0,0,987,988,5,20,0,0,988,
        989,5,7,0,0,989,990,5,17,0,0,990,991,5,1,0,0,991,992,5,21,0,0,992,
        1023,5,5,0,0,993,994,5,20,0,0,994,995,5,14,0,0,995,996,5,4,0,0,996,
        997,5,5,0,0,997,998,5,17,0,0,998,999,5,18,0,0,999,1000,5,3,0,0,1000,
        1001,5,15,0,0,1001,1002,5,17,0,0,1002,1023,5,5,0,0,1003,1004,5,24,
        0,0,1004,1005,5,1,0,0,1005,1006,5,3,0,0,1006,1007,5,20,0,0,1007,
        1008,5,19,0,0,1008,1023,5,5,0,0,1009,1010,5,24,0,0,1010,1011,5,4,
        0,0,1011,1012,5,9,0,0,1012,1013,5,1,0,0,1013,1014,5,5,0,0,1014,1015,
        5,17,0,0,1015,1016,5,5,0,0,1016,1017,5,18,0,0,1017,1018,5,9,0,0,
        1018,1023,5,18,0,0,1019,1020,5,24,0,0,1020,1021,5,5,0,0,1021,1023,
        5,14,0,0,1022,169,1,0,0,0,1022,170,1,0,0,0,1022,171,1,0,0,0,1022,
        172,1,0,0,0,1022,173,1,0,0,0,1022,174,1,0,0,0,1022,175,1,0,0,0,1022,
        176,1,0,0,0,1022,177,1,0,0,0,1022,178,1,0,0,0,1022,179,1,0,0,0,1022,
        180,1,0,0,0,1022,181,1,0,0,0,1022,182,1,0,0,0,1022,183,1,0,0,0,1022,
        184,1,0,0,0,1022,185,1,0,0,0,1022,186,1,0,0,0,1022,187,1,0,0,0,1022,
        188,1,0,0,0,1022,189,1,0,0,0,1022,190,1,0,0,0,1022,191,1,0,0,0,1022,
        192,1,0,0,0,1022,193,1,0,0,0,1022,194,1,0,0,0,1022,195,1,0,0,0,1022,
        196,1,0,0,0,1022,197,1,0,0,0,1022,198,1,0,0,0,1022,199,1,0,0,0,1022,
        200,1,0,0,0,1022,201,1,0,0,0,1022,202,1,0,0,0,1022,203,1,0,0,0,1022,
        204,1,0,0,0,1022,210,1,0,0,0,1022,221,1,0,0,0,1022,226,1,0,0,0,1022,
        236,1,0,0,0,1022,238,1,0,0,0,1022,244,1,0,0,0,1022,253,1,0,0,0,1022,
        263,1,0,0,0,1022,268,1,0,0,0,1022,279,1,0,0,0,1022,289,1,0,0,0,1022,
        297,1,0,0,0,1022,299,1,0,0,0,1022,305,1,0,0,0,1022,314,1,0,0,0,1022,
        317,1,0,0,0,1022,326,1,0,0,0,1022,336,1,0,0,0,1022,347,1,0,0,0,1022,
        359,1,0,0,0,1022,368,1,0,0,0,1022,376,1,0,0,0,1022,383,1,0,0,0,1022,
        387,1,0,0,0,1022,392,1,0,0,0,1022,397,1,0,0,0,1022,402,1,0,0,0,1022,
        411,1,0,0,0,1022,419,1,0,0,0,1022,425,1,0,0,0,1022,434,1,0,0,0,1022,
        442,1,0,0,0,1022,448,1,0,0,0,1022,454,1,0,0,0,1022,465,1,0,0,0,1022,
        475,1,0,0,0,1022,481,1,0,0,0,1022,486,1,0,0,0,1022,489,1,0,0,0,1022,
        495,1,0,0,0,1022,505,1,0,0,0,1022,510,1,0,0,0,1022,517,1,0,0,0,1022,
        530,1,0,0,0,1022,544,1,0,0,0,1022,550,1,0,0,0,1022,556,1,0,0,0,1022,
        567,1,0,0,0,1022,577,1,0,0,0,1022,583,1,0,0,0,1022,587,1,0,0,0,1022,
        593,1,0,0,0,1022,602,1,0,0,0,1022,607,1,0,0,0,1022,609,1,0,0,0,1022,
        617,1,0,0,0,1022,629,1,0,0,0,1022,636,1,0,0,0,1022,642,1,0,0,0,1022,
        652,1,0,0,0,1022,658,1,0,0,0,1022,669,1,0,0,0,1022,679,1,0,0,0,1022,
        685,1,0,0,0,1022,692,1,0,0,0,1022,702,1,0,0,0,1022,713,1,0,0,0,1022,
        721,1,0,0,0,1022,732,1,0,0,0,1022,738,1,0,0,0,1022,744,1,0,0,0,1022,
        753,1,0,0,0,1022,762,1,0,0,0,1022,772,1,0,0,0,1022,779,1,0,0,0,1022,
        785,1,0,0,0,1022,799,1,0,0,0,1022,803,1,0,0,0,1022,812,1,0,0,0,1022,
        820,1,0,0,0,1022,832,1,0,0,0,1022,840,1,0,0,0,1022,849,1,0,0,0,1022,
        859,1,0,0,0,1022,869,1,0,0,0,1022,875,1,0,0,0,1022,882,1,0,0,0,1022,
        891,1,0,0,0,1022,896,1,0,0,0,1022,901,1,0,0,0,1022,907,1,0,0,0,1022,
        915,1,0,0,0,1022,918,1,0,0,0,1022,923,1,0,0,0,1022,936,1,0,0,0,1022,
        949,1,0,0,0,1022,960,1,0,0,0,1022,966,1,0,0,0,1022,977,1,0,0,0,1022,
        987,1,0,0,0,1022,993,1,0,0,0,1022,1003,1,0,0,0,1022,1009,1,0,0,0,
        1022,1019,1,0,0,0,1023,13,1,0,0,0,1024,1025,5,81,0,0,1025,1026,5,
        8,0,0,1026,1027,5,9,0,0,1027,1028,5,6,0,0,1028,1029,5,19,0,0,1029,
        1030,5,27,0,0,1030,1031,5,94,0,0,1031,1033,5,28,0,0,1032,1034,3,
        10,5,0,1033,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1033,1,0,0,0,1035,
        1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,5,29,0,0,1038,1250,1,0,
        0,0,1039,1040,5,81,0,0,1040,1041,5,8,0,0,1041,1042,5,9,0,0,1042,
        1043,5,6,0,0,1043,1044,5,19,0,0,1044,1045,5,27,0,0,1045,1046,5,87,
        0,0,1046,1048,5,28,0,0,1047,1049,3,10,5,0,1048,1047,1,0,0,0,1049,
        1050,1,0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,
        0,1052,1053,5,29,0,0,1053,1250,1,0,0,0,1054,1055,5,18,0,0,1055,1056,
        5,8,0,0,1056,1057,5,9,0,0,1057,1058,5,6,0,0,1058,1059,5,19,0,0,1059,
        1061,5,28,0,0,1060,1062,3,10,5,0,1061,1060,1,0,0,0,1062,1063,1,0,
        0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1066,
        5,29,0,0,1066,1250,1,0,0,0,1067,1068,5,30,0,0,1068,1069,5,15,0,0,
        1069,1070,5,14,0,0,1070,1071,5,19,0,0,1071,1072,5,17,0,0,1072,1073,
        5,15,0,0,1073,1074,5,12,0,0,1074,1075,5,27,0,0,1075,1076,5,94,0,
        0,1076,1078,5,28,0,0,1077,1079,3,10,5,0,1078,1077,1,0,0,0,1079,1080,
        1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,
        1083,5,29,0,0,1083,1250,1,0,0,0,1084,1085,5,30,0,0,1085,1086,5,15,
        0,0,1086,1087,5,14,0,0,1087,1088,5,19,0,0,1088,1089,5,17,0,0,1089,
        1090,5,15,0,0,1090,1091,5,12,0,0,1091,1092,5,27,0,0,1092,1093,5,
        87,0,0,1093,1095,5,28,0,0,1094,1096,3,10,5,0,1095,1094,1,0,0,0,1096,
        1097,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,
        0,1099,1100,5,29,0,0,1100,1250,1,0,0,0,1101,1102,5,3,0,0,1102,1103,
        5,15,0,0,1103,1104,5,14,0,0,1104,1105,5,19,0,0,1105,1106,5,17,0,
        0,1106,1107,5,15,0,0,1107,1108,5,12,0,0,1108,1110,5,28,0,0,1109,
        1111,3,10,5,0,1110,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1110,1,0,
        0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1115,5,29,0,0,1115,
        1250,1,0,0,0,1116,1117,5,88,0,0,1117,1118,5,12,0,0,1118,1119,5,19,
        0,0,1119,1120,5,27,0,0,1120,1121,5,94,0,0,1121,1123,5,28,0,0,1122,
        1124,3,10,5,0,1123,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1123,1,0,
        0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1128,5,29,0,0,1128,
        1250,1,0,0,0,1129,1130,5,88,0,0,1130,1131,5,12,0,0,1131,1132,5,19,
        0,0,1132,1133,5,27,0,0,1133,1134,5,87,0,0,1134,1136,5,28,0,0,1135,
        1137,3,10,5,0,1136,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1136,1,0,
        0,0,1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,1141,5,29,0,0,1141,
        1250,1,0,0,0,1142,1143,5,1,0,0,1143,1144,5,12,0,0,1144,1145,5,19,
        0,0,1145,1147,5,28,0,0,1146,1148,3,10,5,0,1147,1146,1,0,0,0,1148,
        1149,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,
        0,1151,1152,5,29,0,0,1152,1250,1,0,0,0,1153,1154,5,81,0,0,1154,1155,
        5,20,0,0,1155,1156,5,16,0,0,1156,1157,5,5,0,0,1157,1158,5,17,0,0,
        1158,1159,5,27,0,0,1159,1160,5,94,0,0,1160,1162,5,28,0,0,1161,1163,
        3,10,5,0,1162,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1162,1,0,0,0,1164,
        1165,1,0,0,0,1165,1166,1,0,0,0,1166,1167,5,29,0,0,1167,1250,1,0,
        0,0,1168,1169,5,81,0,0,1169,1170,5,20,0,0,1170,1171,5,16,0,0,1171,
        1172,5,5,0,0,1172,1173,5,17,0,0,1173,1174,5,27,0,0,1174,1175,5,87,
        0,0,1175,1177,5,28,0,0,1176,1178,3,10,5,0,1177,1176,1,0,0,0,1178,
        1179,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,
        0,1181,1182,5,29,0,0,1182,1250,1,0,0,0,1183,1184,5,18,0,0,1184,1185,
        5,20,0,0,1185,1186,5,16,0,0,1186,1187,5,5,0,0,1187,1188,5,17,0,0,
        1188,1190,5,28,0,0,1189,1191,3,10,5,0,1190,1189,1,0,0,0,1191,1192,
        1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,
        1195,5,29,0,0,1195,1250,1,0,0,0,1196,1197,5,22,0,0,1197,1198,5,9,
        0,0,1198,1199,5,14,0,0,1199,1200,5,4,0,0,1200,1201,5,15,0,0,1201,
        1202,5,22,0,0,1202,1203,5,18,0,0,1203,1205,5,28,0,0,1204,1206,3,
        10,5,0,1205,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1205,1,0,0,0,1207,
        1208,1,0,0,0,1208,1209,1,0,0,0,1209,1210,5,29,0,0,1210,1250,1,0,
        0,0,1211,1212,5,3,0,0,1212,1213,5,15,0,0,1213,1214,5,13,0,0,1214,
        1215,5,13,0,0,1215,1216,5,1,0,0,1216,1217,5,14,0,0,1217,1218,5,4,
        0,0,1218,1220,5,28,0,0,1219,1221,3,10,5,0,1220,1219,1,0,0,0,1221,
        1222,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,
        0,1224,1225,5,29,0,0,1225,1250,1,0,0,0,1226,1227,5,15,0,0,1227,1228,
        5,16,0,0,1228,1229,5,19,0,0,1229,1230,5,9,0,0,1230,1231,5,15,0,0,
        1231,1232,5,14,0,0,1232,1234,5,28,0,0,1233,1235,3,10,5,0,1234,1233,
        1,0,0,0,1235,1236,1,0,0,0,1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,
        1238,1,0,0,0,1238,1239,5,29,0,0,1239,1250,1,0,0,0,1240,1241,5,96,
        0,0,1241,1242,5,1,0,0,1242,1243,5,3,0,0,1243,1244,5,11,0,0,1244,
        1245,5,81,0,0,1245,1246,5,16,0,0,1246,1247,5,1,0,0,1247,1248,5,3,
        0,0,1248,1250,5,5,0,0,1249,1024,1,0,0,0,1249,1039,1,0,0,0,1249,1054,
        1,0,0,0,1249,1067,1,0,0,0,1249,1084,1,0,0,0,1249,1101,1,0,0,0,1249,
        1116,1,0,0,0,1249,1129,1,0,0,0,1249,1142,1,0,0,0,1249,1153,1,0,0,
        0,1249,1168,1,0,0,0,1249,1183,1,0,0,0,1249,1196,1,0,0,0,1249,1211,
        1,0,0,0,1249,1226,1,0,0,0,1249,1240,1,0,0,0,1250,15,1,0,0,0,1251,
        1252,5,111,0,0,1252,1254,5,31,0,0,1253,1255,3,88,44,0,1254,1253,
        1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1276,5,112,0,0,
        1257,1258,5,111,0,0,1258,1259,5,31,0,0,1259,1261,5,112,0,0,1260,
        1262,3,88,44,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1276,1,0,
        0,0,1263,1264,5,111,0,0,1264,1265,5,32,0,0,1265,1267,5,112,0,0,1266,
        1268,3,88,44,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1276,1,0,
        0,0,1269,1270,5,111,0,0,1270,1272,5,33,0,0,1271,1273,3,88,44,0,1272,
        1271,1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,5,112,
        0,0,1275,1251,1,0,0,0,1275,1257,1,0,0,0,1275,1263,1,0,0,0,1275,1269,
        1,0,0,0,1276,17,1,0,0,0,1277,1279,5,111,0,0,1278,1280,3,88,44,0,
        1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1282,
        5,31,0,0,1282,1303,5,112,0,0,1283,1285,3,88,44,0,1284,1283,1,0,0,
        0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1287,5,111,0,0,1287,1288,
        5,31,0,0,1288,1303,5,112,0,0,1289,1291,3,88,44,0,1290,1289,1,0,0,
        0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1293,5,111,0,0,1293,1294,
        5,32,0,0,1294,1303,5,112,0,0,1295,1296,5,111,0,0,1296,1298,5,34,
        0,0,1297,1299,3,88,44,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,
        1300,1,0,0,0,1300,1301,5,31,0,0,1301,1303,5,112,0,0,1302,1277,1,
        0,0,0,1302,1284,1,0,0,0,1302,1290,1,0,0,0,1302,1295,1,0,0,0,1303,
        19,1,0,0,0,1304,1305,5,111,0,0,1305,1307,5,31,0,0,1306,1308,3,88,
        44,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,
        1310,5,31,0,0,1310,1327,5,112,0,0,1311,1312,5,111,0,0,1312,1313,
        5,31,0,0,1313,1315,5,112,0,0,1314,1316,3,88,44,0,1315,1314,1,0,0,
        0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,5,111,0,0,1318,1319,
        5,31,0,0,1319,1327,5,112,0,0,1320,1321,5,111,0,0,1321,1323,5,34,
        0,0,1322,1324,3,88,44,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,
        1325,1,0,0,0,1325,1327,5,112,0,0,1326,1304,1,0,0,0,1326,1311,1,0,
        0,0,1326,1320,1,0,0,0,1327,21,1,0,0,0,1328,1329,5,111,0,0,1329,1330,
        5,118,0,0,1330,1331,3,88,44,0,1331,1332,5,112,0,0,1332,1340,1,0,
        0,0,1333,1334,5,111,0,0,1334,1336,5,35,0,0,1335,1337,3,88,44,0,1336,
        1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1340,5,112,
        0,0,1339,1328,1,0,0,0,1339,1333,1,0,0,0,1340,23,1,0,0,0,1341,1342,
        5,111,0,0,1342,1343,5,90,0,0,1343,1344,5,36,0,0,1344,1345,5,112,
        0,0,1345,25,1,0,0,0,1346,1347,5,111,0,0,1347,1348,5,90,0,0,1348,
        1349,5,37,0,0,1349,1350,5,112,0,0,1350,27,1,0,0,0,1351,1352,5,111,
        0,0,1352,1354,5,38,0,0,1353,1355,3,88,44,0,1354,1353,1,0,0,0,1354,
        1355,1,0,0,0,1355,1356,1,0,0,0,1356,1357,5,112,0,0,1357,29,1,0,0,
        0,1358,1359,5,111,0,0,1359,1360,5,39,0,0,1360,1361,5,112,0,0,1361,
        31,1,0,0,0,1362,1363,5,111,0,0,1363,1364,5,40,0,0,1364,1369,5,112,
        0,0,1365,1366,5,111,0,0,1366,1367,5,41,0,0,1367,1369,5,112,0,0,1368,
        1362,1,0,0,0,1368,1365,1,0,0,0,1369,33,1,0,0,0,1370,1371,5,111,0,
        0,1371,1372,5,42,0,0,1372,1377,5,112,0,0,1373,1374,5,111,0,0,1374,
        1375,5,43,0,0,1375,1377,5,112,0,0,1376,1370,1,0,0,0,1376,1373,1,
        0,0,0,1377,35,1,0,0,0,1378,1379,5,111,0,0,1379,1380,5,44,0,0,1380,
        1385,5,112,0,0,1381,1382,5,111,0,0,1382,1383,5,45,0,0,1383,1385,
        5,112,0,0,1384,1378,1,0,0,0,1384,1381,1,0,0,0,1385,37,1,0,0,0,1386,
        1387,5,111,0,0,1387,1388,5,46,0,0,1388,1393,5,112,0,0,1389,1390,
        5,111,0,0,1390,1391,5,47,0,0,1391,1393,5,112,0,0,1392,1386,1,0,0,
        0,1392,1389,1,0,0,0,1393,39,1,0,0,0,1394,1395,5,111,0,0,1395,1396,
        5,48,0,0,1396,1401,5,112,0,0,1397,1398,5,111,0,0,1398,1399,5,49,
        0,0,1399,1401,5,112,0,0,1400,1394,1,0,0,0,1400,1397,1,0,0,0,1401,
        41,1,0,0,0,1402,1403,5,111,0,0,1403,1404,5,50,0,0,1404,1409,5,112,
        0,0,1405,1406,5,111,0,0,1406,1407,5,51,0,0,1407,1409,5,112,0,0,1408,
        1402,1,0,0,0,1408,1405,1,0,0,0,1409,43,1,0,0,0,1410,1411,5,111,0,
        0,1411,1413,5,52,0,0,1412,1414,3,88,44,0,1413,1412,1,0,0,0,1413,
        1414,1,0,0,0,1414,1415,1,0,0,0,1415,1437,5,112,0,0,1416,1417,5,111,
        0,0,1417,1419,5,53,0,0,1418,1420,3,88,44,0,1419,1418,1,0,0,0,1419,
        1420,1,0,0,0,1420,1421,1,0,0,0,1421,1437,5,112,0,0,1422,1423,5,111,
        0,0,1423,1425,5,52,0,0,1424,1426,3,88,44,0,1425,1424,1,0,0,0,1425,
        1426,1,0,0,0,1426,1427,1,0,0,0,1427,1428,5,31,0,0,1428,1437,5,112,
        0,0,1429,1430,5,111,0,0,1430,1432,5,53,0,0,1431,1433,3,88,44,0,1432,
        1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1435,5,31,
        0,0,1435,1437,5,112,0,0,1436,1410,1,0,0,0,1436,1416,1,0,0,0,1436,
        1422,1,0,0,0,1436,1429,1,0,0,0,1437,45,1,0,0,0,1438,1439,5,111,0,
        0,1439,1440,5,54,0,0,1440,1457,5,112,0,0,1441,1442,5,111,0,0,1442,
        1443,5,55,0,0,1443,1457,5,112,0,0,1444,1445,5,111,0,0,1445,1446,
        5,56,0,0,1446,1457,5,112,0,0,1447,1448,5,111,0,0,1448,1449,5,57,
        0,0,1449,1457,5,112,0,0,1450,1451,5,111,0,0,1451,1452,5,58,0,0,1452,
        1457,5,112,0,0,1453,1454,5,111,0,0,1454,1455,5,59,0,0,1455,1457,
        5,112,0,0,1456,1438,1,0,0,0,1456,1441,1,0,0,0,1456,1444,1,0,0,0,
        1456,1447,1,0,0,0,1456,1450,1,0,0,0,1456,1453,1,0,0,0,1457,47,1,
        0,0,0,1458,1459,5,111,0,0,1459,1460,5,114,0,0,1460,1517,5,112,0,
        0,1461,1462,5,111,0,0,1462,1463,5,60,0,0,1463,1517,5,112,0,0,1464,
        1465,5,111,0,0,1465,1467,5,115,0,0,1466,1468,3,88,44,0,1467,1466,
        1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1517,5,112,0,0,
        1470,1471,5,111,0,0,1471,1472,5,61,0,0,1472,1473,5,115,0,0,1473,
        1517,5,112,0,0,1474,1475,5,111,0,0,1475,1477,5,36,0,0,1476,1478,
        3,88,44,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,
        1479,1517,5,112,0,0,1480,1481,5,111,0,0,1481,1482,5,62,0,0,1482,
        1517,5,112,0,0,1483,1484,5,111,0,0,1484,1486,5,37,0,0,1485,1487,
        3,88,44,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,
        1488,1517,5,112,0,0,1489,1490,5,111,0,0,1490,1491,5,63,0,0,1491,
        1517,5,112,0,0,1492,1493,5,111,0,0,1493,1495,5,113,0,0,1494,1496,
        3,88,44,0,1495,1494,1,0,0,0,1495,1496,1,0,0,0,1496,1497,1,0,0,0,
        1497,1517,5,112,0,0,1498,1499,5,111,0,0,1499,1501,5,64,0,0,1500,
        1502,3,88,44,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,
        0,0,1503,1517,5,112,0,0,1504,1505,5,111,0,0,1505,1506,5,65,0,0,1506,
        1517,5,112,0,0,1507,1508,5,111,0,0,1508,1510,5,66,0,0,1509,1511,
        3,88,44,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,
        1512,1517,5,112,0,0,1513,1514,5,111,0,0,1514,1515,5,67,0,0,1515,
        1517,5,112,0,0,1516,1458,1,0,0,0,1516,1461,1,0,0,0,1516,1464,1,0,
        0,0,1516,1470,1,0,0,0,1516,1474,1,0,0,0,1516,1480,1,0,0,0,1516,1483,
        1,0,0,0,1516,1489,1,0,0,0,1516,1492,1,0,0,0,1516,1498,1,0,0,0,1516,
        1504,1,0,0,0,1516,1507,1,0,0,0,1516,1513,1,0,0,0,1517,49,1,0,0,0,
        1518,1519,5,68,0,0,1519,51,1,0,0,0,1520,1521,5,111,0,0,1521,1522,
        5,69,0,0,1522,1525,5,112,0,0,1523,1525,5,70,0,0,1524,1520,1,0,0,
        0,1524,1523,1,0,0,0,1525,53,1,0,0,0,1526,1527,5,111,0,0,1527,1528,
        5,90,0,0,1528,1532,5,112,0,0,1529,1532,5,71,0,0,1530,1532,5,72,0,
        0,1531,1526,1,0,0,0,1531,1529,1,0,0,0,1531,1530,1,0,0,0,1532,55,
        1,0,0,0,1533,1534,5,111,0,0,1534,1535,5,112,0,0,1535,57,1,0,0,0,
        1536,1537,5,111,0,0,1537,1538,5,117,0,0,1538,1539,5,112,0,0,1539,
        59,1,0,0,0,1540,1541,5,111,0,0,1541,1542,5,73,0,0,1542,1547,5,112,
        0,0,1543,1544,5,111,0,0,1544,1545,5,74,0,0,1545,1547,5,112,0,0,1546,
        1540,1,0,0,0,1546,1543,1,0,0,0,1547,61,1,0,0,0,1548,1549,5,111,0,
        0,1549,1550,5,90,0,0,1550,1552,5,28,0,0,1551,1553,3,88,44,0,1552,
        1551,1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1556,5,3,0,
        0,1555,1557,3,88,44,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,
        1,0,0,0,1558,1559,5,29,0,0,1559,1571,5,112,0,0,1560,1561,5,111,0,
        0,1561,1563,5,75,0,0,1562,1564,3,88,44,0,1563,1562,1,0,0,0,1563,
        1564,1,0,0,0,1564,1565,1,0,0,0,1565,1567,5,3,0,0,1566,1568,3,88,
        44,0,1567,1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,
        1571,5,112,0,0,1570,1548,1,0,0,0,1570,1560,1,0,0,0,1571,63,1,0,0,
        0,1572,1573,5,111,0,0,1573,1574,5,76,0,0,1574,1575,3,88,44,0,1575,
        1576,5,77,0,0,1576,1577,3,88,44,0,1577,1578,5,77,0,0,1578,1579,3,
        88,44,0,1579,1580,5,112,0,0,1580,1591,1,0,0,0,1581,1582,5,111,0,
        0,1582,1583,5,78,0,0,1583,1584,3,88,44,0,1584,1585,5,77,0,0,1585,
        1586,3,88,44,0,1586,1587,5,77,0,0,1587,1588,3,88,44,0,1588,1589,
        5,112,0,0,1589,1591,1,0,0,0,1590,1572,1,0,0,0,1590,1581,1,0,0,0,
        1591,65,1,0,0,0,1592,1593,5,111,0,0,1593,1594,5,79,0,0,1594,1597,
        3,88,44,0,1595,1596,5,113,0,0,1596,1598,3,88,44,0,1597,1595,1,0,
        0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1600,5,112,0,0,1600,
        67,1,0,0,0,1601,1602,5,111,0,0,1602,1603,5,113,0,0,1603,1606,3,88,
        44,0,1604,1605,5,113,0,0,1605,1607,3,88,44,0,1606,1604,1,0,0,0,1606,
        1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,5,112,0,0,1609,69,1,0,0,
        0,1610,1611,5,76,0,0,1611,1614,3,88,44,0,1612,1613,5,113,0,0,1613,
        1615,3,88,44,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,71,1,0,0,
        0,1616,1617,5,111,0,0,1617,1618,5,16,0,0,1618,1619,5,7,0,0,1619,
        1620,5,8,0,0,1620,1621,5,112,0,0,1621,73,1,0,0,0,1622,1623,5,111,
        0,0,1623,1624,5,14,0,0,1624,1625,5,112,0,0,1625,75,1,0,0,0,1626,
        1627,5,111,0,0,1627,1628,5,12,0,0,1628,1629,5,80,0,0,1629,1630,5,
        112,0,0,1630,77,1,0,0,0,1631,1632,5,111,0,0,1632,1633,5,12,0,0,1633,
        1634,5,110,0,0,1634,1635,5,112,0,0,1635,79,1,0,0,0,1636,1638,5,77,
        0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1644,
        3,82,41,0,1640,1641,5,77,0,0,1641,1643,3,82,41,0,1642,1640,1,0,0,
        0,1643,1646,1,0,0,0,1644,1642,1,0,0,0,1644,1645,1,0,0,0,1645,81,
        1,0,0,0,1646,1644,1,0,0,0,1647,1650,3,84,42,0,1648,1650,3,86,43,
        0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,83,1,0,0,0,1651,1653,
        5,81,0,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,1655,1,0,0,0,1654,
        1656,5,82,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,
        0,0,1657,1659,5,85,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,
        1661,1,0,0,0,1660,1662,5,83,0,0,1661,1660,1,0,0,0,1661,1662,1,0,
        0,0,1662,1664,1,0,0,0,1663,1665,5,86,0,0,1664,1663,1,0,0,0,1664,
        1665,1,0,0,0,1665,1667,1,0,0,0,1666,1668,5,84,0,0,1667,1666,1,0,
        0,0,1667,1668,1,0,0,0,1668,1670,1,0,0,0,1669,1671,5,87,0,0,1670,
        1669,1,0,0,0,1670,1671,1,0,0,0,1671,1673,1,0,0,0,1672,1674,5,88,
        0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1676,1,0,0,0,1675,1677,
        5,89,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,
        1680,5,90,0,0,1679,1681,5,91,0,0,1680,1679,1,0,0,0,1680,1681,1,0,
        0,0,1681,1683,1,0,0,0,1682,1684,5,92,0,0,1683,1682,1,0,0,0,1683,
        1684,1,0,0,0,1684,1686,1,0,0,0,1685,1687,5,93,0,0,1686,1685,1,0,
        0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,1690,5,87,0,0,1689,
        1688,1,0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,1693,5,83,
        0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1695,1,0,0,0,1694,1696,
        5,96,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,
        1699,5,94,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,
        0,0,1700,1702,5,97,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,
        1704,1,0,0,0,1703,1705,5,82,0,0,1704,1703,1,0,0,0,1704,1705,1,0,
        0,0,1705,1707,1,0,0,0,1706,1708,5,81,0,0,1707,1706,1,0,0,0,1707,
        1708,1,0,0,0,1708,1710,1,0,0,0,1709,1711,5,95,0,0,1710,1709,1,0,
        0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,1712,1714,5,98,0,0,1713,
        1712,1,0,0,0,1713,1714,1,0,0,0,1714,2454,1,0,0,0,1715,1717,5,81,
        0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1719,1,0,0,0,1718,1720,
        5,82,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1722,1,0,0,0,1721,
        1723,5,85,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,1725,1,0,
        0,0,1724,1726,5,83,0,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,
        1728,1,0,0,0,1727,1729,5,86,0,0,1728,1727,1,0,0,0,1728,1729,1,0,
        0,0,1729,1731,1,0,0,0,1730,1732,5,84,0,0,1731,1730,1,0,0,0,1731,
        1732,1,0,0,0,1732,1734,1,0,0,0,1733,1735,5,87,0,0,1734,1733,1,0,
        0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1738,5,88,0,0,1737,
        1739,5,89,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,
        0,0,1740,1742,5,91,0,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,
        1744,1,0,0,0,1743,1745,5,92,0,0,1744,1743,1,0,0,0,1744,1745,1,0,
        0,0,1745,1747,1,0,0,0,1746,1748,5,93,0,0,1747,1746,1,0,0,0,1747,
        1748,1,0,0,0,1748,1750,1,0,0,0,1749,1751,5,87,0,0,1750,1749,1,0,
        0,0,1750,1751,1,0,0,0,1751,1753,1,0,0,0,1752,1754,5,83,0,0,1753,
        1752,1,0,0,0,1753,1754,1,0,0,0,1754,1756,1,0,0,0,1755,1757,5,96,
        0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,1758,1760,
        5,94,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1762,1,0,0,0,1761,
        1763,5,97,0,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1765,1,0,
        0,0,1764,1766,5,82,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,
        1768,1,0,0,0,1767,1769,5,81,0,0,1768,1767,1,0,0,0,1768,1769,1,0,
        0,0,1769,1771,1,0,0,0,1770,1772,5,95,0,0,1771,1770,1,0,0,0,1771,
        1772,1,0,0,0,1772,1774,1,0,0,0,1773,1775,5,98,0,0,1774,1773,1,0,
        0,0,1774,1775,1,0,0,0,1775,2454,1,0,0,0,1776,1778,5,81,0,0,1777,
        1776,1,0,0,0,1777,1778,1,0,0,0,1778,1780,1,0,0,0,1779,1781,5,82,
        0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,1782,1784,
        5,85,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,0,0,1785,
        1787,5,83,0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1789,1,0,
        0,0,1788,1790,5,86,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,
        1792,1,0,0,0,1791,1793,5,84,0,0,1792,1791,1,0,0,0,1792,1793,1,0,
        0,0,1793,1795,1,0,0,0,1794,1796,5,87,0,0,1795,1794,1,0,0,0,1795,
        1796,1,0,0,0,1796,1798,1,0,0,0,1797,1799,5,88,0,0,1798,1797,1,0,
        0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1802,5,89,0,0,1801,
        1803,5,91,0,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,1805,1,0,
        0,0,1804,1806,5,92,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,
        1808,1,0,0,0,1807,1809,5,93,0,0,1808,1807,1,0,0,0,1808,1809,1,0,
        0,0,1809,1811,1,0,0,0,1810,1812,5,87,0,0,1811,1810,1,0,0,0,1811,
        1812,1,0,0,0,1812,1814,1,0,0,0,1813,1815,5,83,0,0,1814,1813,1,0,
        0,0,1814,1815,1,0,0,0,1815,1817,1,0,0,0,1816,1818,5,96,0,0,1817,
        1816,1,0,0,0,1817,1818,1,0,0,0,1818,1820,1,0,0,0,1819,1821,5,94,
        0,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,1824,
        5,97,0,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,
        1827,5,82,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1829,1,0,
        0,0,1828,1830,5,81,0,0,1829,1828,1,0,0,0,1829,1830,1,0,0,0,1830,
        1832,1,0,0,0,1831,1833,5,95,0,0,1832,1831,1,0,0,0,1832,1833,1,0,
        0,0,1833,1835,1,0,0,0,1834,1836,5,98,0,0,1835,1834,1,0,0,0,1835,
        1836,1,0,0,0,1836,2454,1,0,0,0,1837,1839,5,81,0,0,1838,1837,1,0,
        0,0,1838,1839,1,0,0,0,1839,1841,1,0,0,0,1840,1842,5,82,0,0,1841,
        1840,1,0,0,0,1841,1842,1,0,0,0,1842,1844,1,0,0,0,1843,1845,5,85,
        0,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1847,1,0,0,0,1846,1848,
        5,83,0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1850,1,0,0,0,1849,
        1851,5,86,0,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1853,1,0,
        0,0,1852,1854,5,84,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,
        1856,1,0,0,0,1855,1857,5,87,0,0,1856,1855,1,0,0,0,1856,1857,1,0,
        0,0,1857,1859,1,0,0,0,1858,1860,5,88,0,0,1859,1858,1,0,0,0,1859,
        1860,1,0,0,0,1860,1862,1,0,0,0,1861,1863,5,89,0,0,1862,1861,1,0,
        0,0,1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1866,5,91,0,0,1865,
        1867,5,92,0,0,1866,1865,1,0,0,0,1866,1867,1,0,0,0,1867,1869,1,0,
        0,0,1868,1870,5,93,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,
        1872,1,0,0,0,1871,1873,5,87,0,0,1872,1871,1,0,0,0,1872,1873,1,0,
        0,0,1873,1875,1,0,0,0,1874,1876,5,83,0,0,1875,1874,1,0,0,0,1875,
        1876,1,0,0,0,1876,1878,1,0,0,0,1877,1879,5,96,0,0,1878,1877,1,0,
        0,0,1878,1879,1,0,0,0,1879,1881,1,0,0,0,1880,1882,5,94,0,0,1881,
        1880,1,0,0,0,1881,1882,1,0,0,0,1882,1884,1,0,0,0,1883,1885,5,97,
        0,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1888,
        5,82,0,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,
        1891,5,81,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,
        0,0,1892,1894,5,95,0,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,
        1896,1,0,0,0,1895,1897,5,98,0,0,1896,1895,1,0,0,0,1896,1897,1,0,
        0,0,1897,2454,1,0,0,0,1898,1900,5,81,0,0,1899,1898,1,0,0,0,1899,
        1900,1,0,0,0,1900,1902,1,0,0,0,1901,1903,5,82,0,0,1902,1901,1,0,
        0,0,1902,1903,1,0,0,0,1903,1905,1,0,0,0,1904,1906,5,85,0,0,1905,
        1904,1,0,0,0,1905,1906,1,0,0,0,1906,1908,1,0,0,0,1907,1909,5,83,
        0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1911,1,0,0,0,1910,1912,
        5,86,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,
        1915,5,84,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1917,1,0,
        0,0,1916,1918,5,87,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,
        1920,1,0,0,0,1919,1921,5,88,0,0,1920,1919,1,0,0,0,1920,1921,1,0,
        0,0,1921,1923,1,0,0,0,1922,1924,5,89,0,0,1923,1922,1,0,0,0,1923,
        1924,1,0,0,0,1924,1926,1,0,0,0,1925,1927,5,91,0,0,1926,1925,1,0,
        0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1930,5,92,0,0,1929,
        1931,5,93,0,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1933,1,0,
        0,0,1932,1934,5,87,0,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,
        1936,1,0,0,0,1935,1937,5,83,0,0,1936,1935,1,0,0,0,1936,1937,1,0,
        0,0,1937,1939,1,0,0,0,1938,1940,5,96,0,0,1939,1938,1,0,0,0,1939,
        1940,1,0,0,0,1940,1942,1,0,0,0,1941,1943,5,94,0,0,1942,1941,1,0,
        0,0,1942,1943,1,0,0,0,1943,1945,1,0,0,0,1944,1946,5,97,0,0,1945,
        1944,1,0,0,0,1945,1946,1,0,0,0,1946,1948,1,0,0,0,1947,1949,5,82,
        0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1952,
        5,81,0,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,
        1955,5,95,0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1957,1,0,
        0,0,1956,1958,5,98,0,0,1957,1956,1,0,0,0,1957,1958,1,0,0,0,1958,
        2454,1,0,0,0,1959,1961,5,81,0,0,1960,1959,1,0,0,0,1960,1961,1,0,
        0,0,1961,1963,1,0,0,0,1962,1964,5,82,0,0,1963,1962,1,0,0,0,1963,
        1964,1,0,0,0,1964,1966,1,0,0,0,1965,1967,5,85,0,0,1966,1965,1,0,
        0,0,1966,1967,1,0,0,0,1967,1969,1,0,0,0,1968,1970,5,83,0,0,1969,
        1968,1,0,0,0,1969,1970,1,0,0,0,1970,1972,1,0,0,0,1971,1973,5,86,
        0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1975,1,0,0,0,1974,1976,
        5,84,0,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,
        1979,5,87,0,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,2454,1,0,
        0,0,1980,1982,5,81,0,0,1981,1983,5,82,0,0,1982,1981,1,0,0,0,1982,
        1983,1,0,0,0,1983,1985,1,0,0,0,1984,1986,5,85,0,0,1985,1984,1,0,
        0,0,1985,1986,1,0,0,0,1986,1988,1,0,0,0,1987,1989,5,83,0,0,1988,
        1987,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,0,0,1990,1992,5,86,
        0,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,1994,1,0,0,0,1993,1995,
        5,84,0,0,1994,1993,1,0,0,0,1994,1995,1,0,0,0,1995,1997,1,0,0,0,1996,
        1998,5,87,0,0,1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,
        0,0,1999,2001,5,110,0,0,2000,2002,5,93,0,0,2001,2000,1,0,0,0,2001,
        2002,1,0,0,0,2002,2004,1,0,0,0,2003,2005,5,87,0,0,2004,2003,1,0,
        0,0,2004,2005,1,0,0,0,2005,2007,1,0,0,0,2006,2008,5,83,0,0,2007,
        2006,1,0,0,0,2007,2008,1,0,0,0,2008,2010,1,0,0,0,2009,2011,5,96,
        0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2013,1,0,0,0,2012,2014,
        5,94,0,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2016,1,0,0,0,2015,
        2017,5,97,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2019,1,0,
        0,0,2018,2020,5,82,0,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,
        2022,1,0,0,0,2021,2023,5,81,0,0,2022,2021,1,0,0,0,2022,2023,1,0,
        0,0,2023,2025,1,0,0,0,2024,2026,5,95,0,0,2025,2024,1,0,0,0,2025,
        2026,1,0,0,0,2026,2028,1,0,0,0,2027,2029,5,98,0,0,2028,2027,1,0,
        0,0,2028,2029,1,0,0,0,2029,2454,1,0,0,0,2030,2032,5,82,0,0,2031,
        2033,5,85,0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2035,1,0,
        0,0,2034,2036,5,83,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,
        2038,1,0,0,0,2037,2039,5,86,0,0,2038,2037,1,0,0,0,2038,2039,1,0,
        0,0,2039,2041,1,0,0,0,2040,2042,5,84,0,0,2041,2040,1,0,0,0,2041,
        2042,1,0,0,0,2042,2044,1,0,0,0,2043,2045,5,87,0,0,2044,2043,1,0,
        0,0,2044,2045,1,0,0,0,2045,2046,1,0,0,0,2046,2048,5,110,0,0,2047,
        2049,5,93,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2051,1,0,
        0,0,2050,2052,5,87,0,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,
        2054,1,0,0,0,2053,2055,5,83,0,0,2054,2053,1,0,0,0,2054,2055,1,0,
        0,0,2055,2057,1,0,0,0,2056,2058,5,96,0,0,2057,2056,1,0,0,0,2057,
        2058,1,0,0,0,2058,2060,1,0,0,0,2059,2061,5,94,0,0,2060,2059,1,0,
        0,0,2060,2061,1,0,0,0,2061,2063,1,0,0,0,2062,2064,5,97,0,0,2063,
        2062,1,0,0,0,2063,2064,1,0,0,0,2064,2066,1,0,0,0,2065,2067,5,82,
        0,0,2066,2065,1,0,0,0,2066,2067,1,0,0,0,2067,2069,1,0,0,0,2068,2070,
        5,81,0,0,2069,2068,1,0,0,0,2069,2070,1,0,0,0,2070,2072,1,0,0,0,2071,
        2073,5,95,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2075,1,0,
        0,0,2074,2076,5,98,0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,
        2454,1,0,0,0,2077,2079,5,85,0,0,2078,2080,5,83,0,0,2079,2078,1,0,
        0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,2083,5,86,0,0,2082,
        2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,2084,2086,5,84,
        0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2088,1,0,0,0,2087,2089,
        5,87,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,
        2092,5,110,0,0,2091,2093,5,93,0,0,2092,2091,1,0,0,0,2092,2093,1,
        0,0,0,2093,2095,1,0,0,0,2094,2096,5,87,0,0,2095,2094,1,0,0,0,2095,
        2096,1,0,0,0,2096,2098,1,0,0,0,2097,2099,5,83,0,0,2098,2097,1,0,
        0,0,2098,2099,1,0,0,0,2099,2101,1,0,0,0,2100,2102,5,96,0,0,2101,
        2100,1,0,0,0,2101,2102,1,0,0,0,2102,2104,1,0,0,0,2103,2105,5,94,
        0,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2107,1,0,0,0,2106,2108,
        5,97,0,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,2110,1,0,0,0,2109,
        2111,5,82,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2113,1,0,
        0,0,2112,2114,5,81,0,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,
        2116,1,0,0,0,2115,2117,5,95,0,0,2116,2115,1,0,0,0,2116,2117,1,0,
        0,0,2117,2119,1,0,0,0,2118,2120,5,98,0,0,2119,2118,1,0,0,0,2119,
        2120,1,0,0,0,2120,2454,1,0,0,0,2121,2123,5,83,0,0,2122,2124,5,86,
        0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2126,1,0,0,0,2125,2127,
        5,84,0,0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,2129,1,0,0,0,2128,
        2130,5,87,0,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,
        0,0,2131,2133,5,110,0,0,2132,2134,5,93,0,0,2133,2132,1,0,0,0,2133,
        2134,1,0,0,0,2134,2136,1,0,0,0,2135,2137,5,87,0,0,2136,2135,1,0,
        0,0,2136,2137,1,0,0,0,2137,2139,1,0,0,0,2138,2140,5,83,0,0,2139,
        2138,1,0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,2143,5,96,
        0,0,2142,2141,1,0,0,0,2142,2143,1,0,0,0,2143,2145,1,0,0,0,2144,2146,
        5,94,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2148,1,0,0,0,2147,
        2149,5,97,0,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,
        0,0,2150,2152,5,82,0,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,
        2154,1,0,0,0,2153,2155,5,81,0,0,2154,2153,1,0,0,0,2154,2155,1,0,
        0,0,2155,2157,1,0,0,0,2156,2158,5,95,0,0,2157,2156,1,0,0,0,2157,
        2158,1,0,0,0,2158,2160,1,0,0,0,2159,2161,5,98,0,0,2160,2159,1,0,
        0,0,2160,2161,1,0,0,0,2161,2454,1,0,0,0,2162,2164,5,86,0,0,2163,
        2165,5,84,0,0,2164,2163,1,0,0,0,2164,2165,1,0,0,0,2165,2167,1,0,
        0,0,2166,2168,5,87,0,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,
        2169,1,0,0,0,2169,2171,5,110,0,0,2170,2172,5,93,0,0,2171,2170,1,
        0,0,0,2171,2172,1,0,0,0,2172,2174,1,0,0,0,2173,2175,5,87,0,0,2174,
        2173,1,0,0,0,2174,2175,1,0,0,0,2175,2177,1,0,0,0,2176,2178,5,83,
        0,0,2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2180,1,0,0,0,2179,2181,
        5,96,0,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,2183,1,0,0,0,2182,
        2184,5,94,0,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2186,1,0,
        0,0,2185,2187,5,97,0,0,2186,2185,1,0,0,0,2186,2187,1,0,0,0,2187,
        2189,1,0,0,0,2188,2190,5,82,0,0,2189,2188,1,0,0,0,2189,2190,1,0,
        0,0,2190,2192,1,0,0,0,2191,2193,5,81,0,0,2192,2191,1,0,0,0,2192,
        2193,1,0,0,0,2193,2195,1,0,0,0,2194,2196,5,95,0,0,2195,2194,1,0,
        0,0,2195,2196,1,0,0,0,2196,2198,1,0,0,0,2197,2199,5,98,0,0,2198,
        2197,1,0,0,0,2198,2199,1,0,0,0,2199,2454,1,0,0,0,2200,2202,5,84,
        0,0,2201,2203,5,87,0,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,
        2204,1,0,0,0,2204,2206,5,110,0,0,2205,2207,5,93,0,0,2206,2205,1,
        0,0,0,2206,2207,1,0,0,0,2207,2209,1,0,0,0,2208,2210,5,87,0,0,2209,
        2208,1,0,0,0,2209,2210,1,0,0,0,2210,2212,1,0,0,0,2211,2213,5,83,
        0,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2215,1,0,0,0,2214,2216,
        5,96,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,
        2219,5,94,0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2221,1,0,
        0,0,2220,2222,5,97,0,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,
        2224,1,0,0,0,2223,2225,5,82,0,0,2224,2223,1,0,0,0,2224,2225,1,0,
        0,0,2225,2227,1,0,0,0,2226,2228,5,81,0,0,2227,2226,1,0,0,0,2227,
        2228,1,0,0,0,2228,2230,1,0,0,0,2229,2231,5,95,0,0,2230,2229,1,0,
        0,0,2230,2231,1,0,0,0,2231,2233,1,0,0,0,2232,2234,5,98,0,0,2233,
        2232,1,0,0,0,2233,2234,1,0,0,0,2234,2454,1,0,0,0,2235,2236,5,87,
        0,0,2236,2238,5,110,0,0,2237,2239,5,93,0,0,2238,2237,1,0,0,0,2238,
        2239,1,0,0,0,2239,2241,1,0,0,0,2240,2242,5,87,0,0,2241,2240,1,0,
        0,0,2241,2242,1,0,0,0,2242,2244,1,0,0,0,2243,2245,5,83,0,0,2244,
        2243,1,0,0,0,2244,2245,1,0,0,0,2245,2247,1,0,0,0,2246,2248,5,96,
        0,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,2250,1,0,0,0,2249,2251,
        5,94,0,0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,0,2252,
        2254,5,97,0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2256,1,0,
        0,0,2255,2257,5,82,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,
        2259,1,0,0,0,2258,2260,5,81,0,0,2259,2258,1,0,0,0,2259,2260,1,0,
        0,0,2260,2262,1,0,0,0,2261,2263,5,95,0,0,2262,2261,1,0,0,0,2262,
        2263,1,0,0,0,2263,2265,1,0,0,0,2264,2266,5,98,0,0,2265,2264,1,0,
        0,0,2265,2266,1,0,0,0,2266,2454,1,0,0,0,2267,2269,5,110,0,0,2268,
        2270,5,93,0,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2272,1,0,
        0,0,2271,2273,5,87,0,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,
        2275,1,0,0,0,2274,2276,5,83,0,0,2275,2274,1,0,0,0,2275,2276,1,0,
        0,0,2276,2278,1,0,0,0,2277,2279,5,96,0,0,2278,2277,1,0,0,0,2278,
        2279,1,0,0,0,2279,2281,1,0,0,0,2280,2282,5,94,0,0,2281,2280,1,0,
        0,0,2281,2282,1,0,0,0,2282,2284,1,0,0,0,2283,2285,5,97,0,0,2284,
        2283,1,0,0,0,2284,2285,1,0,0,0,2285,2287,1,0,0,0,2286,2288,5,82,
        0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2290,1,0,0,0,2289,2291,
        5,81,0,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2293,1,0,0,0,2292,
        2294,5,95,0,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2296,1,0,
        0,0,2295,2297,5,98,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,
        2454,1,0,0,0,2298,2299,5,110,0,0,2299,2301,5,93,0,0,2300,2302,5,
        87,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2304,1,0,0,0,2303,
        2305,5,83,0,0,2304,2303,1,0,0,0,2304,2305,1,0,0,0,2305,2307,1,0,
        0,0,2306,2308,5,96,0,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,
        2310,1,0,0,0,2309,2311,5,94,0,0,2310,2309,1,0,0,0,2310,2311,1,0,
        0,0,2311,2313,1,0,0,0,2312,2314,5,97,0,0,2313,2312,1,0,0,0,2313,
        2314,1,0,0,0,2314,2316,1,0,0,0,2315,2317,5,82,0,0,2316,2315,1,0,
        0,0,2316,2317,1,0,0,0,2317,2319,1,0,0,0,2318,2320,5,81,0,0,2319,
        2318,1,0,0,0,2319,2320,1,0,0,0,2320,2322,1,0,0,0,2321,2323,5,95,
        0,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2325,1,0,0,0,2324,2326,
        5,98,0,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2454,1,0,0,0,2327,
        2328,5,110,0,0,2328,2330,5,87,0,0,2329,2331,5,83,0,0,2330,2329,1,
        0,0,0,2330,2331,1,0,0,0,2331,2333,1,0,0,0,2332,2334,5,96,0,0,2333,
        2332,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,2337,5,94,
        0,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,2340,
        5,97,0,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,2342,1,0,0,0,2341,
        2343,5,82,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,2345,1,0,
        0,0,2344,2346,5,81,0,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,
        2348,1,0,0,0,2347,2349,5,95,0,0,2348,2347,1,0,0,0,2348,2349,1,0,
        0,0,2349,2351,1,0,0,0,2350,2352,5,98,0,0,2351,2350,1,0,0,0,2351,
        2352,1,0,0,0,2352,2454,1,0,0,0,2353,2354,5,110,0,0,2354,2356,5,83,
        0,0,2355,2357,5,96,0,0,2356,2355,1,0,0,0,2356,2357,1,0,0,0,2357,
        2359,1,0,0,0,2358,2360,5,94,0,0,2359,2358,1,0,0,0,2359,2360,1,0,
        0,0,2360,2362,1,0,0,0,2361,2363,5,97,0,0,2362,2361,1,0,0,0,2362,
        2363,1,0,0,0,2363,2365,1,0,0,0,2364,2366,5,82,0,0,2365,2364,1,0,
        0,0,2365,2366,1,0,0,0,2366,2368,1,0,0,0,2367,2369,5,81,0,0,2368,
        2367,1,0,0,0,2368,2369,1,0,0,0,2369,2371,1,0,0,0,2370,2372,5,95,
        0,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,2374,1,0,0,0,2373,2375,
        5,98,0,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2454,1,0,0,0,2376,
        2377,5,110,0,0,2377,2379,5,96,0,0,2378,2380,5,94,0,0,2379,2378,1,
        0,0,0,2379,2380,1,0,0,0,2380,2382,1,0,0,0,2381,2383,5,97,0,0,2382,
        2381,1,0,0,0,2382,2383,1,0,0,0,2383,2385,1,0,0,0,2384,2386,5,82,
        0,0,2385,2384,1,0,0,0,2385,2386,1,0,0,0,2386,2388,1,0,0,0,2387,2389,
        5,81,0,0,2388,2387,1,0,0,0,2388,2389,1,0,0,0,2389,2391,1,0,0,0,2390,
        2392,5,95,0,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,2394,1,0,
        0,0,2393,2395,5,98,0,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,
        2454,1,0,0,0,2396,2397,5,110,0,0,2397,2399,5,94,0,0,2398,2400,5,
        97,0,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2402,1,0,0,0,2401,
        2403,5,82,0,0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,2405,1,0,
        0,0,2404,2406,5,81,0,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,
        2408,1,0,0,0,2407,2409,5,95,0,0,2408,2407,1,0,0,0,2408,2409,1,0,
        0,0,2409,2411,1,0,0,0,2410,2412,5,98,0,0,2411,2410,1,0,0,0,2411,
        2412,1,0,0,0,2412,2454,1,0,0,0,2413,2414,5,110,0,0,2414,2416,5,97,
        0,0,2415,2417,5,82,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,
        2419,1,0,0,0,2418,2420,5,81,0,0,2419,2418,1,0,0,0,2419,2420,1,0,
        0,0,2420,2422,1,0,0,0,2421,2423,5,95,0,0,2422,2421,1,0,0,0,2422,
        2423,1,0,0,0,2423,2425,1,0,0,0,2424,2426,5,98,0,0,2425,2424,1,0,
        0,0,2425,2426,1,0,0,0,2426,2454,1,0,0,0,2427,2428,5,110,0,0,2428,
        2430,5,82,0,0,2429,2431,5,81,0,0,2430,2429,1,0,0,0,2430,2431,1,0,
        0,0,2431,2433,1,0,0,0,2432,2434,5,95,0,0,2433,2432,1,0,0,0,2433,
        2434,1,0,0,0,2434,2436,1,0,0,0,2435,2437,5,98,0,0,2436,2435,1,0,
        0,0,2436,2437,1,0,0,0,2437,2454,1,0,0,0,2438,2439,5,110,0,0,2439,
        2441,5,81,0,0,2440,2442,5,95,0,0,2441,2440,1,0,0,0,2441,2442,1,0,
        0,0,2442,2444,1,0,0,0,2443,2445,5,98,0,0,2444,2443,1,0,0,0,2444,
        2445,1,0,0,0,2445,2454,1,0,0,0,2446,2447,5,110,0,0,2447,2449,5,95,
        0,0,2448,2450,5,98,0,0,2449,2448,1,0,0,0,2449,2450,1,0,0,0,2450,
        2454,1,0,0,0,2451,2452,5,110,0,0,2452,2454,5,98,0,0,2453,1652,1,
        0,0,0,2453,1716,1,0,0,0,2453,1777,1,0,0,0,2453,1838,1,0,0,0,2453,
        1899,1,0,0,0,2453,1960,1,0,0,0,2453,1980,1,0,0,0,2453,2030,1,0,0,
        0,2453,2077,1,0,0,0,2453,2121,1,0,0,0,2453,2162,1,0,0,0,2453,2200,
        1,0,0,0,2453,2235,1,0,0,0,2453,2267,1,0,0,0,2453,2298,1,0,0,0,2453,
        2327,1,0,0,0,2453,2353,1,0,0,0,2453,2376,1,0,0,0,2453,2396,1,0,0,
        0,2453,2413,1,0,0,0,2453,2427,1,0,0,0,2453,2438,1,0,0,0,2453,2446,
        1,0,0,0,2453,2451,1,0,0,0,2454,85,1,0,0,0,2455,2457,5,100,0,0,2456,
        2455,1,0,0,0,2456,2457,1,0,0,0,2457,2459,1,0,0,0,2458,2460,5,101,
        0,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2462,1,0,0,0,2461,2463,
        5,85,0,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2465,1,0,0,0,2464,
        2466,5,102,0,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2468,1,0,
        0,0,2467,2469,5,86,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,
        2471,1,0,0,0,2470,2472,5,103,0,0,2471,2470,1,0,0,0,2471,2472,1,0,
        0,0,2472,2474,1,0,0,0,2473,2475,5,87,0,0,2474,2473,1,0,0,0,2474,
        2475,1,0,0,0,2475,2477,1,0,0,0,2476,2478,5,104,0,0,2477,2476,1,0,
        0,0,2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2481,5,99,0,0,2480,
        2479,1,0,0,0,2480,2481,1,0,0,0,2481,2482,1,0,0,0,2482,2484,5,90,
        0,0,2483,2485,5,91,0,0,2484,2483,1,0,0,0,2484,2485,1,0,0,0,2485,
        2487,1,0,0,0,2486,2488,5,92,0,0,2487,2486,1,0,0,0,2487,2488,1,0,
        0,0,2488,2490,1,0,0,0,2489,2491,5,105,0,0,2490,2489,1,0,0,0,2490,
        2491,1,0,0,0,2491,2493,1,0,0,0,2492,2494,5,87,0,0,2493,2492,1,0,
        0,0,2493,2494,1,0,0,0,2494,2496,1,0,0,0,2495,2497,5,106,0,0,2496,
        2495,1,0,0,0,2496,2497,1,0,0,0,2497,2499,1,0,0,0,2498,2500,5,96,
        0,0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,2500,2502,1,0,0,0,2501,2503,
        5,107,0,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2505,1,0,0,0,
        2504,2506,5,97,0,0,2505,2504,1,0,0,0,2505,2506,1,0,0,0,2506,2508,
        1,0,0,0,2507,2509,5,108,0,0,2508,2507,1,0,0,0,2508,2509,1,0,0,0,
        2509,2511,1,0,0,0,2510,2512,5,81,0,0,2511,2510,1,0,0,0,2511,2512,
        1,0,0,0,2512,2514,1,0,0,0,2513,2515,5,95,0,0,2514,2513,1,0,0,0,2514,
        2515,1,0,0,0,2515,2517,1,0,0,0,2516,2518,5,98,0,0,2517,2516,1,0,
        0,0,2517,2518,1,0,0,0,2518,3294,1,0,0,0,2519,2521,5,100,0,0,2520,
        2519,1,0,0,0,2520,2521,1,0,0,0,2521,2523,1,0,0,0,2522,2524,5,101,
        0,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,2524,2526,1,0,0,0,2525,2527,
        5,85,0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2529,1,0,0,0,2528,
        2530,5,102,0,0,2529,2528,1,0,0,0,2529,2530,1,0,0,0,2530,2532,1,0,
        0,0,2531,2533,5,86,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,
        2535,1,0,0,0,2534,2536,5,103,0,0,2535,2534,1,0,0,0,2535,2536,1,0,
        0,0,2536,2538,1,0,0,0,2537,2539,5,87,0,0,2538,2537,1,0,0,0,2538,
        2539,1,0,0,0,2539,2540,1,0,0,0,2540,2542,5,104,0,0,2541,2543,5,99,
        0,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,2545,1,0,0,0,2544,2546,
        5,91,0,0,2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,0,2547,
        2549,5,92,0,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,2551,1,0,
        0,0,2550,2552,5,105,0,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,
        2554,1,0,0,0,2553,2555,5,87,0,0,2554,2553,1,0,0,0,2554,2555,1,0,
        0,0,2555,2557,1,0,0,0,2556,2558,5,106,0,0,2557,2556,1,0,0,0,2557,
        2558,1,0,0,0,2558,2560,1,0,0,0,2559,2561,5,96,0,0,2560,2559,1,0,
        0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,2564,5,107,0,0,2563,
        2562,1,0,0,0,2563,2564,1,0,0,0,2564,2566,1,0,0,0,2565,2567,5,97,
        0,0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,2569,1,0,0,0,2568,2570,
        5,108,0,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2572,1,0,0,0,
        2571,2573,5,81,0,0,2572,2571,1,0,0,0,2572,2573,1,0,0,0,2573,2575,
        1,0,0,0,2574,2576,5,95,0,0,2575,2574,1,0,0,0,2575,2576,1,0,0,0,2576,
        2578,1,0,0,0,2577,2579,5,98,0,0,2578,2577,1,0,0,0,2578,2579,1,0,
        0,0,2579,3294,1,0,0,0,2580,2582,5,100,0,0,2581,2580,1,0,0,0,2581,
        2582,1,0,0,0,2582,2584,1,0,0,0,2583,2585,5,101,0,0,2584,2583,1,0,
        0,0,2584,2585,1,0,0,0,2585,2587,1,0,0,0,2586,2588,5,85,0,0,2587,
        2586,1,0,0,0,2587,2588,1,0,0,0,2588,2590,1,0,0,0,2589,2591,5,102,
        0,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,2594,
        5,86,0,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2596,1,0,0,0,2595,
        2597,5,103,0,0,2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,2599,1,0,
        0,0,2598,2600,5,87,0,0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,2600,
        2602,1,0,0,0,2601,2603,5,104,0,0,2602,2601,1,0,0,0,2602,2603,1,0,
        0,0,2603,2604,1,0,0,0,2604,2606,5,99,0,0,2605,2607,5,91,0,0,2606,
        2605,1,0,0,0,2606,2607,1,0,0,0,2607,2609,1,0,0,0,2608,2610,5,92,
        0,0,2609,2608,1,0,0,0,2609,2610,1,0,0,0,2610,2612,1,0,0,0,2611,2613,
        5,105,0,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,2615,1,0,0,0,
        2614,2616,5,87,0,0,2615,2614,1,0,0,0,2615,2616,1,0,0,0,2616,2618,
        1,0,0,0,2617,2619,5,106,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,
        2619,2621,1,0,0,0,2620,2622,5,96,0,0,2621,2620,1,0,0,0,2621,2622,
        1,0,0,0,2622,2624,1,0,0,0,2623,2625,5,107,0,0,2624,2623,1,0,0,0,
        2624,2625,1,0,0,0,2625,2627,1,0,0,0,2626,2628,5,97,0,0,2627,2626,
        1,0,0,0,2627,2628,1,0,0,0,2628,2630,1,0,0,0,2629,2631,5,108,0,0,
        2630,2629,1,0,0,0,2630,2631,1,0,0,0,2631,2633,1,0,0,0,2632,2634,
        5,81,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2636,1,0,0,0,2635,
        2637,5,95,0,0,2636,2635,1,0,0,0,2636,2637,1,0,0,0,2637,2639,1,0,
        0,0,2638,2640,5,98,0,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,
        3294,1,0,0,0,2641,2643,5,100,0,0,2642,2641,1,0,0,0,2642,2643,1,0,
        0,0,2643,2645,1,0,0,0,2644,2646,5,101,0,0,2645,2644,1,0,0,0,2645,
        2646,1,0,0,0,2646,2648,1,0,0,0,2647,2649,5,85,0,0,2648,2647,1,0,
        0,0,2648,2649,1,0,0,0,2649,2651,1,0,0,0,2650,2652,5,102,0,0,2651,
        2650,1,0,0,0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,2655,5,86,
        0,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2658,
        5,103,0,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2660,1,0,0,0,
        2659,2661,5,87,0,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2662,
        1,0,0,0,2662,2664,5,91,0,0,2663,2665,5,92,0,0,2664,2663,1,0,0,0,
        2664,2665,1,0,0,0,2665,2667,1,0,0,0,2666,2668,5,105,0,0,2667,2666,
        1,0,0,0,2667,2668,1,0,0,0,2668,2670,1,0,0,0,2669,2671,5,87,0,0,2670,
        2669,1,0,0,0,2670,2671,1,0,0,0,2671,2673,1,0,0,0,2672,2674,5,106,
        0,0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,2674,2676,1,0,0,0,2675,2677,
        5,96,0,0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,2677,2679,1,0,0,0,2678,
        2680,5,107,0,0,2679,2678,1,0,0,0,2679,2680,1,0,0,0,2680,2682,1,0,
        0,0,2681,2683,5,97,0,0,2682,2681,1,0,0,0,2682,2683,1,0,0,0,2683,
        2685,1,0,0,0,2684,2686,5,108,0,0,2685,2684,1,0,0,0,2685,2686,1,0,
        0,0,2686,2688,1,0,0,0,2687,2689,5,81,0,0,2688,2687,1,0,0,0,2688,
        2689,1,0,0,0,2689,2691,1,0,0,0,2690,2692,5,95,0,0,2691,2690,1,0,
        0,0,2691,2692,1,0,0,0,2692,2694,1,0,0,0,2693,2695,5,98,0,0,2694,
        2693,1,0,0,0,2694,2695,1,0,0,0,2695,3294,1,0,0,0,2696,2698,5,100,
        0,0,2697,2696,1,0,0,0,2697,2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,
        5,101,0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,
        2702,2704,5,85,0,0,2703,2702,1,0,0,0,2703,2704,1,0,0,0,2704,2706,
        1,0,0,0,2705,2707,5,102,0,0,2706,2705,1,0,0,0,2706,2707,1,0,0,0,
        2707,2709,1,0,0,0,2708,2710,5,86,0,0,2709,2708,1,0,0,0,2709,2710,
        1,0,0,0,2710,2712,1,0,0,0,2711,2713,5,103,0,0,2712,2711,1,0,0,0,
        2712,2713,1,0,0,0,2713,2715,1,0,0,0,2714,2716,5,87,0,0,2715,2714,
        1,0,0,0,2715,2716,1,0,0,0,2716,2718,1,0,0,0,2717,2719,5,91,0,0,2718,
        2717,1,0,0,0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2722,5,92,
        0,0,2721,2723,5,105,0,0,2722,2721,1,0,0,0,2722,2723,1,0,0,0,2723,
        2725,1,0,0,0,2724,2726,5,87,0,0,2725,2724,1,0,0,0,2725,2726,1,0,
        0,0,2726,2728,1,0,0,0,2727,2729,5,106,0,0,2728,2727,1,0,0,0,2728,
        2729,1,0,0,0,2729,2731,1,0,0,0,2730,2732,5,96,0,0,2731,2730,1,0,
        0,0,2731,2732,1,0,0,0,2732,2734,1,0,0,0,2733,2735,5,107,0,0,2734,
        2733,1,0,0,0,2734,2735,1,0,0,0,2735,2737,1,0,0,0,2736,2738,5,97,
        0,0,2737,2736,1,0,0,0,2737,2738,1,0,0,0,2738,2740,1,0,0,0,2739,2741,
        5,108,0,0,2740,2739,1,0,0,0,2740,2741,1,0,0,0,2741,2743,1,0,0,0,
        2742,2744,5,81,0,0,2743,2742,1,0,0,0,2743,2744,1,0,0,0,2744,2746,
        1,0,0,0,2745,2747,5,95,0,0,2746,2745,1,0,0,0,2746,2747,1,0,0,0,2747,
        2749,1,0,0,0,2748,2750,5,98,0,0,2749,2748,1,0,0,0,2749,2750,1,0,
        0,0,2750,3294,1,0,0,0,2751,2753,5,100,0,0,2752,2754,5,101,0,0,2753,
        2752,1,0,0,0,2753,2754,1,0,0,0,2754,2756,1,0,0,0,2755,2757,5,85,
        0,0,2756,2755,1,0,0,0,2756,2757,1,0,0,0,2757,2759,1,0,0,0,2758,2760,
        5,102,0,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2762,1,0,0,0,
        2761,2763,5,86,0,0,2762,2761,1,0,0,0,2762,2763,1,0,0,0,2763,2765,
        1,0,0,0,2764,2766,5,103,0,0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,
        2766,2768,1,0,0,0,2767,2769,5,87,0,0,2768,2767,1,0,0,0,2768,2769,
        1,0,0,0,2769,2771,1,0,0,0,2770,2772,5,110,0,0,2771,2770,1,0,0,0,
        2771,2772,1,0,0,0,2772,2774,1,0,0,0,2773,2775,5,105,0,0,2774,2773,
        1,0,0,0,2774,2775,1,0,0,0,2775,2777,1,0,0,0,2776,2778,5,87,0,0,2777,
        2776,1,0,0,0,2777,2778,1,0,0,0,2778,2780,1,0,0,0,2779,2781,5,106,
        0,0,2780,2779,1,0,0,0,2780,2781,1,0,0,0,2781,2783,1,0,0,0,2782,2784,
        5,96,0,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2786,1,0,0,0,2785,
        2787,5,107,0,0,2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,2789,1,0,
        0,0,2788,2790,5,97,0,0,2789,2788,1,0,0,0,2789,2790,1,0,0,0,2790,
        2792,1,0,0,0,2791,2793,5,108,0,0,2792,2791,1,0,0,0,2792,2793,1,0,
        0,0,2793,2795,1,0,0,0,2794,2796,5,81,0,0,2795,2794,1,0,0,0,2795,
        2796,1,0,0,0,2796,2798,1,0,0,0,2797,2799,5,95,0,0,2798,2797,1,0,
        0,0,2798,2799,1,0,0,0,2799,2801,1,0,0,0,2800,2802,5,98,0,0,2801,
        2800,1,0,0,0,2801,2802,1,0,0,0,2802,3294,1,0,0,0,2803,2805,5,100,
        0,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,2806,1,0,0,0,2806,2808,
        5,101,0,0,2807,2809,5,85,0,0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,
        2809,2811,1,0,0,0,2810,2812,5,102,0,0,2811,2810,1,0,0,0,2811,2812,
        1,0,0,0,2812,2814,1,0,0,0,2813,2815,5,86,0,0,2814,2813,1,0,0,0,2814,
        2815,1,0,0,0,2815,2817,1,0,0,0,2816,2818,5,103,0,0,2817,2816,1,0,
        0,0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,2821,5,87,0,0,2820,
        2819,1,0,0,0,2820,2821,1,0,0,0,2821,2823,1,0,0,0,2822,2824,5,110,
        0,0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2826,1,0,0,0,2825,2827,
        5,105,0,0,2826,2825,1,0,0,0,2826,2827,1,0,0,0,2827,2829,1,0,0,0,
        2828,2830,5,87,0,0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2832,
        1,0,0,0,2831,2833,5,106,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,
        2833,2835,1,0,0,0,2834,2836,5,96,0,0,2835,2834,1,0,0,0,2835,2836,
        1,0,0,0,2836,2838,1,0,0,0,2837,2839,5,107,0,0,2838,2837,1,0,0,0,
        2838,2839,1,0,0,0,2839,2841,1,0,0,0,2840,2842,5,97,0,0,2841,2840,
        1,0,0,0,2841,2842,1,0,0,0,2842,2844,1,0,0,0,2843,2845,5,108,0,0,
        2844,2843,1,0,0,0,2844,2845,1,0,0,0,2845,2847,1,0,0,0,2846,2848,
        5,81,0,0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,2850,1,0,0,0,2849,
        2851,5,95,0,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,2853,1,0,
        0,0,2852,2854,5,98,0,0,2853,2852,1,0,0,0,2853,2854,1,0,0,0,2854,
        3294,1,0,0,0,2855,2857,5,100,0,0,2856,2855,1,0,0,0,2856,2857,1,0,
        0,0,2857,2859,1,0,0,0,2858,2860,5,101,0,0,2859,2858,1,0,0,0,2859,
        2860,1,0,0,0,2860,2862,1,0,0,0,2861,2863,5,85,0,0,2862,2861,1,0,
        0,0,2862,2863,1,0,0,0,2863,2864,1,0,0,0,2864,2866,5,102,0,0,2865,
        2867,5,86,0,0,2866,2865,1,0,0,0,2866,2867,1,0,0,0,2867,2869,1,0,
        0,0,2868,2870,5,103,0,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,
        2872,1,0,0,0,2871,2873,5,87,0,0,2872,2871,1,0,0,0,2872,2873,1,0,
        0,0,2873,2875,1,0,0,0,2874,2876,5,110,0,0,2875,2874,1,0,0,0,2875,
        2876,1,0,0,0,2876,2878,1,0,0,0,2877,2879,5,105,0,0,2878,2877,1,0,
        0,0,2878,2879,1,0,0,0,2879,2881,1,0,0,0,2880,2882,5,87,0,0,2881,
        2880,1,0,0,0,2881,2882,1,0,0,0,2882,2884,1,0,0,0,2883,2885,5,106,
        0,0,2884,2883,1,0,0,0,2884,2885,1,0,0,0,2885,2887,1,0,0,0,2886,2888,
        5,96,0,0,2887,2886,1,0,0,0,2887,2888,1,0,0,0,2888,2890,1,0,0,0,2889,
        2891,5,107,0,0,2890,2889,1,0,0,0,2890,2891,1,0,0,0,2891,2893,1,0,
        0,0,2892,2894,5,97,0,0,2893,2892,1,0,0,0,2893,2894,1,0,0,0,2894,
        2896,1,0,0,0,2895,2897,5,108,0,0,2896,2895,1,0,0,0,2896,2897,1,0,
        0,0,2897,2899,1,0,0,0,2898,2900,5,81,0,0,2899,2898,1,0,0,0,2899,
        2900,1,0,0,0,2900,2902,1,0,0,0,2901,2903,5,95,0,0,2902,2901,1,0,
        0,0,2902,2903,1,0,0,0,2903,2905,1,0,0,0,2904,2906,5,98,0,0,2905,
        2904,1,0,0,0,2905,2906,1,0,0,0,2906,3294,1,0,0,0,2907,2909,5,100,
        0,0,2908,2907,1,0,0,0,2908,2909,1,0,0,0,2909,2911,1,0,0,0,2910,2912,
        5,101,0,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2914,1,0,0,0,
        2913,2915,5,85,0,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,2915,2917,
        1,0,0,0,2916,2918,5,102,0,0,2917,2916,1,0,0,0,2917,2918,1,0,0,0,
        2918,2920,1,0,0,0,2919,2921,5,86,0,0,2920,2919,1,0,0,0,2920,2921,
        1,0,0,0,2921,2922,1,0,0,0,2922,2924,5,103,0,0,2923,2925,5,87,0,0,
        2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,2927,1,0,0,0,2926,2928,
        5,110,0,0,2927,2926,1,0,0,0,2927,2928,1,0,0,0,2928,2930,1,0,0,0,
        2929,2931,5,105,0,0,2930,2929,1,0,0,0,2930,2931,1,0,0,0,2931,2933,
        1,0,0,0,2932,2934,5,87,0,0,2933,2932,1,0,0,0,2933,2934,1,0,0,0,2934,
        2936,1,0,0,0,2935,2937,5,106,0,0,2936,2935,1,0,0,0,2936,2937,1,0,
        0,0,2937,2939,1,0,0,0,2938,2940,5,96,0,0,2939,2938,1,0,0,0,2939,
        2940,1,0,0,0,2940,2942,1,0,0,0,2941,2943,5,107,0,0,2942,2941,1,0,
        0,0,2942,2943,1,0,0,0,2943,2945,1,0,0,0,2944,2946,5,97,0,0,2945,
        2944,1,0,0,0,2945,2946,1,0,0,0,2946,2948,1,0,0,0,2947,2949,5,108,
        0,0,2948,2947,1,0,0,0,2948,2949,1,0,0,0,2949,2951,1,0,0,0,2950,2952,
        5,81,0,0,2951,2950,1,0,0,0,2951,2952,1,0,0,0,2952,2954,1,0,0,0,2953,
        2955,5,95,0,0,2954,2953,1,0,0,0,2954,2955,1,0,0,0,2955,2957,1,0,
        0,0,2956,2958,5,98,0,0,2957,2956,1,0,0,0,2957,2958,1,0,0,0,2958,
        3294,1,0,0,0,2959,2961,5,100,0,0,2960,2959,1,0,0,0,2960,2961,1,0,
        0,0,2961,2963,1,0,0,0,2962,2964,5,101,0,0,2963,2962,1,0,0,0,2963,
        2964,1,0,0,0,2964,2966,1,0,0,0,2965,2967,5,85,0,0,2966,2965,1,0,
        0,0,2966,2967,1,0,0,0,2967,2969,1,0,0,0,2968,2970,5,102,0,0,2969,
        2968,1,0,0,0,2969,2970,1,0,0,0,2970,2972,1,0,0,0,2971,2973,5,86,
        0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,0,2973,2975,1,0,0,0,2974,2976,
        5,103,0,0,2975,2974,1,0,0,0,2975,2976,1,0,0,0,2976,2978,1,0,0,0,
        2977,2979,5,87,0,0,2978,2977,1,0,0,0,2978,2979,1,0,0,0,2979,2981,
        1,0,0,0,2980,2982,5,110,0,0,2981,2980,1,0,0,0,2981,2982,1,0,0,0,
        2982,2983,1,0,0,0,2983,2985,5,105,0,0,2984,2986,5,87,0,0,2985,2984,
        1,0,0,0,2985,2986,1,0,0,0,2986,2988,1,0,0,0,2987,2989,5,106,0,0,
        2988,2987,1,0,0,0,2988,2989,1,0,0,0,2989,2991,1,0,0,0,2990,2992,
        5,96,0,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,
        2995,5,107,0,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2997,1,0,
        0,0,2996,2998,5,97,0,0,2997,2996,1,0,0,0,2997,2998,1,0,0,0,2998,
        3000,1,0,0,0,2999,3001,5,108,0,0,3000,2999,1,0,0,0,3000,3001,1,0,
        0,0,3001,3003,1,0,0,0,3002,3004,5,81,0,0,3003,3002,1,0,0,0,3003,
        3004,1,0,0,0,3004,3006,1,0,0,0,3005,3007,5,95,0,0,3006,3005,1,0,
        0,0,3006,3007,1,0,0,0,3007,3009,1,0,0,0,3008,3010,5,98,0,0,3009,
        3008,1,0,0,0,3009,3010,1,0,0,0,3010,3294,1,0,0,0,3011,3013,5,100,
        0,0,3012,3011,1,0,0,0,3012,3013,1,0,0,0,3013,3015,1,0,0,0,3014,3016,
        5,101,0,0,3015,3014,1,0,0,0,3015,3016,1,0,0,0,3016,3018,1,0,0,0,
        3017,3019,5,85,0,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,3021,
        1,0,0,0,3020,3022,5,102,0,0,3021,3020,1,0,0,0,3021,3022,1,0,0,0,
        3022,3024,1,0,0,0,3023,3025,5,86,0,0,3024,3023,1,0,0,0,3024,3025,
        1,0,0,0,3025,3027,1,0,0,0,3026,3028,5,103,0,0,3027,3026,1,0,0,0,
        3027,3028,1,0,0,0,3028,3030,1,0,0,0,3029,3031,5,87,0,0,3030,3029,
        1,0,0,0,3030,3031,1,0,0,0,3031,3033,1,0,0,0,3032,3034,5,110,0,0,
        3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,3036,1,0,0,0,3035,3037,
        5,105,0,0,3036,3035,1,0,0,0,3036,3037,1,0,0,0,3037,3039,1,0,0,0,
        3038,3040,5,87,0,0,3039,3038,1,0,0,0,3039,3040,1,0,0,0,3040,3041,
        1,0,0,0,3041,3043,5,106,0,0,3042,3044,5,96,0,0,3043,3042,1,0,0,0,
        3043,3044,1,0,0,0,3044,3046,1,0,0,0,3045,3047,5,107,0,0,3046,3045,
        1,0,0,0,3046,3047,1,0,0,0,3047,3049,1,0,0,0,3048,3050,5,97,0,0,3049,
        3048,1,0,0,0,3049,3050,1,0,0,0,3050,3052,1,0,0,0,3051,3053,5,108,
        0,0,3052,3051,1,0,0,0,3052,3053,1,0,0,0,3053,3055,1,0,0,0,3054,3056,
        5,81,0,0,3055,3054,1,0,0,0,3055,3056,1,0,0,0,3056,3058,1,0,0,0,3057,
        3059,5,95,0,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,3061,1,0,
        0,0,3060,3062,5,98,0,0,3061,3060,1,0,0,0,3061,3062,1,0,0,0,3062,
        3294,1,0,0,0,3063,3065,5,100,0,0,3064,3063,1,0,0,0,3064,3065,1,0,
        0,0,3065,3067,1,0,0,0,3066,3068,5,101,0,0,3067,3066,1,0,0,0,3067,
        3068,1,0,0,0,3068,3070,1,0,0,0,3069,3071,5,85,0,0,3070,3069,1,0,
        0,0,3070,3071,1,0,0,0,3071,3073,1,0,0,0,3072,3074,5,102,0,0,3073,
        3072,1,0,0,0,3073,3074,1,0,0,0,3074,3076,1,0,0,0,3075,3077,5,86,
        0,0,3076,3075,1,0,0,0,3076,3077,1,0,0,0,3077,3079,1,0,0,0,3078,3080,
        5,103,0,0,3079,3078,1,0,0,0,3079,3080,1,0,0,0,3080,3082,1,0,0,0,
        3081,3083,5,87,0,0,3082,3081,1,0,0,0,3082,3083,1,0,0,0,3083,3085,
        1,0,0,0,3084,3086,5,110,0,0,3085,3084,1,0,0,0,3085,3086,1,0,0,0,
        3086,3088,1,0,0,0,3087,3089,5,105,0,0,3088,3087,1,0,0,0,3088,3089,
        1,0,0,0,3089,3091,1,0,0,0,3090,3092,5,87,0,0,3091,3090,1,0,0,0,3091,
        3092,1,0,0,0,3092,3094,1,0,0,0,3093,3095,5,106,0,0,3094,3093,1,0,
        0,0,3094,3095,1,0,0,0,3095,3097,1,0,0,0,3096,3098,5,96,0,0,3097,
        3096,1,0,0,0,3097,3098,1,0,0,0,3098,3099,1,0,0,0,3099,3101,5,107,
        0,0,3100,3102,5,97,0,0,3101,3100,1,0,0,0,3101,3102,1,0,0,0,3102,
        3104,1,0,0,0,3103,3105,5,108,0,0,3104,3103,1,0,0,0,3104,3105,1,0,
        0,0,3105,3107,1,0,0,0,3106,3108,5,81,0,0,3107,3106,1,0,0,0,3107,
        3108,1,0,0,0,3108,3110,1,0,0,0,3109,3111,5,95,0,0,3110,3109,1,0,
        0,0,3110,3111,1,0,0,0,3111,3113,1,0,0,0,3112,3114,5,98,0,0,3113,
        3112,1,0,0,0,3113,3114,1,0,0,0,3114,3294,1,0,0,0,3115,3117,5,100,
        0,0,3116,3115,1,0,0,0,3116,3117,1,0,0,0,3117,3119,1,0,0,0,3118,3120,
        5,101,0,0,3119,3118,1,0,0,0,3119,3120,1,0,0,0,3120,3122,1,0,0,0,
        3121,3123,5,85,0,0,3122,3121,1,0,0,0,3122,3123,1,0,0,0,3123,3125,
        1,0,0,0,3124,3126,5,102,0,0,3125,3124,1,0,0,0,3125,3126,1,0,0,0,
        3126,3128,1,0,0,0,3127,3129,5,86,0,0,3128,3127,1,0,0,0,3128,3129,
        1,0,0,0,3129,3131,1,0,0,0,3130,3132,5,103,0,0,3131,3130,1,0,0,0,
        3131,3132,1,0,0,0,3132,3134,1,0,0,0,3133,3135,5,87,0,0,3134,3133,
        1,0,0,0,3134,3135,1,0,0,0,3135,3137,1,0,0,0,3136,3138,5,110,0,0,
        3137,3136,1,0,0,0,3137,3138,1,0,0,0,3138,3140,1,0,0,0,3139,3141,
        5,105,0,0,3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,3143,1,0,0,0,
        3142,3144,5,87,0,0,3143,3142,1,0,0,0,3143,3144,1,0,0,0,3144,3146,
        1,0,0,0,3145,3147,5,106,0,0,3146,3145,1,0,0,0,3146,3147,1,0,0,0,
        3147,3149,1,0,0,0,3148,3150,5,96,0,0,3149,3148,1,0,0,0,3149,3150,
        1,0,0,0,3150,3152,1,0,0,0,3151,3153,5,107,0,0,3152,3151,1,0,0,0,
        3152,3153,1,0,0,0,3153,3155,1,0,0,0,3154,3156,5,97,0,0,3155,3154,
        1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,3159,5,108,0,0,
        3158,3160,5,81,0,0,3159,3158,1,0,0,0,3159,3160,1,0,0,0,3160,3162,
        1,0,0,0,3161,3163,5,95,0,0,3162,3161,1,0,0,0,3162,3163,1,0,0,0,3163,
        3165,1,0,0,0,3164,3166,5,98,0,0,3165,3164,1,0,0,0,3165,3166,1,0,
        0,0,3166,3294,1,0,0,0,3167,3169,5,100,0,0,3168,3167,1,0,0,0,3168,
        3169,1,0,0,0,3169,3171,1,0,0,0,3170,3172,5,101,0,0,3171,3170,1,0,
        0,0,3171,3172,1,0,0,0,3172,3174,1,0,0,0,3173,3175,5,85,0,0,3174,
        3173,1,0,0,0,3174,3175,1,0,0,0,3175,3177,1,0,0,0,3176,3178,5,102,
        0,0,3177,3176,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,0,0,3179,3181,
        5,86,0,0,3180,3179,1,0,0,0,3180,3181,1,0,0,0,3181,3183,1,0,0,0,3182,
        3184,5,103,0,0,3183,3182,1,0,0,0,3183,3184,1,0,0,0,3184,3186,1,0,
        0,0,3185,3187,5,87,0,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,
        3189,1,0,0,0,3188,3190,5,110,0,0,3189,3188,1,0,0,0,3189,3190,1,0,
        0,0,3190,3192,1,0,0,0,3191,3193,5,105,0,0,3192,3191,1,0,0,0,3192,
        3193,1,0,0,0,3193,3195,1,0,0,0,3194,3196,5,87,0,0,3195,3194,1,0,
        0,0,3195,3196,1,0,0,0,3196,3198,1,0,0,0,3197,3199,5,106,0,0,3198,
        3197,1,0,0,0,3198,3199,1,0,0,0,3199,3201,1,0,0,0,3200,3202,5,96,
        0,0,3201,3200,1,0,0,0,3201,3202,1,0,0,0,3202,3204,1,0,0,0,3203,3205,
        5,107,0,0,3204,3203,1,0,0,0,3204,3205,1,0,0,0,3205,3207,1,0,0,0,
        3206,3208,5,97,0,0,3207,3206,1,0,0,0,3207,3208,1,0,0,0,3208,3209,
        1,0,0,0,3209,3211,5,108,0,0,3210,3212,5,81,0,0,3211,3210,1,0,0,0,
        3211,3212,1,0,0,0,3212,3214,1,0,0,0,3213,3215,5,95,0,0,3214,3213,
        1,0,0,0,3214,3215,1,0,0,0,3215,3217,1,0,0,0,3216,3218,5,98,0,0,3217,
        3216,1,0,0,0,3217,3218,1,0,0,0,3218,3294,1,0,0,0,3219,3221,5,117,
        0,0,3220,3222,5,85,0,0,3221,3220,1,0,0,0,3221,3222,1,0,0,0,3222,
        3224,1,0,0,0,3223,3225,5,86,0,0,3224,3223,1,0,0,0,3224,3225,1,0,
        0,0,3225,3227,1,0,0,0,3226,3228,5,87,0,0,3227,3226,1,0,0,0,3227,
        3228,1,0,0,0,3228,3230,1,0,0,0,3229,3231,5,110,0,0,3230,3229,1,0,
        0,0,3230,3231,1,0,0,0,3231,3233,1,0,0,0,3232,3234,5,91,0,0,3233,
        3232,1,0,0,0,3233,3234,1,0,0,0,3234,3236,1,0,0,0,3235,3237,5,92,
        0,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,3240,
        5,87,0,0,3239,3238,1,0,0,0,3239,3240,1,0,0,0,3240,3242,1,0,0,0,3241,
        3243,5,96,0,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3245,1,0,
        0,0,3244,3246,5,97,0,0,3245,3244,1,0,0,0,3245,3246,1,0,0,0,3246,
        3248,1,0,0,0,3247,3249,5,81,0,0,3248,3247,1,0,0,0,3248,3249,1,0,
        0,0,3249,3251,1,0,0,0,3250,3252,5,95,0,0,3251,3250,1,0,0,0,3251,
        3252,1,0,0,0,3252,3254,1,0,0,0,3253,3255,5,98,0,0,3254,3253,1,0,
        0,0,3254,3255,1,0,0,0,3255,3294,1,0,0,0,3256,3258,5,117,0,0,3257,
        3259,5,85,0,0,3258,3257,1,0,0,0,3258,3259,1,0,0,0,3259,3261,1,0,
        0,0,3260,3262,5,86,0,0,3261,3260,1,0,0,0,3261,3262,1,0,0,0,3262,
        3264,1,0,0,0,3263,3265,5,87,0,0,3264,3263,1,0,0,0,3264,3265,1,0,
        0,0,3265,3267,1,0,0,0,3266,3268,5,90,0,0,3267,3266,1,0,0,0,3267,
        3268,1,0,0,0,3268,3270,1,0,0,0,3269,3271,5,91,0,0,3270,3269,1,0,
        0,0,3270,3271,1,0,0,0,3271,3273,1,0,0,0,3272,3274,5,92,0,0,3273,
        3272,1,0,0,0,3273,3274,1,0,0,0,3274,3276,1,0,0,0,3275,3277,5,87,
        0,0,3276,3275,1,0,0,0,3276,3277,1,0,0,0,3277,3279,1,0,0,0,3278,3280,
        5,96,0,0,3279,3278,1,0,0,0,3279,3280,1,0,0,0,3280,3282,1,0,0,0,3281,
        3283,5,97,0,0,3282,3281,1,0,0,0,3282,3283,1,0,0,0,3283,3285,1,0,
        0,0,3284,3286,5,81,0,0,3285,3284,1,0,0,0,3285,3286,1,0,0,0,3286,
        3288,1,0,0,0,3287,3289,5,95,0,0,3288,3287,1,0,0,0,3288,3289,1,0,
        0,0,3289,3291,1,0,0,0,3290,3292,5,98,0,0,3291,3290,1,0,0,0,3291,
        3292,1,0,0,0,3292,3294,1,0,0,0,3293,2456,1,0,0,0,3293,2520,1,0,0,
        0,3293,2581,1,0,0,0,3293,2642,1,0,0,0,3293,2697,1,0,0,0,3293,2751,
        1,0,0,0,3293,2804,1,0,0,0,3293,2856,1,0,0,0,3293,2908,1,0,0,0,3293,
        2960,1,0,0,0,3293,3012,1,0,0,0,3293,3064,1,0,0,0,3293,3116,1,0,0,
        0,3293,3168,1,0,0,0,3293,3219,1,0,0,0,3293,3256,1,0,0,0,3294,87,
        1,0,0,0,3295,3297,3,90,45,0,3296,3295,1,0,0,0,3297,3298,1,0,0,0,
        3298,3296,1,0,0,0,3298,3299,1,0,0,0,3299,89,1,0,0,0,3300,3301,5,
        109,0,0,3301,3302,5,109,0,0,3302,3307,7,0,0,0,3303,3304,5,109,0,
        0,3304,3307,7,1,0,0,3305,3307,8,2,0,0,3306,3300,1,0,0,0,3306,3303,
        1,0,0,0,3306,3305,1,0,0,0,3307,91,1,0,0,0,608,98,102,113,119,121,
        154,161,167,1022,1035,1050,1063,1080,1097,1112,1125,1138,1149,1164,
        1179,1192,1207,1222,1236,1249,1254,1261,1267,1272,1275,1279,1284,
        1290,1298,1302,1307,1315,1323,1326,1336,1339,1354,1368,1376,1384,
        1392,1400,1408,1413,1419,1425,1432,1436,1456,1467,1477,1486,1495,
        1501,1510,1516,1524,1531,1546,1552,1556,1563,1567,1570,1590,1597,
        1606,1614,1637,1644,1649,1652,1655,1658,1661,1664,1667,1670,1673,
        1676,1680,1683,1686,1689,1692,1695,1698,1701,1704,1707,1710,1713,
        1716,1719,1722,1725,1728,1731,1734,1738,1741,1744,1747,1750,1753,
        1756,1759,1762,1765,1768,1771,1774,1777,1780,1783,1786,1789,1792,
        1795,1798,1802,1805,1808,1811,1814,1817,1820,1823,1826,1829,1832,
        1835,1838,1841,1844,1847,1850,1853,1856,1859,1862,1866,1869,1872,
        1875,1878,1881,1884,1887,1890,1893,1896,1899,1902,1905,1908,1911,
        1914,1917,1920,1923,1926,1930,1933,1936,1939,1942,1945,1948,1951,
        1954,1957,1960,1963,1966,1969,1972,1975,1978,1982,1985,1988,1991,
        1994,1997,2001,2004,2007,2010,2013,2016,2019,2022,2025,2028,2032,
        2035,2038,2041,2044,2048,2051,2054,2057,2060,2063,2066,2069,2072,
        2075,2079,2082,2085,2088,2092,2095,2098,2101,2104,2107,2110,2113,
        2116,2119,2123,2126,2129,2133,2136,2139,2142,2145,2148,2151,2154,
        2157,2160,2164,2167,2171,2174,2177,2180,2183,2186,2189,2192,2195,
        2198,2202,2206,2209,2212,2215,2218,2221,2224,2227,2230,2233,2238,
        2241,2244,2247,2250,2253,2256,2259,2262,2265,2269,2272,2275,2278,
        2281,2284,2287,2290,2293,2296,2301,2304,2307,2310,2313,2316,2319,
        2322,2325,2330,2333,2336,2339,2342,2345,2348,2351,2356,2359,2362,
        2365,2368,2371,2374,2379,2382,2385,2388,2391,2394,2399,2402,2405,
        2408,2411,2416,2419,2422,2425,2430,2433,2436,2441,2444,2449,2453,
        2456,2459,2462,2465,2468,2471,2474,2477,2480,2484,2487,2490,2493,
        2496,2499,2502,2505,2508,2511,2514,2517,2520,2523,2526,2529,2532,
        2535,2538,2542,2545,2548,2551,2554,2557,2560,2563,2566,2569,2572,
        2575,2578,2581,2584,2587,2590,2593,2596,2599,2602,2606,2609,2612,
        2615,2618,2621,2624,2627,2630,2633,2636,2639,2642,2645,2648,2651,
        2654,2657,2660,2664,2667,2670,2673,2676,2679,2682,2685,2688,2691,
        2694,2697,2700,2703,2706,2709,2712,2715,2718,2722,2725,2728,2731,
        2734,2737,2740,2743,2746,2749,2753,2756,2759,2762,2765,2768,2771,
        2774,2777,2780,2783,2786,2789,2792,2795,2798,2801,2804,2808,2811,
        2814,2817,2820,2823,2826,2829,2832,2835,2838,2841,2844,2847,2850,
        2853,2856,2859,2862,2866,2869,2872,2875,2878,2881,2884,2887,2890,
        2893,2896,2899,2902,2905,2908,2911,2914,2917,2920,2924,2927,2930,
        2933,2936,2939,2942,2945,2948,2951,2954,2957,2960,2963,2966,2969,
        2972,2975,2978,2981,2985,2988,2991,2994,2997,3000,3003,3006,3009,
        3012,3015,3018,3021,3024,3027,3030,3033,3036,3039,3043,3046,3049,
        3052,3055,3058,3061,3064,3067,3070,3073,3076,3079,3082,3085,3088,
        3091,3094,3097,3101,3104,3107,3110,3113,3116,3119,3122,3125,3128,
        3131,3134,3137,3140,3143,3146,3149,3152,3155,3159,3162,3165,3168,
        3171,3174,3177,3180,3183,3186,3189,3192,3195,3198,3201,3204,3207,
        3211,3214,3217,3221,3224,3227,3230,3233,3236,3239,3242,3245,3248,
        3251,3254,3258,3261,3264,3267,3270,3273,3276,3279,3282,3285,3288,
        3291,3293,3298,3306
    ]

class PloverDictionaryParser ( Parser ):

    grammarFileName = "PloverDictionary.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", 
                     "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", 
                     "'o'", "'p'", "'r'", "'s'", "'t'", "'u'", "'v'", "'w'", 
                     "'x'", "'y'", "'z'", "'q'", "'_'", "'('", "')'", "'C'", 
                     "'^'", "':attach'", "':attach:^'", "':attach:'", "':glue:'", 
                     "'?'", "'!'", "'mode:set_space:'", "'mode:reset_space:'", 
                     "'-|'", "':case:cap_first_word'", "'*-|'", "':retro_case:cap_first_word'", 
                     "'>'", "':case:lower_first_char'", "'*>'", "':retro_case:lower_first_char'", 
                     "'<'", "':case:upper_first_word'", "'*<'", "':retro_case:upper_first_word'", 
                     "'~|'", "'^~|'", "'mode:caps'", "'mode:title'", "'mode:lower'", 
                     "'mode:camel'", "'mode:snake'", "'mode:reset_case'", 
                     "':stop:.'", "':comma:'", "':stop:?'", "':stop:!'", 
                     "'`'", "':comma::'", "';'", "':comma:;'", "'=undo'", 
                     "'*+'", "'=repeat_last_stroke'", "'=retro_toggle_asterisk'", 
                     "'=retrospective_toggle_asterisk'", "'$'", "':word_end'", 
                     "':retro_currency:'", "'='", "'/'", "':if_next_matches:'", 
                     "'plover:'", "'+'", "'S'", "'T'", "'P'", "'H'", "'K'", 
                     "'W'", "'R'", "'A'", "'O'", "'*'", "'E'", "'U'", "'F'", 
                     "'L'", "'D'", "'B'", "'G'", "'Z'", "'0'", "'1'", "'2'", 
                     "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'\\'", 
                     "'-'", "'{'", "'}'", "':'", "'.'", "','", "'\"'", "'#'", 
                     "'&'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "S", "T", "P", "H", "K", "W", "R", "A", 
                      "O", "STAR", "E", "U", "F", "L", "D", "B", "G", "Z", 
                      "NUM_0", "NUM_1", "NUM_2", "NUM_3", "NUM_4", "NUM_5", 
                      "NUM_6", "NUM_7", "NUM_8", "NUM_9", "BACKSLASH", "DASH", 
                      "LEFT_CURLY", "RIGHT_CURLY", "COLON", "DOT", "COMMA", 
                      "QUOTE", "HASH", "AMPERSAND", "WS", "CHAR" ]

    RULE_dictionary = 0
    RULE_record = 1
    RULE_translation = 2
    RULE_command = 3
    RULE_combo = 4
    RULE_key = 5
    RULE_normalKey = 6
    RULE_modifierKey = 7
    RULE_suffix = 8
    RULE_prefix = 9
    RULE_infix = 10
    RULE_glue = 11
    RULE_retroInsertSpace = 12
    RULE_retroDeleteSpace = 13
    RULE_setSpace = 14
    RULE_resetSpace = 15
    RULE_capFirstWord = 16
    RULE_retroCapFirstWord = 17
    RULE_lowerFirstChar = 18
    RULE_retroLowerFirstChar = 19
    RULE_upperFirstWord = 20
    RULE_retroUpperFirstWord = 21
    RULE_carryingCapitalization = 22
    RULE_casingModes = 23
    RULE_punctuation = 24
    RULE_undo = 25
    RULE_repeatLastStroke = 26
    RULE_retroToggleAsterisk = 27
    RULE_cancelFormatting = 28
    RULE_nothing = 29
    RULE_endWord = 30
    RULE_currency = 31
    RULE_lookahead = 32
    RULE_ploverCommand = 33
    RULE_meta = 34
    RULE_macro = 35
    RULE_pgh = 36
    RULE_en = 37
    RULE_lpluscommand = 38
    RULE_lminuscommand = 39
    RULE_outline = 40
    RULE_chord = 41
    RULE_unnumberedChord = 42
    RULE_numberedChord = 43
    RULE_string = 44
    RULE_anychar = 45

    ruleNames =  [ "dictionary", "record", "translation", "command", "combo", 
                   "key", "normalKey", "modifierKey", "suffix", "prefix", 
                   "infix", "glue", "retroInsertSpace", "retroDeleteSpace", 
                   "setSpace", "resetSpace", "capFirstWord", "retroCapFirstWord", 
                   "lowerFirstChar", "retroLowerFirstChar", "upperFirstWord", 
                   "retroUpperFirstWord", "carryingCapitalization", "casingModes", 
                   "punctuation", "undo", "repeatLastStroke", "retroToggleAsterisk", 
                   "cancelFormatting", "nothing", "endWord", "currency", 
                   "lookahead", "ploverCommand", "meta", "macro", "pgh", 
                   "en", "lpluscommand", "lminuscommand", "outline", "chord", 
                   "unnumberedChord", "numberedChord", "string", "anychar" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    S=81
    T=82
    P=83
    H=84
    K=85
    W=86
    R=87
    A=88
    O=89
    STAR=90
    E=91
    U=92
    F=93
    L=94
    D=95
    B=96
    G=97
    Z=98
    NUM_0=99
    NUM_1=100
    NUM_2=101
    NUM_3=102
    NUM_4=103
    NUM_5=104
    NUM_6=105
    NUM_7=106
    NUM_8=107
    NUM_9=108
    BACKSLASH=109
    DASH=110
    LEFT_CURLY=111
    RIGHT_CURLY=112
    COLON=113
    DOT=114
    COMMA=115
    QUOTE=116
    HASH=117
    AMPERSAND=118
    WS=119
    CHAR=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class DictionaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def EOF(self):
            return self.getToken(PloverDictionaryParser.EOF, 0)

        def record(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.RecordContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.RecordContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.COMMA)
            else:
                return self.getToken(PloverDictionaryParser.COMMA, i)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_dictionary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionary" ):
                listener.enterDictionary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionary" ):
                listener.exitDictionary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary" ):
                return visitor.visitDictionary(self)
            else:
                return visitor.visitChildren(self)




    def dictionary(self):

        localctx = PloverDictionaryParser.DictionaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dictionary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 98
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 93
                    self.record()
                    self.state = 94
                    self.match(PloverDictionaryParser.COMMA) 
                self.state = 100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 101
                self.record()


            self.state = 104
            self.match(PloverDictionaryParser.RIGHT_CURLY)
            self.state = 105
            self.match(PloverDictionaryParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.QUOTE)
            else:
                return self.getToken(PloverDictionaryParser.QUOTE, i)

        def outline(self):
            return self.getTypedRuleContext(PloverDictionaryParser.OutlineContext,0)


        def COLON(self):
            return self.getToken(PloverDictionaryParser.COLON, 0)

        def translation(self):
            return self.getTypedRuleContext(PloverDictionaryParser.TranslationContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord" ):
                listener.enterRecord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord" ):
                listener.exitRecord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord" ):
                return visitor.visitRecord(self)
            else:
                return visitor.visitChildren(self)




    def record(self):

        localctx = PloverDictionaryParser.RecordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_record)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(PloverDictionaryParser.QUOTE)
            self.state = 108
            self.outline()
            self.state = 109
            self.match(PloverDictionaryParser.QUOTE)
            self.state = 110
            self.match(PloverDictionaryParser.COLON)
            self.state = 111
            self.match(PloverDictionaryParser.QUOTE)
            self.state = 113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139330113471774719) != 0):
                self.state = 112
                self.translation()


            self.state = 115
            self.match(PloverDictionaryParser.QUOTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.CommandContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.CommandContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_translation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation" ):
                listener.enterTranslation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation" ):
                listener.exitTranslation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslation" ):
                return visitor.visitTranslation(self)
            else:
                return visitor.visitChildren(self)




    def translation(self):

        localctx = PloverDictionaryParser.TranslationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_translation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 117
                    self.command()
                    pass

                elif la_ == 2:
                    self.state = 118
                    self.string()
                    pass


                self.state = 121 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139330113471774719) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def combo(self):
            return self.getTypedRuleContext(PloverDictionaryParser.ComboContext,0)


        def suffix(self):
            return self.getTypedRuleContext(PloverDictionaryParser.SuffixContext,0)


        def prefix(self):
            return self.getTypedRuleContext(PloverDictionaryParser.PrefixContext,0)


        def infix(self):
            return self.getTypedRuleContext(PloverDictionaryParser.InfixContext,0)


        def retroInsertSpace(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroInsertSpaceContext,0)


        def retroDeleteSpace(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroDeleteSpaceContext,0)


        def retroCapFirstWord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroCapFirstWordContext,0)


        def retroLowerFirstChar(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroLowerFirstCharContext,0)


        def retroToggleAsterisk(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroToggleAsteriskContext,0)


        def retroUpperFirstWord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RetroUpperFirstWordContext,0)


        def repeatLastStroke(self):
            return self.getTypedRuleContext(PloverDictionaryParser.RepeatLastStrokeContext,0)


        def cancelFormatting(self):
            return self.getTypedRuleContext(PloverDictionaryParser.CancelFormattingContext,0)


        def capFirstWord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.CapFirstWordContext,0)


        def carryingCapitalization(self):
            return self.getTypedRuleContext(PloverDictionaryParser.CarryingCapitalizationContext,0)


        def casingModes(self):
            return self.getTypedRuleContext(PloverDictionaryParser.CasingModesContext,0)


        def currency(self):
            return self.getTypedRuleContext(PloverDictionaryParser.CurrencyContext,0)


        def endWord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.EndWordContext,0)


        def lookahead(self):
            return self.getTypedRuleContext(PloverDictionaryParser.LookaheadContext,0)


        def macro(self):
            return self.getTypedRuleContext(PloverDictionaryParser.MacroContext,0)


        def meta(self):
            return self.getTypedRuleContext(PloverDictionaryParser.MetaContext,0)


        def lowerFirstChar(self):
            return self.getTypedRuleContext(PloverDictionaryParser.LowerFirstCharContext,0)


        def upperFirstWord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.UpperFirstWordContext,0)


        def undo(self):
            return self.getTypedRuleContext(PloverDictionaryParser.UndoContext,0)


        def setSpace(self):
            return self.getTypedRuleContext(PloverDictionaryParser.SetSpaceContext,0)


        def ploverCommand(self):
            return self.getTypedRuleContext(PloverDictionaryParser.PloverCommandContext,0)


        def glue(self):
            return self.getTypedRuleContext(PloverDictionaryParser.GlueContext,0)


        def punctuation(self):
            return self.getTypedRuleContext(PloverDictionaryParser.PunctuationContext,0)


        def pgh(self):
            return self.getTypedRuleContext(PloverDictionaryParser.PghContext,0)


        def en(self):
            return self.getTypedRuleContext(PloverDictionaryParser.EnContext,0)


        def lminuscommand(self):
            return self.getTypedRuleContext(PloverDictionaryParser.LminuscommandContext,0)


        def lpluscommand(self):
            return self.getTypedRuleContext(PloverDictionaryParser.LpluscommandContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = PloverDictionaryParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_command)
        try:
            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 123
                self.combo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 124
                self.suffix()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 125
                self.prefix()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 126
                self.infix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 127
                self.retroInsertSpace()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 128
                self.retroDeleteSpace()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 129
                self.retroCapFirstWord()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 130
                self.retroLowerFirstChar()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 131
                self.retroToggleAsterisk()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 132
                self.retroUpperFirstWord()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 133
                self.repeatLastStroke()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 134
                self.cancelFormatting()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 135
                self.capFirstWord()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 136
                self.carryingCapitalization()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 137
                self.casingModes()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 138
                self.currency()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 139
                self.endWord()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 140
                self.lookahead()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 141
                self.macro()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 142
                self.meta()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 143
                self.lowerFirstChar()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 144
                self.upperFirstWord()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 145
                self.undo()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 146
                self.setSpace()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 147
                self.ploverCommand()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 148
                self.glue()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 149
                self.punctuation()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 150
                self.pgh()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 151
                self.en()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 152
                self.lminuscommand()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 153
                self.lpluscommand()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComboContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def HASH(self):
            return self.getToken(PloverDictionaryParser.HASH, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def key(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.KeyContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.KeyContext,i)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_combo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombo" ):
                listener.enterCombo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombo" ):
                listener.exitCombo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCombo" ):
                return visitor.visitCombo(self)
            else:
                return visitor.visitChildren(self)




    def combo(self):

        localctx = PloverDictionaryParser.ComboContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_combo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 157
            self.match(PloverDictionaryParser.HASH)
            self.state = 159 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 158
                self.key()
                self.state = 161 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                    break

            self.state = 163
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalKey(self):
            return self.getTypedRuleContext(PloverDictionaryParser.NormalKeyContext,0)


        def modifierKey(self):
            return self.getTypedRuleContext(PloverDictionaryParser.ModifierKeyContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey" ):
                return visitor.visitKey(self)
            else:
                return visitor.visitChildren(self)




    def key(self):

        localctx = PloverDictionaryParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_key)
        try:
            self.state = 167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 165
                self.normalKey()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 166
                self.modifierKey()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM_0(self):
            return self.getToken(PloverDictionaryParser.NUM_0, 0)

        def NUM_1(self):
            return self.getToken(PloverDictionaryParser.NUM_1, 0)

        def NUM_2(self):
            return self.getToken(PloverDictionaryParser.NUM_2, 0)

        def NUM_3(self):
            return self.getToken(PloverDictionaryParser.NUM_3, 0)

        def NUM_4(self):
            return self.getToken(PloverDictionaryParser.NUM_4, 0)

        def NUM_5(self):
            return self.getToken(PloverDictionaryParser.NUM_5, 0)

        def NUM_6(self):
            return self.getToken(PloverDictionaryParser.NUM_6, 0)

        def NUM_7(self):
            return self.getToken(PloverDictionaryParser.NUM_7, 0)

        def NUM_8(self):
            return self.getToken(PloverDictionaryParser.NUM_8, 0)

        def NUM_9(self):
            return self.getToken(PloverDictionaryParser.NUM_9, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_normalKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalKey" ):
                listener.enterNormalKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalKey" ):
                listener.exitNormalKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalKey" ):
                return visitor.visitNormalKey(self)
            else:
                return visitor.visitChildren(self)




    def normalKey(self):

        localctx = PloverDictionaryParser.NormalKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_normalKey)
        try:
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 169
                self.match(PloverDictionaryParser.NUM_0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 170
                self.match(PloverDictionaryParser.NUM_1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 171
                self.match(PloverDictionaryParser.NUM_2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 172
                self.match(PloverDictionaryParser.NUM_3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 173
                self.match(PloverDictionaryParser.NUM_4)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 174
                self.match(PloverDictionaryParser.NUM_5)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 175
                self.match(PloverDictionaryParser.NUM_6)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 176
                self.match(PloverDictionaryParser.NUM_7)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 177
                self.match(PloverDictionaryParser.NUM_8)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 178
                self.match(PloverDictionaryParser.NUM_9)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 179
                self.match(PloverDictionaryParser.T__0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 180
                self.match(PloverDictionaryParser.T__1)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 181
                self.match(PloverDictionaryParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 182
                self.match(PloverDictionaryParser.T__3)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 183
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 184
                self.match(PloverDictionaryParser.T__5)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 185
                self.match(PloverDictionaryParser.T__6)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 186
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 187
                self.match(PloverDictionaryParser.T__8)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 188
                self.match(PloverDictionaryParser.T__9)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 189
                self.match(PloverDictionaryParser.T__10)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 190
                self.match(PloverDictionaryParser.T__11)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 191
                self.match(PloverDictionaryParser.T__12)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 192
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 193
                self.match(PloverDictionaryParser.T__14)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 194
                self.match(PloverDictionaryParser.T__15)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 195
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 196
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 197
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 198
                self.match(PloverDictionaryParser.T__19)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 199
                self.match(PloverDictionaryParser.T__20)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 200
                self.match(PloverDictionaryParser.T__21)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 201
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 202
                self.match(PloverDictionaryParser.T__23)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 203
                self.match(PloverDictionaryParser.T__24)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 204
                self.match(PloverDictionaryParser.T__0)
                self.state = 205
                self.match(PloverDictionaryParser.T__0)
                self.state = 206
                self.match(PloverDictionaryParser.T__2)
                self.state = 207
                self.match(PloverDictionaryParser.T__19)
                self.state = 208
                self.match(PloverDictionaryParser.T__18)
                self.state = 209
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 210
                self.match(PloverDictionaryParser.T__0)
                self.state = 211
                self.match(PloverDictionaryParser.T__2)
                self.state = 212
                self.match(PloverDictionaryParser.T__8)
                self.state = 213
                self.match(PloverDictionaryParser.T__16)
                self.state = 214
                self.match(PloverDictionaryParser.T__2)
                self.state = 215
                self.match(PloverDictionaryParser.T__19)
                self.state = 216
                self.match(PloverDictionaryParser.T__12)
                self.state = 217
                self.match(PloverDictionaryParser.T__5)
                self.state = 218
                self.match(PloverDictionaryParser.T__11)
                self.state = 219
                self.match(PloverDictionaryParser.T__4)
                self.state = 220
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 221
                self.match(PloverDictionaryParser.T__0)
                self.state = 222
                self.match(PloverDictionaryParser.T__2)
                self.state = 223
                self.match(PloverDictionaryParser.T__19)
                self.state = 224
                self.match(PloverDictionaryParser.T__18)
                self.state = 225
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 226
                self.match(PloverDictionaryParser.T__0)
                self.state = 227
                self.match(PloverDictionaryParser.T__3)
                self.state = 228
                self.match(PloverDictionaryParser.T__8)
                self.state = 229
                self.match(PloverDictionaryParser.T__0)
                self.state = 230
                self.match(PloverDictionaryParser.T__4)
                self.state = 231
                self.match(PloverDictionaryParser.T__16)
                self.state = 232
                self.match(PloverDictionaryParser.T__4)
                self.state = 233
                self.match(PloverDictionaryParser.T__17)
                self.state = 234
                self.match(PloverDictionaryParser.T__8)
                self.state = 235
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 236
                self.match(PloverDictionaryParser.T__0)
                self.state = 237
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 238
                self.match(PloverDictionaryParser.T__0)
                self.state = 239
                self.match(PloverDictionaryParser.T__6)
                self.state = 240
                self.match(PloverDictionaryParser.T__16)
                self.state = 241
                self.match(PloverDictionaryParser.T__0)
                self.state = 242
                self.match(PloverDictionaryParser.T__20)
                self.state = 243
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 244
                self.match(PloverDictionaryParser.T__0)
                self.state = 245
                self.match(PloverDictionaryParser.T__12)
                self.state = 246
                self.match(PloverDictionaryParser.T__15)
                self.state = 247
                self.match(PloverDictionaryParser.T__4)
                self.state = 248
                self.match(PloverDictionaryParser.T__16)
                self.state = 249
                self.match(PloverDictionaryParser.T__17)
                self.state = 250
                self.match(PloverDictionaryParser.T__0)
                self.state = 251
                self.match(PloverDictionaryParser.T__13)
                self.state = 252
                self.match(PloverDictionaryParser.T__3)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 253
                self.match(PloverDictionaryParser.T__0)
                self.state = 254
                self.match(PloverDictionaryParser.T__15)
                self.state = 255
                self.match(PloverDictionaryParser.T__14)
                self.state = 256
                self.match(PloverDictionaryParser.T__17)
                self.state = 257
                self.match(PloverDictionaryParser.T__18)
                self.state = 258
                self.match(PloverDictionaryParser.T__16)
                self.state = 259
                self.match(PloverDictionaryParser.T__14)
                self.state = 260
                self.match(PloverDictionaryParser.T__15)
                self.state = 261
                self.match(PloverDictionaryParser.T__7)
                self.state = 262
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 263
                self.match(PloverDictionaryParser.T__0)
                self.state = 264
                self.match(PloverDictionaryParser.T__16)
                self.state = 265
                self.match(PloverDictionaryParser.T__8)
                self.state = 266
                self.match(PloverDictionaryParser.T__13)
                self.state = 267
                self.match(PloverDictionaryParser.T__6)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 268
                self.match(PloverDictionaryParser.T__0)
                self.state = 269
                self.match(PloverDictionaryParser.T__17)
                self.state = 270
                self.match(PloverDictionaryParser.T__2)
                self.state = 271
                self.match(PloverDictionaryParser.T__8)
                self.state = 272
                self.match(PloverDictionaryParser.T__8)
                self.state = 273
                self.match(PloverDictionaryParser.T__2)
                self.state = 274
                self.match(PloverDictionaryParser.T__8)
                self.state = 275
                self.match(PloverDictionaryParser.T__16)
                self.state = 276
                self.match(PloverDictionaryParser.T__2)
                self.state = 277
                self.match(PloverDictionaryParser.T__19)
                self.state = 278
                self.match(PloverDictionaryParser.T__12)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 279
                self.match(PloverDictionaryParser.T__0)
                self.state = 280
                self.match(PloverDictionaryParser.T__17)
                self.state = 281
                self.match(PloverDictionaryParser.T__2)
                self.state = 282
                self.match(PloverDictionaryParser.T__8)
                self.state = 283
                self.match(PloverDictionaryParser.T__8)
                self.state = 284
                self.match(PloverDictionaryParser.T__18)
                self.state = 285
                self.match(PloverDictionaryParser.T__8)
                self.state = 286
                self.match(PloverDictionaryParser.T__11)
                self.state = 287
                self.match(PloverDictionaryParser.T__3)
                self.state = 288
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 289
                self.match(PloverDictionaryParser.T__0)
                self.state = 290
                self.match(PloverDictionaryParser.T__17)
                self.state = 291
                self.match(PloverDictionaryParser.T__18)
                self.state = 292
                self.match(PloverDictionaryParser.T__4)
                self.state = 293
                self.match(PloverDictionaryParser.T__16)
                self.state = 294
                self.match(PloverDictionaryParser.T__8)
                self.state = 295
                self.match(PloverDictionaryParser.T__17)
                self.state = 296
                self.match(PloverDictionaryParser.T__10)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 297
                self.match(PloverDictionaryParser.T__0)
                self.state = 298
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 299
                self.match(PloverDictionaryParser.T__0)
                self.state = 300
                self.match(PloverDictionaryParser.T__18)
                self.state = 301
                self.match(PloverDictionaryParser.T__8)
                self.state = 302
                self.match(PloverDictionaryParser.T__11)
                self.state = 303
                self.match(PloverDictionaryParser.T__3)
                self.state = 304
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 305
                self.match(PloverDictionaryParser.T__1)
                self.state = 306
                self.match(PloverDictionaryParser.T__0)
                self.state = 307
                self.match(PloverDictionaryParser.T__2)
                self.state = 308
                self.match(PloverDictionaryParser.T__10)
                self.state = 309
                self.match(PloverDictionaryParser.T__17)
                self.state = 310
                self.match(PloverDictionaryParser.T__11)
                self.state = 311
                self.match(PloverDictionaryParser.T__0)
                self.state = 312
                self.match(PloverDictionaryParser.T__17)
                self.state = 313
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 314
                self.match(PloverDictionaryParser.T__1)
                self.state = 315
                self.match(PloverDictionaryParser.T__0)
                self.state = 316
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 317
                self.match(PloverDictionaryParser.T__1)
                self.state = 318
                self.match(PloverDictionaryParser.T__16)
                self.state = 319
                self.match(PloverDictionaryParser.T__0)
                self.state = 320
                self.match(PloverDictionaryParser.T__2)
                self.state = 321
                self.match(PloverDictionaryParser.T__4)
                self.state = 322
                self.match(PloverDictionaryParser.T__11)
                self.state = 323
                self.match(PloverDictionaryParser.T__4)
                self.state = 324
                self.match(PloverDictionaryParser.T__5)
                self.state = 325
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 326
                self.match(PloverDictionaryParser.T__1)
                self.state = 327
                self.match(PloverDictionaryParser.T__16)
                self.state = 328
                self.match(PloverDictionaryParser.T__0)
                self.state = 329
                self.match(PloverDictionaryParser.T__2)
                self.state = 330
                self.match(PloverDictionaryParser.T__4)
                self.state = 331
                self.match(PloverDictionaryParser.T__16)
                self.state = 332
                self.match(PloverDictionaryParser.T__8)
                self.state = 333
                self.match(PloverDictionaryParser.T__6)
                self.state = 334
                self.match(PloverDictionaryParser.T__7)
                self.state = 335
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 336
                self.match(PloverDictionaryParser.T__1)
                self.state = 337
                self.match(PloverDictionaryParser.T__16)
                self.state = 338
                self.match(PloverDictionaryParser.T__0)
                self.state = 339
                self.match(PloverDictionaryParser.T__2)
                self.state = 340
                self.match(PloverDictionaryParser.T__10)
                self.state = 341
                self.match(PloverDictionaryParser.T__4)
                self.state = 342
                self.match(PloverDictionaryParser.T__18)
                self.state = 343
                self.match(PloverDictionaryParser.T__11)
                self.state = 344
                self.match(PloverDictionaryParser.T__4)
                self.state = 345
                self.match(PloverDictionaryParser.T__5)
                self.state = 346
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 347
                self.match(PloverDictionaryParser.T__1)
                self.state = 348
                self.match(PloverDictionaryParser.T__16)
                self.state = 349
                self.match(PloverDictionaryParser.T__0)
                self.state = 350
                self.match(PloverDictionaryParser.T__2)
                self.state = 351
                self.match(PloverDictionaryParser.T__10)
                self.state = 352
                self.match(PloverDictionaryParser.T__4)
                self.state = 353
                self.match(PloverDictionaryParser.T__18)
                self.state = 354
                self.match(PloverDictionaryParser.T__16)
                self.state = 355
                self.match(PloverDictionaryParser.T__8)
                self.state = 356
                self.match(PloverDictionaryParser.T__6)
                self.state = 357
                self.match(PloverDictionaryParser.T__7)
                self.state = 358
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 359
                self.match(PloverDictionaryParser.T__1)
                self.state = 360
                self.match(PloverDictionaryParser.T__16)
                self.state = 361
                self.match(PloverDictionaryParser.T__14)
                self.state = 362
                self.match(PloverDictionaryParser.T__10)
                self.state = 363
                self.match(PloverDictionaryParser.T__4)
                self.state = 364
                self.match(PloverDictionaryParser.T__13)
                self.state = 365
                self.match(PloverDictionaryParser.T__1)
                self.state = 366
                self.match(PloverDictionaryParser.T__0)
                self.state = 367
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 368
                self.match(PloverDictionaryParser.T__2)
                self.state = 369
                self.match(PloverDictionaryParser.T__2)
                self.state = 370
                self.match(PloverDictionaryParser.T__4)
                self.state = 371
                self.match(PloverDictionaryParser.T__3)
                self.state = 372
                self.match(PloverDictionaryParser.T__8)
                self.state = 373
                self.match(PloverDictionaryParser.T__11)
                self.state = 374
                self.match(PloverDictionaryParser.T__11)
                self.state = 375
                self.match(PloverDictionaryParser.T__0)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 376
                self.match(PloverDictionaryParser.T__2)
                self.state = 377
                self.match(PloverDictionaryParser.T__4)
                self.state = 378
                self.match(PloverDictionaryParser.T__3)
                self.state = 379
                self.match(PloverDictionaryParser.T__8)
                self.state = 380
                self.match(PloverDictionaryParser.T__11)
                self.state = 381
                self.match(PloverDictionaryParser.T__11)
                self.state = 382
                self.match(PloverDictionaryParser.T__0)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 383
                self.match(PloverDictionaryParser.T__2)
                self.state = 384
                self.match(PloverDictionaryParser.T__4)
                self.state = 385
                self.match(PloverDictionaryParser.T__13)
                self.state = 386
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 387
                self.match(PloverDictionaryParser.T__2)
                self.state = 388
                self.match(PloverDictionaryParser.T__11)
                self.state = 389
                self.match(PloverDictionaryParser.T__4)
                self.state = 390
                self.match(PloverDictionaryParser.T__0)
                self.state = 391
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 392
                self.match(PloverDictionaryParser.T__2)
                self.state = 393
                self.match(PloverDictionaryParser.T__14)
                self.state = 394
                self.match(PloverDictionaryParser.T__11)
                self.state = 395
                self.match(PloverDictionaryParser.T__14)
                self.state = 396
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 397
                self.match(PloverDictionaryParser.T__2)
                self.state = 398
                self.match(PloverDictionaryParser.T__14)
                self.state = 399
                self.match(PloverDictionaryParser.T__12)
                self.state = 400
                self.match(PloverDictionaryParser.T__12)
                self.state = 401
                self.match(PloverDictionaryParser.T__0)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 402
                self.match(PloverDictionaryParser.T__2)
                self.state = 403
                self.match(PloverDictionaryParser.T__14)
                self.state = 404
                self.match(PloverDictionaryParser.T__15)
                self.state = 405
                self.match(PloverDictionaryParser.T__23)
                self.state = 406
                self.match(PloverDictionaryParser.T__16)
                self.state = 407
                self.match(PloverDictionaryParser.T__8)
                self.state = 408
                self.match(PloverDictionaryParser.T__6)
                self.state = 409
                self.match(PloverDictionaryParser.T__7)
                self.state = 410
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 411
                self.match(PloverDictionaryParser.T__2)
                self.state = 412
                self.match(PloverDictionaryParser.T__19)
                self.state = 413
                self.match(PloverDictionaryParser.T__16)
                self.state = 414
                self.match(PloverDictionaryParser.T__16)
                self.state = 415
                self.match(PloverDictionaryParser.T__4)
                self.state = 416
                self.match(PloverDictionaryParser.T__13)
                self.state = 417
                self.match(PloverDictionaryParser.T__2)
                self.state = 418
                self.match(PloverDictionaryParser.T__23)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 419
                self.match(PloverDictionaryParser.T__3)
                self.state = 420
                self.match(PloverDictionaryParser.T__4)
                self.state = 421
                self.match(PloverDictionaryParser.T__6)
                self.state = 422
                self.match(PloverDictionaryParser.T__16)
                self.state = 423
                self.match(PloverDictionaryParser.T__4)
                self.state = 424
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 425
                self.match(PloverDictionaryParser.T__3)
                self.state = 426
                self.match(PloverDictionaryParser.T__8)
                self.state = 427
                self.match(PloverDictionaryParser.T__0)
                self.state = 428
                self.match(PloverDictionaryParser.T__4)
                self.state = 429
                self.match(PloverDictionaryParser.T__16)
                self.state = 430
                self.match(PloverDictionaryParser.T__4)
                self.state = 431
                self.match(PloverDictionaryParser.T__17)
                self.state = 432
                self.match(PloverDictionaryParser.T__8)
                self.state = 433
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 434
                self.match(PloverDictionaryParser.T__3)
                self.state = 435
                self.match(PloverDictionaryParser.T__8)
                self.state = 436
                self.match(PloverDictionaryParser.T__20)
                self.state = 437
                self.match(PloverDictionaryParser.T__8)
                self.state = 438
                self.match(PloverDictionaryParser.T__17)
                self.state = 439
                self.match(PloverDictionaryParser.T__8)
                self.state = 440
                self.match(PloverDictionaryParser.T__14)
                self.state = 441
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 442
                self.match(PloverDictionaryParser.T__3)
                self.state = 443
                self.match(PloverDictionaryParser.T__14)
                self.state = 444
                self.match(PloverDictionaryParser.T__11)
                self.state = 445
                self.match(PloverDictionaryParser.T__11)
                self.state = 446
                self.match(PloverDictionaryParser.T__0)
                self.state = 447
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 448
                self.match(PloverDictionaryParser.T__4)
                self.state = 449
                self.match(PloverDictionaryParser.T__0)
                self.state = 450
                self.match(PloverDictionaryParser.T__2)
                self.state = 451
                self.match(PloverDictionaryParser.T__19)
                self.state = 452
                self.match(PloverDictionaryParser.T__18)
                self.state = 453
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 454
                self.match(PloverDictionaryParser.T__4)
                self.state = 455
                self.match(PloverDictionaryParser.T__2)
                self.state = 456
                self.match(PloverDictionaryParser.T__8)
                self.state = 457
                self.match(PloverDictionaryParser.T__16)
                self.state = 458
                self.match(PloverDictionaryParser.T__2)
                self.state = 459
                self.match(PloverDictionaryParser.T__19)
                self.state = 460
                self.match(PloverDictionaryParser.T__12)
                self.state = 461
                self.match(PloverDictionaryParser.T__5)
                self.state = 462
                self.match(PloverDictionaryParser.T__11)
                self.state = 463
                self.match(PloverDictionaryParser.T__4)
                self.state = 464
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 465
                self.match(PloverDictionaryParser.T__4)
                self.state = 466
                self.match(PloverDictionaryParser.T__3)
                self.state = 467
                self.match(PloverDictionaryParser.T__8)
                self.state = 468
                self.match(PloverDictionaryParser.T__0)
                self.state = 469
                self.match(PloverDictionaryParser.T__4)
                self.state = 470
                self.match(PloverDictionaryParser.T__16)
                self.state = 471
                self.match(PloverDictionaryParser.T__4)
                self.state = 472
                self.match(PloverDictionaryParser.T__17)
                self.state = 473
                self.match(PloverDictionaryParser.T__8)
                self.state = 474
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 475
                self.match(PloverDictionaryParser.T__4)
                self.state = 476
                self.match(PloverDictionaryParser.T__6)
                self.state = 477
                self.match(PloverDictionaryParser.T__16)
                self.state = 478
                self.match(PloverDictionaryParser.T__0)
                self.state = 479
                self.match(PloverDictionaryParser.T__20)
                self.state = 480
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 481
                self.match(PloverDictionaryParser.T__4)
                self.state = 482
                self.match(PloverDictionaryParser.T__25)
                self.state = 483
                self.match(PloverDictionaryParser.T__19)
                self.state = 484
                self.match(PloverDictionaryParser.T__0)
                self.state = 485
                self.match(PloverDictionaryParser.T__11)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 486
                self.match(PloverDictionaryParser.T__4)
                self.state = 487
                self.match(PloverDictionaryParser.T__18)
                self.state = 488
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 489
                self.match(PloverDictionaryParser.T__4)
                self.state = 490
                self.match(PloverDictionaryParser.T__22)
                self.state = 491
                self.match(PloverDictionaryParser.T__2)
                self.state = 492
                self.match(PloverDictionaryParser.T__11)
                self.state = 493
                self.match(PloverDictionaryParser.T__0)
                self.state = 494
                self.match(PloverDictionaryParser.T__12)
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 495
                self.match(PloverDictionaryParser.T__4)
                self.state = 496
                self.match(PloverDictionaryParser.T__22)
                self.state = 497
                self.match(PloverDictionaryParser.T__2)
                self.state = 498
                self.match(PloverDictionaryParser.T__11)
                self.state = 499
                self.match(PloverDictionaryParser.T__0)
                self.state = 500
                self.match(PloverDictionaryParser.T__12)
                self.state = 501
                self.match(PloverDictionaryParser.T__3)
                self.state = 502
                self.match(PloverDictionaryParser.T__14)
                self.state = 503
                self.match(PloverDictionaryParser.T__21)
                self.state = 504
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 505
                self.match(PloverDictionaryParser.T__6)
                self.state = 506
                self.match(PloverDictionaryParser.T__16)
                self.state = 507
                self.match(PloverDictionaryParser.T__0)
                self.state = 508
                self.match(PloverDictionaryParser.T__20)
                self.state = 509
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 510
                self.match(PloverDictionaryParser.T__6)
                self.state = 511
                self.match(PloverDictionaryParser.T__16)
                self.state = 512
                self.match(PloverDictionaryParser.T__4)
                self.state = 513
                self.match(PloverDictionaryParser.T__0)
                self.state = 514
                self.match(PloverDictionaryParser.T__18)
                self.state = 515
                self.match(PloverDictionaryParser.T__4)
                self.state = 516
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 517
                self.match(PloverDictionaryParser.T__6)
                self.state = 518
                self.match(PloverDictionaryParser.T__19)
                self.state = 519
                self.match(PloverDictionaryParser.T__8)
                self.state = 520
                self.match(PloverDictionaryParser.T__11)
                self.state = 521
                self.match(PloverDictionaryParser.T__11)
                self.state = 522
                self.match(PloverDictionaryParser.T__4)
                self.state = 523
                self.match(PloverDictionaryParser.T__12)
                self.state = 524
                self.match(PloverDictionaryParser.T__14)
                self.state = 525
                self.match(PloverDictionaryParser.T__18)
                self.state = 526
                self.match(PloverDictionaryParser.T__11)
                self.state = 527
                self.match(PloverDictionaryParser.T__4)
                self.state = 528
                self.match(PloverDictionaryParser.T__5)
                self.state = 529
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 530
                self.match(PloverDictionaryParser.T__6)
                self.state = 531
                self.match(PloverDictionaryParser.T__19)
                self.state = 532
                self.match(PloverDictionaryParser.T__8)
                self.state = 533
                self.match(PloverDictionaryParser.T__11)
                self.state = 534
                self.match(PloverDictionaryParser.T__11)
                self.state = 535
                self.match(PloverDictionaryParser.T__4)
                self.state = 536
                self.match(PloverDictionaryParser.T__12)
                self.state = 537
                self.match(PloverDictionaryParser.T__14)
                self.state = 538
                self.match(PloverDictionaryParser.T__18)
                self.state = 539
                self.match(PloverDictionaryParser.T__16)
                self.state = 540
                self.match(PloverDictionaryParser.T__8)
                self.state = 541
                self.match(PloverDictionaryParser.T__6)
                self.state = 542
                self.match(PloverDictionaryParser.T__7)
                self.state = 543
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 544
                self.match(PloverDictionaryParser.T__7)
                self.state = 545
                self.match(PloverDictionaryParser.T__23)
                self.state = 546
                self.match(PloverDictionaryParser.T__15)
                self.state = 547
                self.match(PloverDictionaryParser.T__7)
                self.state = 548
                self.match(PloverDictionaryParser.T__4)
                self.state = 549
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 550
                self.match(PloverDictionaryParser.T__8)
                self.state = 551
                self.match(PloverDictionaryParser.T__0)
                self.state = 552
                self.match(PloverDictionaryParser.T__2)
                self.state = 553
                self.match(PloverDictionaryParser.T__19)
                self.state = 554
                self.match(PloverDictionaryParser.T__18)
                self.state = 555
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 556
                self.match(PloverDictionaryParser.T__8)
                self.state = 557
                self.match(PloverDictionaryParser.T__2)
                self.state = 558
                self.match(PloverDictionaryParser.T__8)
                self.state = 559
                self.match(PloverDictionaryParser.T__16)
                self.state = 560
                self.match(PloverDictionaryParser.T__2)
                self.state = 561
                self.match(PloverDictionaryParser.T__19)
                self.state = 562
                self.match(PloverDictionaryParser.T__12)
                self.state = 563
                self.match(PloverDictionaryParser.T__5)
                self.state = 564
                self.match(PloverDictionaryParser.T__11)
                self.state = 565
                self.match(PloverDictionaryParser.T__4)
                self.state = 566
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 567
                self.match(PloverDictionaryParser.T__8)
                self.state = 568
                self.match(PloverDictionaryParser.T__3)
                self.state = 569
                self.match(PloverDictionaryParser.T__8)
                self.state = 570
                self.match(PloverDictionaryParser.T__0)
                self.state = 571
                self.match(PloverDictionaryParser.T__4)
                self.state = 572
                self.match(PloverDictionaryParser.T__16)
                self.state = 573
                self.match(PloverDictionaryParser.T__4)
                self.state = 574
                self.match(PloverDictionaryParser.T__17)
                self.state = 575
                self.match(PloverDictionaryParser.T__8)
                self.state = 576
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 577
                self.match(PloverDictionaryParser.T__8)
                self.state = 578
                self.match(PloverDictionaryParser.T__6)
                self.state = 579
                self.match(PloverDictionaryParser.T__16)
                self.state = 580
                self.match(PloverDictionaryParser.T__0)
                self.state = 581
                self.match(PloverDictionaryParser.T__20)
                self.state = 582
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 583
                self.match(PloverDictionaryParser.T__11)
                self.state = 584
                self.match(PloverDictionaryParser.T__4)
                self.state = 585
                self.match(PloverDictionaryParser.T__17)
                self.state = 586
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 587
                self.match(PloverDictionaryParser.T__12)
                self.state = 588
                self.match(PloverDictionaryParser.T__0)
                self.state = 589
                self.match(PloverDictionaryParser.T__2)
                self.state = 590
                self.match(PloverDictionaryParser.T__16)
                self.state = 591
                self.match(PloverDictionaryParser.T__14)
                self.state = 592
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 593
                self.match(PloverDictionaryParser.T__12)
                self.state = 594
                self.match(PloverDictionaryParser.T__0)
                self.state = 595
                self.match(PloverDictionaryParser.T__17)
                self.state = 596
                self.match(PloverDictionaryParser.T__2)
                self.state = 597
                self.match(PloverDictionaryParser.T__19)
                self.state = 598
                self.match(PloverDictionaryParser.T__11)
                self.state = 599
                self.match(PloverDictionaryParser.T__8)
                self.state = 600
                self.match(PloverDictionaryParser.T__13)
                self.state = 601
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 602
                self.match(PloverDictionaryParser.T__12)
                self.state = 603
                self.match(PloverDictionaryParser.T__8)
                self.state = 604
                self.match(PloverDictionaryParser.T__13)
                self.state = 605
                self.match(PloverDictionaryParser.T__19)
                self.state = 606
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 607
                self.match(PloverDictionaryParser.T__12)
                self.state = 608
                self.match(PloverDictionaryParser.T__19)
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 609
                self.match(PloverDictionaryParser.T__12)
                self.state = 610
                self.match(PloverDictionaryParser.T__19)
                self.state = 611
                self.match(PloverDictionaryParser.T__11)
                self.state = 612
                self.match(PloverDictionaryParser.T__18)
                self.state = 613
                self.match(PloverDictionaryParser.T__8)
                self.state = 614
                self.match(PloverDictionaryParser.T__15)
                self.state = 615
                self.match(PloverDictionaryParser.T__11)
                self.state = 616
                self.match(PloverDictionaryParser.T__23)
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 617
                self.match(PloverDictionaryParser.T__13)
                self.state = 618
                self.match(PloverDictionaryParser.T__14)
                self.state = 619
                self.match(PloverDictionaryParser.T__1)
                self.state = 620
                self.match(PloverDictionaryParser.T__16)
                self.state = 621
                self.match(PloverDictionaryParser.T__4)
                self.state = 622
                self.match(PloverDictionaryParser.T__0)
                self.state = 623
                self.match(PloverDictionaryParser.T__10)
                self.state = 624
                self.match(PloverDictionaryParser.T__17)
                self.state = 625
                self.match(PloverDictionaryParser.T__15)
                self.state = 626
                self.match(PloverDictionaryParser.T__0)
                self.state = 627
                self.match(PloverDictionaryParser.T__2)
                self.state = 628
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 629
                self.match(PloverDictionaryParser.T__13)
                self.state = 630
                self.match(PloverDictionaryParser.T__14)
                self.state = 631
                self.match(PloverDictionaryParser.T__18)
                self.state = 632
                self.match(PloverDictionaryParser.T__17)
                self.state = 633
                self.match(PloverDictionaryParser.T__8)
                self.state = 634
                self.match(PloverDictionaryParser.T__6)
                self.state = 635
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 636
                self.match(PloverDictionaryParser.T__13)
                self.state = 637
                self.match(PloverDictionaryParser.T__18)
                self.state = 638
                self.match(PloverDictionaryParser.T__8)
                self.state = 639
                self.match(PloverDictionaryParser.T__11)
                self.state = 640
                self.match(PloverDictionaryParser.T__3)
                self.state = 641
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 642
                self.match(PloverDictionaryParser.T__13)
                self.state = 643
                self.match(PloverDictionaryParser.T__19)
                self.state = 644
                self.match(PloverDictionaryParser.T__12)
                self.state = 645
                self.match(PloverDictionaryParser.T__1)
                self.state = 646
                self.match(PloverDictionaryParser.T__4)
                self.state = 647
                self.match(PloverDictionaryParser.T__16)
                self.state = 648
                self.match(PloverDictionaryParser.T__17)
                self.state = 649
                self.match(PloverDictionaryParser.T__8)
                self.state = 650
                self.match(PloverDictionaryParser.T__6)
                self.state = 651
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 652
                self.match(PloverDictionaryParser.T__14)
                self.state = 653
                self.match(PloverDictionaryParser.T__0)
                self.state = 654
                self.match(PloverDictionaryParser.T__2)
                self.state = 655
                self.match(PloverDictionaryParser.T__19)
                self.state = 656
                self.match(PloverDictionaryParser.T__18)
                self.state = 657
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 658
                self.match(PloverDictionaryParser.T__14)
                self.state = 659
                self.match(PloverDictionaryParser.T__2)
                self.state = 660
                self.match(PloverDictionaryParser.T__8)
                self.state = 661
                self.match(PloverDictionaryParser.T__16)
                self.state = 662
                self.match(PloverDictionaryParser.T__2)
                self.state = 663
                self.match(PloverDictionaryParser.T__19)
                self.state = 664
                self.match(PloverDictionaryParser.T__12)
                self.state = 665
                self.match(PloverDictionaryParser.T__5)
                self.state = 666
                self.match(PloverDictionaryParser.T__11)
                self.state = 667
                self.match(PloverDictionaryParser.T__4)
                self.state = 668
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 669
                self.match(PloverDictionaryParser.T__14)
                self.state = 670
                self.match(PloverDictionaryParser.T__3)
                self.state = 671
                self.match(PloverDictionaryParser.T__8)
                self.state = 672
                self.match(PloverDictionaryParser.T__0)
                self.state = 673
                self.match(PloverDictionaryParser.T__4)
                self.state = 674
                self.match(PloverDictionaryParser.T__16)
                self.state = 675
                self.match(PloverDictionaryParser.T__4)
                self.state = 676
                self.match(PloverDictionaryParser.T__17)
                self.state = 677
                self.match(PloverDictionaryParser.T__8)
                self.state = 678
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 679
                self.match(PloverDictionaryParser.T__14)
                self.state = 680
                self.match(PloverDictionaryParser.T__6)
                self.state = 681
                self.match(PloverDictionaryParser.T__16)
                self.state = 682
                self.match(PloverDictionaryParser.T__0)
                self.state = 683
                self.match(PloverDictionaryParser.T__20)
                self.state = 684
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 685
                self.match(PloverDictionaryParser.T__14)
                self.state = 686
                self.match(PloverDictionaryParser.T__13)
                self.state = 687
                self.match(PloverDictionaryParser.T__4)
                self.state = 688
                self.match(PloverDictionaryParser.T__7)
                self.state = 689
                self.match(PloverDictionaryParser.T__0)
                self.state = 690
                self.match(PloverDictionaryParser.T__11)
                self.state = 691
                self.match(PloverDictionaryParser.T__5)
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 692
                self.match(PloverDictionaryParser.T__14)
                self.state = 693
                self.match(PloverDictionaryParser.T__13)
                self.state = 694
                self.match(PloverDictionaryParser.T__4)
                self.state = 695
                self.match(PloverDictionaryParser.T__25)
                self.state = 696
                self.match(PloverDictionaryParser.T__19)
                self.state = 697
                self.match(PloverDictionaryParser.T__0)
                self.state = 698
                self.match(PloverDictionaryParser.T__16)
                self.state = 699
                self.match(PloverDictionaryParser.T__18)
                self.state = 700
                self.match(PloverDictionaryParser.T__4)
                self.state = 701
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 702
                self.match(PloverDictionaryParser.T__14)
                self.state = 703
                self.match(PloverDictionaryParser.T__13)
                self.state = 704
                self.match(PloverDictionaryParser.T__4)
                self.state = 705
                self.match(PloverDictionaryParser.T__17)
                self.state = 706
                self.match(PloverDictionaryParser.T__19)
                self.state = 707
                self.match(PloverDictionaryParser.T__15)
                self.state = 708
                self.match(PloverDictionaryParser.T__4)
                self.state = 709
                self.match(PloverDictionaryParser.T__16)
                self.state = 710
                self.match(PloverDictionaryParser.T__8)
                self.state = 711
                self.match(PloverDictionaryParser.T__14)
                self.state = 712
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 713
                self.match(PloverDictionaryParser.T__14)
                self.state = 714
                self.match(PloverDictionaryParser.T__14)
                self.state = 715
                self.match(PloverDictionaryParser.T__1)
                self.state = 716
                self.match(PloverDictionaryParser.T__11)
                self.state = 717
                self.match(PloverDictionaryParser.T__8)
                self.state = 718
                self.match(PloverDictionaryParser.T__25)
                self.state = 719
                self.match(PloverDictionaryParser.T__19)
                self.state = 720
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 721
                self.match(PloverDictionaryParser.T__14)
                self.state = 722
                self.match(PloverDictionaryParser.T__16)
                self.state = 723
                self.match(PloverDictionaryParser.T__3)
                self.state = 724
                self.match(PloverDictionaryParser.T__5)
                self.state = 725
                self.match(PloverDictionaryParser.T__4)
                self.state = 726
                self.match(PloverDictionaryParser.T__12)
                self.state = 727
                self.match(PloverDictionaryParser.T__8)
                self.state = 728
                self.match(PloverDictionaryParser.T__13)
                self.state = 729
                self.match(PloverDictionaryParser.T__8)
                self.state = 730
                self.match(PloverDictionaryParser.T__13)
                self.state = 731
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 732
                self.match(PloverDictionaryParser.T__14)
                self.state = 733
                self.match(PloverDictionaryParser.T__17)
                self.state = 734
                self.match(PloverDictionaryParser.T__11)
                self.state = 735
                self.match(PloverDictionaryParser.T__0)
                self.state = 736
                self.match(PloverDictionaryParser.T__17)
                self.state = 737
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 738
                self.match(PloverDictionaryParser.T__14)
                self.state = 739
                self.match(PloverDictionaryParser.T__18)
                self.state = 740
                self.match(PloverDictionaryParser.T__8)
                self.state = 741
                self.match(PloverDictionaryParser.T__11)
                self.state = 742
                self.match(PloverDictionaryParser.T__3)
                self.state = 743
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 744
                self.match(PloverDictionaryParser.T__15)
                self.state = 745
                self.match(PloverDictionaryParser.T__0)
                self.state = 746
                self.match(PloverDictionaryParser.T__16)
                self.state = 747
                self.match(PloverDictionaryParser.T__0)
                self.state = 748
                self.match(PloverDictionaryParser.T__6)
                self.state = 749
                self.match(PloverDictionaryParser.T__16)
                self.state = 750
                self.match(PloverDictionaryParser.T__0)
                self.state = 751
                self.match(PloverDictionaryParser.T__15)
                self.state = 752
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 753
                self.match(PloverDictionaryParser.T__15)
                self.state = 754
                self.match(PloverDictionaryParser.T__0)
                self.state = 755
                self.match(PloverDictionaryParser.T__16)
                self.state = 756
                self.match(PloverDictionaryParser.T__4)
                self.state = 757
                self.match(PloverDictionaryParser.T__13)
                self.state = 758
                self.match(PloverDictionaryParser.T__11)
                self.state = 759
                self.match(PloverDictionaryParser.T__4)
                self.state = 760
                self.match(PloverDictionaryParser.T__5)
                self.state = 761
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 762
                self.match(PloverDictionaryParser.T__15)
                self.state = 763
                self.match(PloverDictionaryParser.T__0)
                self.state = 764
                self.match(PloverDictionaryParser.T__16)
                self.state = 765
                self.match(PloverDictionaryParser.T__4)
                self.state = 766
                self.match(PloverDictionaryParser.T__13)
                self.state = 767
                self.match(PloverDictionaryParser.T__16)
                self.state = 768
                self.match(PloverDictionaryParser.T__8)
                self.state = 769
                self.match(PloverDictionaryParser.T__6)
                self.state = 770
                self.match(PloverDictionaryParser.T__7)
                self.state = 771
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 772
                self.match(PloverDictionaryParser.T__15)
                self.state = 773
                self.match(PloverDictionaryParser.T__4)
                self.state = 774
                self.match(PloverDictionaryParser.T__16)
                self.state = 775
                self.match(PloverDictionaryParser.T__2)
                self.state = 776
                self.match(PloverDictionaryParser.T__4)
                self.state = 777
                self.match(PloverDictionaryParser.T__13)
                self.state = 778
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 779
                self.match(PloverDictionaryParser.T__15)
                self.state = 780
                self.match(PloverDictionaryParser.T__4)
                self.state = 781
                self.match(PloverDictionaryParser.T__16)
                self.state = 782
                self.match(PloverDictionaryParser.T__8)
                self.state = 783
                self.match(PloverDictionaryParser.T__14)
                self.state = 784
                self.match(PloverDictionaryParser.T__3)
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 785
                self.match(PloverDictionaryParser.T__15)
                self.state = 786
                self.match(PloverDictionaryParser.T__4)
                self.state = 787
                self.match(PloverDictionaryParser.T__16)
                self.state = 788
                self.match(PloverDictionaryParser.T__8)
                self.state = 789
                self.match(PloverDictionaryParser.T__14)
                self.state = 790
                self.match(PloverDictionaryParser.T__3)
                self.state = 791
                self.match(PloverDictionaryParser.T__2)
                self.state = 792
                self.match(PloverDictionaryParser.T__4)
                self.state = 793
                self.match(PloverDictionaryParser.T__13)
                self.state = 794
                self.match(PloverDictionaryParser.T__18)
                self.state = 795
                self.match(PloverDictionaryParser.T__4)
                self.state = 796
                self.match(PloverDictionaryParser.T__16)
                self.state = 797
                self.match(PloverDictionaryParser.T__4)
                self.state = 798
                self.match(PloverDictionaryParser.T__3)
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 799
                self.match(PloverDictionaryParser.T__15)
                self.state = 800
                self.match(PloverDictionaryParser.T__11)
                self.state = 801
                self.match(PloverDictionaryParser.T__19)
                self.state = 802
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 803
                self.match(PloverDictionaryParser.T__15)
                self.state = 804
                self.match(PloverDictionaryParser.T__11)
                self.state = 805
                self.match(PloverDictionaryParser.T__19)
                self.state = 806
                self.match(PloverDictionaryParser.T__17)
                self.state = 807
                self.match(PloverDictionaryParser.T__12)
                self.state = 808
                self.match(PloverDictionaryParser.T__8)
                self.state = 809
                self.match(PloverDictionaryParser.T__13)
                self.state = 810
                self.match(PloverDictionaryParser.T__19)
                self.state = 811
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 812
                self.match(PloverDictionaryParser.T__25)
                self.state = 813
                self.match(PloverDictionaryParser.T__19)
                self.state = 814
                self.match(PloverDictionaryParser.T__4)
                self.state = 815
                self.match(PloverDictionaryParser.T__17)
                self.state = 816
                self.match(PloverDictionaryParser.T__18)
                self.state = 817
                self.match(PloverDictionaryParser.T__8)
                self.state = 818
                self.match(PloverDictionaryParser.T__14)
                self.state = 819
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 820
                self.match(PloverDictionaryParser.T__25)
                self.state = 821
                self.match(PloverDictionaryParser.T__19)
                self.state = 822
                self.match(PloverDictionaryParser.T__4)
                self.state = 823
                self.match(PloverDictionaryParser.T__17)
                self.state = 824
                self.match(PloverDictionaryParser.T__18)
                self.state = 825
                self.match(PloverDictionaryParser.T__8)
                self.state = 826
                self.match(PloverDictionaryParser.T__14)
                self.state = 827
                self.match(PloverDictionaryParser.T__13)
                self.state = 828
                self.match(PloverDictionaryParser.T__3)
                self.state = 829
                self.match(PloverDictionaryParser.T__14)
                self.state = 830
                self.match(PloverDictionaryParser.T__21)
                self.state = 831
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 832
                self.match(PloverDictionaryParser.T__25)
                self.state = 833
                self.match(PloverDictionaryParser.T__19)
                self.state = 834
                self.match(PloverDictionaryParser.T__14)
                self.state = 835
                self.match(PloverDictionaryParser.T__18)
                self.state = 836
                self.match(PloverDictionaryParser.T__4)
                self.state = 837
                self.match(PloverDictionaryParser.T__3)
                self.state = 838
                self.match(PloverDictionaryParser.T__1)
                self.state = 839
                self.match(PloverDictionaryParser.T__11)
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 840
                self.match(PloverDictionaryParser.T__25)
                self.state = 841
                self.match(PloverDictionaryParser.T__19)
                self.state = 842
                self.match(PloverDictionaryParser.T__14)
                self.state = 843
                self.match(PloverDictionaryParser.T__18)
                self.state = 844
                self.match(PloverDictionaryParser.T__4)
                self.state = 845
                self.match(PloverDictionaryParser.T__11)
                self.state = 846
                self.match(PloverDictionaryParser.T__4)
                self.state = 847
                self.match(PloverDictionaryParser.T__5)
                self.state = 848
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 849
                self.match(PloverDictionaryParser.T__25)
                self.state = 850
                self.match(PloverDictionaryParser.T__19)
                self.state = 851
                self.match(PloverDictionaryParser.T__14)
                self.state = 852
                self.match(PloverDictionaryParser.T__18)
                self.state = 853
                self.match(PloverDictionaryParser.T__4)
                self.state = 854
                self.match(PloverDictionaryParser.T__16)
                self.state = 855
                self.match(PloverDictionaryParser.T__8)
                self.state = 856
                self.match(PloverDictionaryParser.T__6)
                self.state = 857
                self.match(PloverDictionaryParser.T__7)
                self.state = 858
                self.match(PloverDictionaryParser.T__18)
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 859
                self.match(PloverDictionaryParser.T__16)
                self.state = 860
                self.match(PloverDictionaryParser.T__4)
                self.state = 861
                self.match(PloverDictionaryParser.T__6)
                self.state = 862
                self.match(PloverDictionaryParser.T__8)
                self.state = 863
                self.match(PloverDictionaryParser.T__17)
                self.state = 864
                self.match(PloverDictionaryParser.T__18)
                self.state = 865
                self.match(PloverDictionaryParser.T__4)
                self.state = 866
                self.match(PloverDictionaryParser.T__16)
                self.state = 867
                self.match(PloverDictionaryParser.T__4)
                self.state = 868
                self.match(PloverDictionaryParser.T__3)
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 869
                self.match(PloverDictionaryParser.T__16)
                self.state = 870
                self.match(PloverDictionaryParser.T__4)
                self.state = 871
                self.match(PloverDictionaryParser.T__18)
                self.state = 872
                self.match(PloverDictionaryParser.T__19)
                self.state = 873
                self.match(PloverDictionaryParser.T__16)
                self.state = 874
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 875
                self.match(PloverDictionaryParser.T__17)
                self.state = 876
                self.match(PloverDictionaryParser.T__4)
                self.state = 877
                self.match(PloverDictionaryParser.T__2)
                self.state = 878
                self.match(PloverDictionaryParser.T__18)
                self.state = 879
                self.match(PloverDictionaryParser.T__8)
                self.state = 880
                self.match(PloverDictionaryParser.T__14)
                self.state = 881
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 882
                self.match(PloverDictionaryParser.T__17)
                self.state = 883
                self.match(PloverDictionaryParser.T__4)
                self.state = 884
                self.match(PloverDictionaryParser.T__12)
                self.state = 885
                self.match(PloverDictionaryParser.T__8)
                self.state = 886
                self.match(PloverDictionaryParser.T__2)
                self.state = 887
                self.match(PloverDictionaryParser.T__14)
                self.state = 888
                self.match(PloverDictionaryParser.T__11)
                self.state = 889
                self.match(PloverDictionaryParser.T__14)
                self.state = 890
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 891
                self.match(PloverDictionaryParser.T__17)
                self.state = 892
                self.match(PloverDictionaryParser.T__11)
                self.state = 893
                self.match(PloverDictionaryParser.T__0)
                self.state = 894
                self.match(PloverDictionaryParser.T__17)
                self.state = 895
                self.match(PloverDictionaryParser.T__7)
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 896
                self.match(PloverDictionaryParser.T__17)
                self.state = 897
                self.match(PloverDictionaryParser.T__15)
                self.state = 898
                self.match(PloverDictionaryParser.T__0)
                self.state = 899
                self.match(PloverDictionaryParser.T__2)
                self.state = 900
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 901
                self.match(PloverDictionaryParser.T__17)
                self.state = 902
                self.match(PloverDictionaryParser.T__17)
                self.state = 903
                self.match(PloverDictionaryParser.T__7)
                self.state = 904
                self.match(PloverDictionaryParser.T__0)
                self.state = 905
                self.match(PloverDictionaryParser.T__16)
                self.state = 906
                self.match(PloverDictionaryParser.T__15)
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 907
                self.match(PloverDictionaryParser.T__17)
                self.state = 908
                self.match(PloverDictionaryParser.T__18)
                self.state = 909
                self.match(PloverDictionaryParser.T__4)
                self.state = 910
                self.match(PloverDictionaryParser.T__16)
                self.state = 911
                self.match(PloverDictionaryParser.T__11)
                self.state = 912
                self.match(PloverDictionaryParser.T__8)
                self.state = 913
                self.match(PloverDictionaryParser.T__13)
                self.state = 914
                self.match(PloverDictionaryParser.T__6)
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 915
                self.match(PloverDictionaryParser.T__18)
                self.state = 916
                self.match(PloverDictionaryParser.T__0)
                self.state = 917
                self.match(PloverDictionaryParser.T__1)
                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 918
                self.match(PloverDictionaryParser.T__18)
                self.state = 919
                self.match(PloverDictionaryParser.T__7)
                self.state = 920
                self.match(PloverDictionaryParser.T__14)
                self.state = 921
                self.match(PloverDictionaryParser.T__16)
                self.state = 922
                self.match(PloverDictionaryParser.T__13)
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 923
                self.match(PloverDictionaryParser.T__18)
                self.state = 924
                self.match(PloverDictionaryParser.T__7)
                self.state = 925
                self.match(PloverDictionaryParser.T__16)
                self.state = 926
                self.match(PloverDictionaryParser.T__4)
                self.state = 927
                self.match(PloverDictionaryParser.T__4)
                self.state = 928
                self.match(PloverDictionaryParser.T__25)
                self.state = 929
                self.match(PloverDictionaryParser.T__19)
                self.state = 930
                self.match(PloverDictionaryParser.T__0)
                self.state = 931
                self.match(PloverDictionaryParser.T__16)
                self.state = 932
                self.match(PloverDictionaryParser.T__18)
                self.state = 933
                self.match(PloverDictionaryParser.T__4)
                self.state = 934
                self.match(PloverDictionaryParser.T__16)
                self.state = 935
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 936
                self.match(PloverDictionaryParser.T__18)
                self.state = 937
                self.match(PloverDictionaryParser.T__7)
                self.state = 938
                self.match(PloverDictionaryParser.T__16)
                self.state = 939
                self.match(PloverDictionaryParser.T__4)
                self.state = 940
                self.match(PloverDictionaryParser.T__4)
                self.state = 941
                self.match(PloverDictionaryParser.T__17)
                self.state = 942
                self.match(PloverDictionaryParser.T__19)
                self.state = 943
                self.match(PloverDictionaryParser.T__15)
                self.state = 944
                self.match(PloverDictionaryParser.T__4)
                self.state = 945
                self.match(PloverDictionaryParser.T__16)
                self.state = 946
                self.match(PloverDictionaryParser.T__8)
                self.state = 947
                self.match(PloverDictionaryParser.T__14)
                self.state = 948
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 949
                self.match(PloverDictionaryParser.T__18)
                self.state = 950
                self.match(PloverDictionaryParser.T__21)
                self.state = 951
                self.match(PloverDictionaryParser.T__14)
                self.state = 952
                self.match(PloverDictionaryParser.T__17)
                self.state = 953
                self.match(PloverDictionaryParser.T__19)
                self.state = 954
                self.match(PloverDictionaryParser.T__15)
                self.state = 955
                self.match(PloverDictionaryParser.T__4)
                self.state = 956
                self.match(PloverDictionaryParser.T__16)
                self.state = 957
                self.match(PloverDictionaryParser.T__8)
                self.state = 958
                self.match(PloverDictionaryParser.T__14)
                self.state = 959
                self.match(PloverDictionaryParser.T__16)
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 960
                self.match(PloverDictionaryParser.T__19)
                self.state = 961
                self.match(PloverDictionaryParser.T__0)
                self.state = 962
                self.match(PloverDictionaryParser.T__2)
                self.state = 963
                self.match(PloverDictionaryParser.T__19)
                self.state = 964
                self.match(PloverDictionaryParser.T__18)
                self.state = 965
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 966
                self.match(PloverDictionaryParser.T__19)
                self.state = 967
                self.match(PloverDictionaryParser.T__2)
                self.state = 968
                self.match(PloverDictionaryParser.T__8)
                self.state = 969
                self.match(PloverDictionaryParser.T__16)
                self.state = 970
                self.match(PloverDictionaryParser.T__2)
                self.state = 971
                self.match(PloverDictionaryParser.T__19)
                self.state = 972
                self.match(PloverDictionaryParser.T__12)
                self.state = 973
                self.match(PloverDictionaryParser.T__5)
                self.state = 974
                self.match(PloverDictionaryParser.T__11)
                self.state = 975
                self.match(PloverDictionaryParser.T__4)
                self.state = 976
                self.match(PloverDictionaryParser.T__22)
                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 977
                self.match(PloverDictionaryParser.T__19)
                self.state = 978
                self.match(PloverDictionaryParser.T__3)
                self.state = 979
                self.match(PloverDictionaryParser.T__8)
                self.state = 980
                self.match(PloverDictionaryParser.T__0)
                self.state = 981
                self.match(PloverDictionaryParser.T__4)
                self.state = 982
                self.match(PloverDictionaryParser.T__16)
                self.state = 983
                self.match(PloverDictionaryParser.T__4)
                self.state = 984
                self.match(PloverDictionaryParser.T__17)
                self.state = 985
                self.match(PloverDictionaryParser.T__8)
                self.state = 986
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 987
                self.match(PloverDictionaryParser.T__19)
                self.state = 988
                self.match(PloverDictionaryParser.T__6)
                self.state = 989
                self.match(PloverDictionaryParser.T__16)
                self.state = 990
                self.match(PloverDictionaryParser.T__0)
                self.state = 991
                self.match(PloverDictionaryParser.T__20)
                self.state = 992
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 993
                self.match(PloverDictionaryParser.T__19)
                self.state = 994
                self.match(PloverDictionaryParser.T__13)
                self.state = 995
                self.match(PloverDictionaryParser.T__3)
                self.state = 996
                self.match(PloverDictionaryParser.T__4)
                self.state = 997
                self.match(PloverDictionaryParser.T__16)
                self.state = 998
                self.match(PloverDictionaryParser.T__17)
                self.state = 999
                self.match(PloverDictionaryParser.T__2)
                self.state = 1000
                self.match(PloverDictionaryParser.T__14)
                self.state = 1001
                self.match(PloverDictionaryParser.T__16)
                self.state = 1002
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 1003
                self.match(PloverDictionaryParser.T__23)
                self.state = 1004
                self.match(PloverDictionaryParser.T__0)
                self.state = 1005
                self.match(PloverDictionaryParser.T__2)
                self.state = 1006
                self.match(PloverDictionaryParser.T__19)
                self.state = 1007
                self.match(PloverDictionaryParser.T__18)
                self.state = 1008
                self.match(PloverDictionaryParser.T__4)
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 1009
                self.match(PloverDictionaryParser.T__23)
                self.state = 1010
                self.match(PloverDictionaryParser.T__3)
                self.state = 1011
                self.match(PloverDictionaryParser.T__8)
                self.state = 1012
                self.match(PloverDictionaryParser.T__0)
                self.state = 1013
                self.match(PloverDictionaryParser.T__4)
                self.state = 1014
                self.match(PloverDictionaryParser.T__16)
                self.state = 1015
                self.match(PloverDictionaryParser.T__4)
                self.state = 1016
                self.match(PloverDictionaryParser.T__17)
                self.state = 1017
                self.match(PloverDictionaryParser.T__8)
                self.state = 1018
                self.match(PloverDictionaryParser.T__17)
                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 1019
                self.match(PloverDictionaryParser.T__23)
                self.state = 1020
                self.match(PloverDictionaryParser.T__4)
                self.state = 1021
                self.match(PloverDictionaryParser.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(PloverDictionaryParser.S, 0)

        def L(self):
            return self.getToken(PloverDictionaryParser.L, 0)

        def key(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.KeyContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.KeyContext,i)


        def R(self):
            return self.getToken(PloverDictionaryParser.R, 0)

        def A(self):
            return self.getToken(PloverDictionaryParser.A, 0)

        def B(self):
            return self.getToken(PloverDictionaryParser.B, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_modifierKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierKey" ):
                listener.enterModifierKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierKey" ):
                listener.exitModifierKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierKey" ):
                return visitor.visitModifierKey(self)
            else:
                return visitor.visitChildren(self)




    def modifierKey(self):

        localctx = PloverDictionaryParser.ModifierKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_modifierKey)
        self._la = 0 # Token type
        try:
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(PloverDictionaryParser.S)
                self.state = 1025
                self.match(PloverDictionaryParser.T__7)
                self.state = 1026
                self.match(PloverDictionaryParser.T__8)
                self.state = 1027
                self.match(PloverDictionaryParser.T__5)
                self.state = 1028
                self.match(PloverDictionaryParser.T__18)
                self.state = 1029
                self.match(PloverDictionaryParser.T__26)
                self.state = 1030
                self.match(PloverDictionaryParser.L)
                self.state = 1031
                self.match(PloverDictionaryParser.T__27)
                self.state = 1033 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1032
                    self.key()
                    self.state = 1035 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1037
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self.match(PloverDictionaryParser.S)
                self.state = 1040
                self.match(PloverDictionaryParser.T__7)
                self.state = 1041
                self.match(PloverDictionaryParser.T__8)
                self.state = 1042
                self.match(PloverDictionaryParser.T__5)
                self.state = 1043
                self.match(PloverDictionaryParser.T__18)
                self.state = 1044
                self.match(PloverDictionaryParser.T__26)
                self.state = 1045
                self.match(PloverDictionaryParser.R)
                self.state = 1046
                self.match(PloverDictionaryParser.T__27)
                self.state = 1048 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1047
                    self.key()
                    self.state = 1050 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1052
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.match(PloverDictionaryParser.T__17)
                self.state = 1055
                self.match(PloverDictionaryParser.T__7)
                self.state = 1056
                self.match(PloverDictionaryParser.T__8)
                self.state = 1057
                self.match(PloverDictionaryParser.T__5)
                self.state = 1058
                self.match(PloverDictionaryParser.T__18)
                self.state = 1059
                self.match(PloverDictionaryParser.T__27)
                self.state = 1061 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1060
                    self.key()
                    self.state = 1063 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1065
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1067
                self.match(PloverDictionaryParser.T__29)
                self.state = 1068
                self.match(PloverDictionaryParser.T__14)
                self.state = 1069
                self.match(PloverDictionaryParser.T__13)
                self.state = 1070
                self.match(PloverDictionaryParser.T__18)
                self.state = 1071
                self.match(PloverDictionaryParser.T__16)
                self.state = 1072
                self.match(PloverDictionaryParser.T__14)
                self.state = 1073
                self.match(PloverDictionaryParser.T__11)
                self.state = 1074
                self.match(PloverDictionaryParser.T__26)
                self.state = 1075
                self.match(PloverDictionaryParser.L)
                self.state = 1076
                self.match(PloverDictionaryParser.T__27)
                self.state = 1078 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1077
                    self.key()
                    self.state = 1080 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1082
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1084
                self.match(PloverDictionaryParser.T__29)
                self.state = 1085
                self.match(PloverDictionaryParser.T__14)
                self.state = 1086
                self.match(PloverDictionaryParser.T__13)
                self.state = 1087
                self.match(PloverDictionaryParser.T__18)
                self.state = 1088
                self.match(PloverDictionaryParser.T__16)
                self.state = 1089
                self.match(PloverDictionaryParser.T__14)
                self.state = 1090
                self.match(PloverDictionaryParser.T__11)
                self.state = 1091
                self.match(PloverDictionaryParser.T__26)
                self.state = 1092
                self.match(PloverDictionaryParser.R)
                self.state = 1093
                self.match(PloverDictionaryParser.T__27)
                self.state = 1095 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1094
                    self.key()
                    self.state = 1097 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1099
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1101
                self.match(PloverDictionaryParser.T__2)
                self.state = 1102
                self.match(PloverDictionaryParser.T__14)
                self.state = 1103
                self.match(PloverDictionaryParser.T__13)
                self.state = 1104
                self.match(PloverDictionaryParser.T__18)
                self.state = 1105
                self.match(PloverDictionaryParser.T__16)
                self.state = 1106
                self.match(PloverDictionaryParser.T__14)
                self.state = 1107
                self.match(PloverDictionaryParser.T__11)
                self.state = 1108
                self.match(PloverDictionaryParser.T__27)
                self.state = 1110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1109
                    self.key()
                    self.state = 1112 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1114
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1116
                self.match(PloverDictionaryParser.A)
                self.state = 1117
                self.match(PloverDictionaryParser.T__11)
                self.state = 1118
                self.match(PloverDictionaryParser.T__18)
                self.state = 1119
                self.match(PloverDictionaryParser.T__26)
                self.state = 1120
                self.match(PloverDictionaryParser.L)
                self.state = 1121
                self.match(PloverDictionaryParser.T__27)
                self.state = 1123 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1122
                    self.key()
                    self.state = 1125 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1127
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1129
                self.match(PloverDictionaryParser.A)
                self.state = 1130
                self.match(PloverDictionaryParser.T__11)
                self.state = 1131
                self.match(PloverDictionaryParser.T__18)
                self.state = 1132
                self.match(PloverDictionaryParser.T__26)
                self.state = 1133
                self.match(PloverDictionaryParser.R)
                self.state = 1134
                self.match(PloverDictionaryParser.T__27)
                self.state = 1136 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1135
                    self.key()
                    self.state = 1138 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1140
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1142
                self.match(PloverDictionaryParser.T__0)
                self.state = 1143
                self.match(PloverDictionaryParser.T__11)
                self.state = 1144
                self.match(PloverDictionaryParser.T__18)
                self.state = 1145
                self.match(PloverDictionaryParser.T__27)
                self.state = 1147 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1146
                    self.key()
                    self.state = 1149 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1151
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1153
                self.match(PloverDictionaryParser.S)
                self.state = 1154
                self.match(PloverDictionaryParser.T__19)
                self.state = 1155
                self.match(PloverDictionaryParser.T__15)
                self.state = 1156
                self.match(PloverDictionaryParser.T__4)
                self.state = 1157
                self.match(PloverDictionaryParser.T__16)
                self.state = 1158
                self.match(PloverDictionaryParser.T__26)
                self.state = 1159
                self.match(PloverDictionaryParser.L)
                self.state = 1160
                self.match(PloverDictionaryParser.T__27)
                self.state = 1162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1161
                    self.key()
                    self.state = 1164 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1166
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1168
                self.match(PloverDictionaryParser.S)
                self.state = 1169
                self.match(PloverDictionaryParser.T__19)
                self.state = 1170
                self.match(PloverDictionaryParser.T__15)
                self.state = 1171
                self.match(PloverDictionaryParser.T__4)
                self.state = 1172
                self.match(PloverDictionaryParser.T__16)
                self.state = 1173
                self.match(PloverDictionaryParser.T__26)
                self.state = 1174
                self.match(PloverDictionaryParser.R)
                self.state = 1175
                self.match(PloverDictionaryParser.T__27)
                self.state = 1177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1176
                    self.key()
                    self.state = 1179 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1181
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1183
                self.match(PloverDictionaryParser.T__17)
                self.state = 1184
                self.match(PloverDictionaryParser.T__19)
                self.state = 1185
                self.match(PloverDictionaryParser.T__15)
                self.state = 1186
                self.match(PloverDictionaryParser.T__4)
                self.state = 1187
                self.match(PloverDictionaryParser.T__16)
                self.state = 1188
                self.match(PloverDictionaryParser.T__27)
                self.state = 1190 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1189
                    self.key()
                    self.state = 1192 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1194
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1196
                self.match(PloverDictionaryParser.T__21)
                self.state = 1197
                self.match(PloverDictionaryParser.T__8)
                self.state = 1198
                self.match(PloverDictionaryParser.T__13)
                self.state = 1199
                self.match(PloverDictionaryParser.T__3)
                self.state = 1200
                self.match(PloverDictionaryParser.T__14)
                self.state = 1201
                self.match(PloverDictionaryParser.T__21)
                self.state = 1202
                self.match(PloverDictionaryParser.T__17)
                self.state = 1203
                self.match(PloverDictionaryParser.T__27)
                self.state = 1205 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1204
                    self.key()
                    self.state = 1207 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1209
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1211
                self.match(PloverDictionaryParser.T__2)
                self.state = 1212
                self.match(PloverDictionaryParser.T__14)
                self.state = 1213
                self.match(PloverDictionaryParser.T__12)
                self.state = 1214
                self.match(PloverDictionaryParser.T__12)
                self.state = 1215
                self.match(PloverDictionaryParser.T__0)
                self.state = 1216
                self.match(PloverDictionaryParser.T__13)
                self.state = 1217
                self.match(PloverDictionaryParser.T__3)
                self.state = 1218
                self.match(PloverDictionaryParser.T__27)
                self.state = 1220 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1219
                    self.key()
                    self.state = 1222 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1224
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1226
                self.match(PloverDictionaryParser.T__14)
                self.state = 1227
                self.match(PloverDictionaryParser.T__15)
                self.state = 1228
                self.match(PloverDictionaryParser.T__18)
                self.state = 1229
                self.match(PloverDictionaryParser.T__8)
                self.state = 1230
                self.match(PloverDictionaryParser.T__14)
                self.state = 1231
                self.match(PloverDictionaryParser.T__13)
                self.state = 1232
                self.match(PloverDictionaryParser.T__27)
                self.state = 1234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1233
                    self.key()
                    self.state = 1236 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1207959550) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 268206209) != 0)):
                        break

                self.state = 1238
                self.match(PloverDictionaryParser.T__28)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1240
                self.match(PloverDictionaryParser.B)
                self.state = 1241
                self.match(PloverDictionaryParser.T__0)
                self.state = 1242
                self.match(PloverDictionaryParser.T__2)
                self.state = 1243
                self.match(PloverDictionaryParser.T__10)
                self.state = 1244
                self.match(PloverDictionaryParser.S)
                self.state = 1245
                self.match(PloverDictionaryParser.T__15)
                self.state = 1246
                self.match(PloverDictionaryParser.T__0)
                self.state = 1247
                self.match(PloverDictionaryParser.T__2)
                self.state = 1248
                self.match(PloverDictionaryParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_suffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuffix" ):
                listener.enterSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuffix" ):
                listener.exitSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffix" ):
                return visitor.visitSuffix(self)
            else:
                return visitor.visitChildren(self)




    def suffix(self):

        localctx = PloverDictionaryParser.SuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_suffix)
        self._la = 0 # Token type
        try:
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1252
                self.match(PloverDictionaryParser.T__30)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1253
                    self.string()


                self.state = 1256
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1258
                self.match(PloverDictionaryParser.T__30)
                self.state = 1259
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                self.state = 1261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 1260
                    self.string()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1264
                self.match(PloverDictionaryParser.T__31)
                self.state = 1265
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                self.state = 1267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 1266
                    self.string()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1269
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1270
                self.match(PloverDictionaryParser.T__32)
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1271
                    self.string()


                self.state = 1274
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix" ):
                listener.enterPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix" ):
                listener.exitPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefix" ):
                return visitor.visitPrefix(self)
            else:
                return visitor.visitChildren(self)




    def prefix(self):

        localctx = PloverDictionaryParser.PrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_prefix)
        self._la = 0 # Token type
        try:
            self.state = 1302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.string()


                self.state = 1281
                self.match(PloverDictionaryParser.T__30)
                self.state = 1282
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1283
                    self.string()


                self.state = 1286
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1287
                self.match(PloverDictionaryParser.T__30)
                self.state = 1288
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1289
                    self.string()


                self.state = 1292
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1293
                self.match(PloverDictionaryParser.T__31)
                self.state = 1294
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1295
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1296
                self.match(PloverDictionaryParser.T__33)
                self.state = 1298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 1297
                    self.string()


                self.state = 1300
                self.match(PloverDictionaryParser.T__30)
                self.state = 1301
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.LEFT_CURLY)
            else:
                return self.getToken(PloverDictionaryParser.LEFT_CURLY, i)

        def RIGHT_CURLY(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.RIGHT_CURLY)
            else:
                return self.getToken(PloverDictionaryParser.RIGHT_CURLY, i)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_infix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfix" ):
                listener.enterInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfix" ):
                listener.exitInfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfix" ):
                return visitor.visitInfix(self)
            else:
                return visitor.visitChildren(self)




    def infix(self):

        localctx = PloverDictionaryParser.InfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_infix)
        self._la = 0 # Token type
        try:
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1305
                self.match(PloverDictionaryParser.T__30)
                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 1306
                    self.string()


                self.state = 1309
                self.match(PloverDictionaryParser.T__30)
                self.state = 1310
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1312
                self.match(PloverDictionaryParser.T__30)
                self.state = 1313
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1314
                    self.string()


                self.state = 1317
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1318
                self.match(PloverDictionaryParser.T__30)
                self.state = 1319
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1320
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1321
                self.match(PloverDictionaryParser.T__33)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1322
                    self.string()


                self.state = 1325
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def AMPERSAND(self):
            return self.getToken(PloverDictionaryParser.AMPERSAND, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_glue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlue" ):
                listener.enterGlue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlue" ):
                listener.exitGlue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlue" ):
                return visitor.visitGlue(self)
            else:
                return visitor.visitChildren(self)




    def glue(self):

        localctx = PloverDictionaryParser.GlueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_glue)
        self._la = 0 # Token type
        try:
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1329
                self.match(PloverDictionaryParser.AMPERSAND)
                self.state = 1330
                self.string()
                self.state = 1331
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1334
                self.match(PloverDictionaryParser.T__34)
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1335
                    self.string()


                self.state = 1338
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroInsertSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroInsertSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroInsertSpace" ):
                listener.enterRetroInsertSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroInsertSpace" ):
                listener.exitRetroInsertSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroInsertSpace" ):
                return visitor.visitRetroInsertSpace(self)
            else:
                return visitor.visitChildren(self)




    def retroInsertSpace(self):

        localctx = PloverDictionaryParser.RetroInsertSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_retroInsertSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1342
            self.match(PloverDictionaryParser.STAR)
            self.state = 1343
            self.match(PloverDictionaryParser.T__35)
            self.state = 1344
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroDeleteSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroDeleteSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroDeleteSpace" ):
                listener.enterRetroDeleteSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroDeleteSpace" ):
                listener.exitRetroDeleteSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroDeleteSpace" ):
                return visitor.visitRetroDeleteSpace(self)
            else:
                return visitor.visitChildren(self)




    def retroDeleteSpace(self):

        localctx = PloverDictionaryParser.RetroDeleteSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_retroDeleteSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1347
            self.match(PloverDictionaryParser.STAR)
            self.state = 1348
            self.match(PloverDictionaryParser.T__36)
            self.state = 1349
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_setSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSpace" ):
                listener.enterSetSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSpace" ):
                listener.exitSetSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSpace" ):
                return visitor.visitSetSpace(self)
            else:
                return visitor.visitChildren(self)




    def setSpace(self):

        localctx = PloverDictionaryParser.SetSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_setSpace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1352
            self.match(PloverDictionaryParser.T__37)
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                self.state = 1353
                self.string()


            self.state = 1356
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_resetSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSpace" ):
                listener.enterResetSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSpace" ):
                listener.exitResetSpace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSpace" ):
                return visitor.visitResetSpace(self)
            else:
                return visitor.visitChildren(self)




    def resetSpace(self):

        localctx = PloverDictionaryParser.ResetSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_resetSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1359
            self.match(PloverDictionaryParser.T__38)
            self.state = 1360
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapFirstWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_capFirstWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapFirstWord" ):
                listener.enterCapFirstWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapFirstWord" ):
                listener.exitCapFirstWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapFirstWord" ):
                return visitor.visitCapFirstWord(self)
            else:
                return visitor.visitChildren(self)




    def capFirstWord(self):

        localctx = PloverDictionaryParser.CapFirstWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_capFirstWord)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1363
                self.match(PloverDictionaryParser.T__39)
                self.state = 1364
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1366
                self.match(PloverDictionaryParser.T__40)
                self.state = 1367
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroCapFirstWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroCapFirstWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroCapFirstWord" ):
                listener.enterRetroCapFirstWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroCapFirstWord" ):
                listener.exitRetroCapFirstWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroCapFirstWord" ):
                return visitor.visitRetroCapFirstWord(self)
            else:
                return visitor.visitChildren(self)




    def retroCapFirstWord(self):

        localctx = PloverDictionaryParser.RetroCapFirstWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_retroCapFirstWord)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1371
                self.match(PloverDictionaryParser.T__41)
                self.state = 1372
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1373
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1374
                self.match(PloverDictionaryParser.T__42)
                self.state = 1375
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerFirstCharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_lowerFirstChar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerFirstChar" ):
                listener.enterLowerFirstChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerFirstChar" ):
                listener.exitLowerFirstChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLowerFirstChar" ):
                return visitor.visitLowerFirstChar(self)
            else:
                return visitor.visitChildren(self)




    def lowerFirstChar(self):

        localctx = PloverDictionaryParser.LowerFirstCharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_lowerFirstChar)
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1379
                self.match(PloverDictionaryParser.T__43)
                self.state = 1380
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1381
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1382
                self.match(PloverDictionaryParser.T__44)
                self.state = 1383
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroLowerFirstCharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroLowerFirstChar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroLowerFirstChar" ):
                listener.enterRetroLowerFirstChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroLowerFirstChar" ):
                listener.exitRetroLowerFirstChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroLowerFirstChar" ):
                return visitor.visitRetroLowerFirstChar(self)
            else:
                return visitor.visitChildren(self)




    def retroLowerFirstChar(self):

        localctx = PloverDictionaryParser.RetroLowerFirstCharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_retroLowerFirstChar)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1386
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1387
                self.match(PloverDictionaryParser.T__45)
                self.state = 1388
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1390
                self.match(PloverDictionaryParser.T__46)
                self.state = 1391
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperFirstWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_upperFirstWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperFirstWord" ):
                listener.enterUpperFirstWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperFirstWord" ):
                listener.exitUpperFirstWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpperFirstWord" ):
                return visitor.visitUpperFirstWord(self)
            else:
                return visitor.visitChildren(self)




    def upperFirstWord(self):

        localctx = PloverDictionaryParser.UpperFirstWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_upperFirstWord)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1395
                self.match(PloverDictionaryParser.T__47)
                self.state = 1396
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1398
                self.match(PloverDictionaryParser.T__48)
                self.state = 1399
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroUpperFirstWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroUpperFirstWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroUpperFirstWord" ):
                listener.enterRetroUpperFirstWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroUpperFirstWord" ):
                listener.exitRetroUpperFirstWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroUpperFirstWord" ):
                return visitor.visitRetroUpperFirstWord(self)
            else:
                return visitor.visitChildren(self)




    def retroUpperFirstWord(self):

        localctx = PloverDictionaryParser.RetroUpperFirstWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_retroUpperFirstWord)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1402
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1403
                self.match(PloverDictionaryParser.T__49)
                self.state = 1404
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1405
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1406
                self.match(PloverDictionaryParser.T__50)
                self.state = 1407
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CarryingCapitalizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_carryingCapitalization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarryingCapitalization" ):
                listener.enterCarryingCapitalization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarryingCapitalization" ):
                listener.exitCarryingCapitalization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCarryingCapitalization" ):
                return visitor.visitCarryingCapitalization(self)
            else:
                return visitor.visitChildren(self)




    def carryingCapitalization(self):

        localctx = PloverDictionaryParser.CarryingCapitalizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_carryingCapitalization)
        self._la = 0 # Token type
        try:
            self.state = 1436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1411
                self.match(PloverDictionaryParser.T__51)
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1412
                    self.string()


                self.state = 1415
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1417
                self.match(PloverDictionaryParser.T__52)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1418
                    self.string()


                self.state = 1421
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1422
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1423
                self.match(PloverDictionaryParser.T__51)
                self.state = 1425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 1424
                    self.string()


                self.state = 1427
                self.match(PloverDictionaryParser.T__30)
                self.state = 1428
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1429
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1430
                self.match(PloverDictionaryParser.T__52)
                self.state = 1432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1431
                    self.string()


                self.state = 1434
                self.match(PloverDictionaryParser.T__30)
                self.state = 1435
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasingModesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_casingModes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasingModes" ):
                listener.enterCasingModes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasingModes" ):
                listener.exitCasingModes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCasingModes" ):
                return visitor.visitCasingModes(self)
            else:
                return visitor.visitChildren(self)




    def casingModes(self):

        localctx = PloverDictionaryParser.CasingModesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_casingModes)
        try:
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1438
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1439
                self.match(PloverDictionaryParser.T__53)
                self.state = 1440
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1441
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1442
                self.match(PloverDictionaryParser.T__54)
                self.state = 1443
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1444
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1445
                self.match(PloverDictionaryParser.T__55)
                self.state = 1446
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1447
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1448
                self.match(PloverDictionaryParser.T__56)
                self.state = 1449
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1450
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1451
                self.match(PloverDictionaryParser.T__57)
                self.state = 1452
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1453
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1454
                self.match(PloverDictionaryParser.T__58)
                self.state = 1455
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PunctuationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def DOT(self):
            return self.getToken(PloverDictionaryParser.DOT, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def COMMA(self):
            return self.getToken(PloverDictionaryParser.COMMA, 0)

        def string(self):
            return self.getTypedRuleContext(PloverDictionaryParser.StringContext,0)


        def COLON(self):
            return self.getToken(PloverDictionaryParser.COLON, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_punctuation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPunctuation" ):
                listener.enterPunctuation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPunctuation" ):
                listener.exitPunctuation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPunctuation" ):
                return visitor.visitPunctuation(self)
            else:
                return visitor.visitChildren(self)




    def punctuation(self):

        localctx = PloverDictionaryParser.PunctuationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_punctuation)
        self._la = 0 # Token type
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1459
                self.match(PloverDictionaryParser.DOT)
                self.state = 1460
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1462
                self.match(PloverDictionaryParser.T__59)
                self.state = 1463
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1464
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1465
                self.match(PloverDictionaryParser.COMMA)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1466
                    self.string()


                self.state = 1469
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1470
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1471
                self.match(PloverDictionaryParser.T__60)
                self.state = 1472
                self.match(PloverDictionaryParser.COMMA)
                self.state = 1473
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1474
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1475
                self.match(PloverDictionaryParser.T__35)
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1476
                    self.string()


                self.state = 1479
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1480
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1481
                self.match(PloverDictionaryParser.T__61)
                self.state = 1482
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1483
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1484
                self.match(PloverDictionaryParser.T__36)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1485
                    self.string()


                self.state = 1488
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1489
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1490
                self.match(PloverDictionaryParser.T__62)
                self.state = 1491
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1492
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1493
                self.match(PloverDictionaryParser.COLON)
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1494
                    self.string()


                self.state = 1497
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1498
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1499
                self.match(PloverDictionaryParser.T__63)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1500
                    self.string()


                self.state = 1503
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1504
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1505
                self.match(PloverDictionaryParser.T__64)
                self.state = 1506
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1507
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1508
                self.match(PloverDictionaryParser.T__65)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1509
                    self.string()


                self.state = 1512
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1513
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1514
                self.match(PloverDictionaryParser.T__66)
                self.state = 1515
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_undo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndo" ):
                listener.enterUndo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndo" ):
                listener.exitUndo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUndo" ):
                return visitor.visitUndo(self)
            else:
                return visitor.visitChildren(self)




    def undo(self):

        localctx = PloverDictionaryParser.UndoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_undo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(PloverDictionaryParser.T__67)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatLastStrokeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_repeatLastStroke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatLastStroke" ):
                listener.enterRepeatLastStroke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatLastStroke" ):
                listener.exitRepeatLastStroke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatLastStroke" ):
                return visitor.visitRepeatLastStroke(self)
            else:
                return visitor.visitChildren(self)




    def repeatLastStroke(self):

        localctx = PloverDictionaryParser.RepeatLastStrokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_repeatLastStroke)
        try:
            self.state = 1524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1521
                self.match(PloverDictionaryParser.T__68)
                self.state = 1522
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1523
                self.match(PloverDictionaryParser.T__69)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetroToggleAsteriskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_retroToggleAsterisk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetroToggleAsterisk" ):
                listener.enterRetroToggleAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetroToggleAsterisk" ):
                listener.exitRetroToggleAsterisk(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetroToggleAsterisk" ):
                return visitor.visitRetroToggleAsterisk(self)
            else:
                return visitor.visitChildren(self)




    def retroToggleAsterisk(self):

        localctx = PloverDictionaryParser.RetroToggleAsteriskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_retroToggleAsterisk)
        try:
            self.state = 1531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1527
                self.match(PloverDictionaryParser.STAR)
                self.state = 1528
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                self.match(PloverDictionaryParser.T__70)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1530
                self.match(PloverDictionaryParser.T__71)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CancelFormattingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_cancelFormatting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCancelFormatting" ):
                listener.enterCancelFormatting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCancelFormatting" ):
                listener.exitCancelFormatting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCancelFormatting" ):
                return visitor.visitCancelFormatting(self)
            else:
                return visitor.visitChildren(self)




    def cancelFormatting(self):

        localctx = PloverDictionaryParser.CancelFormattingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_cancelFormatting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1534
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NothingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def HASH(self):
            return self.getToken(PloverDictionaryParser.HASH, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_nothing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNothing" ):
                listener.enterNothing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNothing" ):
                listener.exitNothing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNothing" ):
                return visitor.visitNothing(self)
            else:
                return visitor.visitChildren(self)




    def nothing(self):

        localctx = PloverDictionaryParser.NothingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_nothing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1537
            self.match(PloverDictionaryParser.HASH)
            self.state = 1538
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_endWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndWord" ):
                listener.enterEndWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndWord" ):
                listener.exitEndWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndWord" ):
                return visitor.visitEndWord(self)
            else:
                return visitor.visitChildren(self)




    def endWord(self):

        localctx = PloverDictionaryParser.EndWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_endWord)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1541
                self.match(PloverDictionaryParser.T__72)
                self.state = 1542
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1544
                self.match(PloverDictionaryParser.T__73)
                self.state = 1545
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_currency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrency" ):
                listener.enterCurrency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrency" ):
                listener.exitCurrency(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrency" ):
                return visitor.visitCurrency(self)
            else:
                return visitor.visitChildren(self)




    def currency(self):

        localctx = PloverDictionaryParser.CurrencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_currency)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1549
                self.match(PloverDictionaryParser.STAR)
                self.state = 1550
                self.match(PloverDictionaryParser.T__27)
                self.state = 1552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1551
                    self.string()


                self.state = 1554
                self.match(PloverDictionaryParser.T__2)
                self.state = 1556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.string()


                self.state = 1558
                self.match(PloverDictionaryParser.T__28)
                self.state = 1559
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1560
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1561
                self.match(PloverDictionaryParser.T__74)
                self.state = 1563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 1562
                    self.string()


                self.state = 1565
                self.match(PloverDictionaryParser.T__2)
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 139189375983419391) != 0):
                    self.state = 1566
                    self.string()


                self.state = 1569
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LookaheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_lookahead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLookahead" ):
                listener.enterLookahead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLookahead" ):
                listener.exitLookahead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLookahead" ):
                return visitor.visitLookahead(self)
            else:
                return visitor.visitChildren(self)




    def lookahead(self):

        localctx = PloverDictionaryParser.LookaheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_lookahead)
        try:
            self.state = 1590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1572
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1573
                self.match(PloverDictionaryParser.T__75)
                self.state = 1574
                self.string()
                self.state = 1575
                self.match(PloverDictionaryParser.T__76)
                self.state = 1576
                self.string()
                self.state = 1577
                self.match(PloverDictionaryParser.T__76)
                self.state = 1578
                self.string()
                self.state = 1579
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(PloverDictionaryParser.LEFT_CURLY)
                self.state = 1582
                self.match(PloverDictionaryParser.T__77)
                self.state = 1583
                self.string()
                self.state = 1584
                self.match(PloverDictionaryParser.T__76)
                self.state = 1585
                self.string()
                self.state = 1586
                self.match(PloverDictionaryParser.T__76)
                self.state = 1587
                self.string()
                self.state = 1588
                self.match(PloverDictionaryParser.RIGHT_CURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PloverCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def COLON(self):
            return self.getToken(PloverDictionaryParser.COLON, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_ploverCommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPloverCommand" ):
                listener.enterPloverCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPloverCommand" ):
                listener.exitPloverCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPloverCommand" ):
                return visitor.visitPloverCommand(self)
            else:
                return visitor.visitChildren(self)




    def ploverCommand(self):

        localctx = PloverDictionaryParser.PloverCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ploverCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1593
            self.match(PloverDictionaryParser.T__78)
            self.state = 1594
            self.string()
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 1595
                self.match(PloverDictionaryParser.COLON)
                self.state = 1596
                self.string()


            self.state = 1599
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.COLON)
            else:
                return self.getToken(PloverDictionaryParser.COLON, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_meta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta" ):
                listener.enterMeta(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta" ):
                listener.exitMeta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeta" ):
                return visitor.visitMeta(self)
            else:
                return visitor.visitChildren(self)




    def meta(self):

        localctx = PloverDictionaryParser.MetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_meta)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1602
            self.match(PloverDictionaryParser.COLON)
            self.state = 1603
            self.string()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 1604
                self.match(PloverDictionaryParser.COLON)
                self.state = 1605
                self.string()


            self.state = 1608
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.StringContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.StringContext,i)


        def COLON(self):
            return self.getToken(PloverDictionaryParser.COLON, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_macro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro" ):
                listener.enterMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro" ):
                listener.exitMacro(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro" ):
                return visitor.visitMacro(self)
            else:
                return visitor.visitChildren(self)




    def macro(self):

        localctx = PloverDictionaryParser.MacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_macro)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(PloverDictionaryParser.T__75)
            self.state = 1611
            self.string()
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1612
                self.match(PloverDictionaryParser.COLON)
                self.state = 1613
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PghContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_pgh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPgh" ):
                listener.enterPgh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPgh" ):
                listener.exitPgh(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPgh" ):
                return visitor.visitPgh(self)
            else:
                return visitor.visitChildren(self)




    def pgh(self):

        localctx = PloverDictionaryParser.PghContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pgh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1617
            self.match(PloverDictionaryParser.T__15)
            self.state = 1618
            self.match(PloverDictionaryParser.T__6)
            self.state = 1619
            self.match(PloverDictionaryParser.T__7)
            self.state = 1620
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_en

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEn" ):
                listener.enterEn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEn" ):
                listener.exitEn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEn" ):
                return visitor.visitEn(self)
            else:
                return visitor.visitChildren(self)




    def en(self):

        localctx = PloverDictionaryParser.EnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_en)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1623
            self.match(PloverDictionaryParser.T__13)
            self.state = 1624
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LpluscommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_lpluscommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLpluscommand" ):
                listener.enterLpluscommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLpluscommand" ):
                listener.exitLpluscommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLpluscommand" ):
                return visitor.visitLpluscommand(self)
            else:
                return visitor.visitChildren(self)




    def lpluscommand(self):

        localctx = PloverDictionaryParser.LpluscommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_lpluscommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1627
            self.match(PloverDictionaryParser.T__11)
            self.state = 1628
            self.match(PloverDictionaryParser.T__79)
            self.state = 1629
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LminuscommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def DASH(self):
            return self.getToken(PloverDictionaryParser.DASH, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_lminuscommand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLminuscommand" ):
                listener.enterLminuscommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLminuscommand" ):
                listener.exitLminuscommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLminuscommand" ):
                return visitor.visitLminuscommand(self)
            else:
                return visitor.visitChildren(self)




    def lminuscommand(self):

        localctx = PloverDictionaryParser.LminuscommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lminuscommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(PloverDictionaryParser.LEFT_CURLY)
            self.state = 1632
            self.match(PloverDictionaryParser.T__11)
            self.state = 1633
            self.match(PloverDictionaryParser.DASH)
            self.state = 1634
            self.match(PloverDictionaryParser.RIGHT_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.ChordContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.ChordContext,i)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_outline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutline" ):
                listener.enterOutline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutline" ):
                listener.exitOutline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutline" ):
                return visitor.visitOutline(self)
            else:
                return visitor.visitChildren(self)




    def outline(self):

        localctx = PloverDictionaryParser.OutlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_outline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 1636
                self.match(PloverDictionaryParser.T__76)


            self.state = 1639
            self.chord()
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 1640
                self.match(PloverDictionaryParser.T__76)
                self.state = 1641
                self.chord()
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unnumberedChord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.UnnumberedChordContext,0)


        def numberedChord(self):
            return self.getTypedRuleContext(PloverDictionaryParser.NumberedChordContext,0)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_chord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChord" ):
                listener.enterChord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChord" ):
                listener.exitChord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChord" ):
                return visitor.visitChord(self)
            else:
                return visitor.visitChildren(self)




    def chord(self):

        localctx = PloverDictionaryParser.ChordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_chord)
        try:
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.unnumberedChord()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.numberedChord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnumberedChordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.S)
            else:
                return self.getToken(PloverDictionaryParser.S, i)

        def T(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.T)
            else:
                return self.getToken(PloverDictionaryParser.T, i)

        def K(self):
            return self.getToken(PloverDictionaryParser.K, 0)

        def P(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.P)
            else:
                return self.getToken(PloverDictionaryParser.P, i)

        def W(self):
            return self.getToken(PloverDictionaryParser.W, 0)

        def H(self):
            return self.getToken(PloverDictionaryParser.H, 0)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.R)
            else:
                return self.getToken(PloverDictionaryParser.R, i)

        def A(self):
            return self.getToken(PloverDictionaryParser.A, 0)

        def O(self):
            return self.getToken(PloverDictionaryParser.O, 0)

        def E(self):
            return self.getToken(PloverDictionaryParser.E, 0)

        def U(self):
            return self.getToken(PloverDictionaryParser.U, 0)

        def F(self):
            return self.getToken(PloverDictionaryParser.F, 0)

        def B(self):
            return self.getToken(PloverDictionaryParser.B, 0)

        def L(self):
            return self.getToken(PloverDictionaryParser.L, 0)

        def G(self):
            return self.getToken(PloverDictionaryParser.G, 0)

        def D(self):
            return self.getToken(PloverDictionaryParser.D, 0)

        def Z(self):
            return self.getToken(PloverDictionaryParser.Z, 0)

        def DASH(self):
            return self.getToken(PloverDictionaryParser.DASH, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_unnumberedChord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnumberedChord" ):
                listener.enterUnnumberedChord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnumberedChord" ):
                listener.exitUnnumberedChord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnumberedChord" ):
                return visitor.visitUnnumberedChord(self)
            else:
                return visitor.visitChildren(self)




    def unnumberedChord(self):

        localctx = PloverDictionaryParser.UnnumberedChordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_unnumberedChord)
        self._la = 0 # Token type
        try:
            self.state = 2453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1651
                    self.match(PloverDictionaryParser.S)


                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1654
                    self.match(PloverDictionaryParser.T)


                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1657
                    self.match(PloverDictionaryParser.K)


                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1660
                    self.match(PloverDictionaryParser.P)


                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1663
                    self.match(PloverDictionaryParser.W)


                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1666
                    self.match(PloverDictionaryParser.H)


                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1669
                    self.match(PloverDictionaryParser.R)


                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1672
                    self.match(PloverDictionaryParser.A)


                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1675
                    self.match(PloverDictionaryParser.O)


                self.state = 1678
                self.match(PloverDictionaryParser.STAR)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1679
                    self.match(PloverDictionaryParser.E)


                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1682
                    self.match(PloverDictionaryParser.U)


                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1685
                    self.match(PloverDictionaryParser.F)


                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1688
                    self.match(PloverDictionaryParser.R)


                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1691
                    self.match(PloverDictionaryParser.P)


                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1694
                    self.match(PloverDictionaryParser.B)


                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1697
                    self.match(PloverDictionaryParser.L)


                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1700
                    self.match(PloverDictionaryParser.G)


                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1703
                    self.match(PloverDictionaryParser.T)


                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1706
                    self.match(PloverDictionaryParser.S)


                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1709
                    self.match(PloverDictionaryParser.D)


                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1712
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1715
                    self.match(PloverDictionaryParser.S)


                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1718
                    self.match(PloverDictionaryParser.T)


                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1721
                    self.match(PloverDictionaryParser.K)


                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1724
                    self.match(PloverDictionaryParser.P)


                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1727
                    self.match(PloverDictionaryParser.W)


                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1730
                    self.match(PloverDictionaryParser.H)


                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1733
                    self.match(PloverDictionaryParser.R)


                self.state = 1736
                self.match(PloverDictionaryParser.A)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1737
                    self.match(PloverDictionaryParser.O)


                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1740
                    self.match(PloverDictionaryParser.E)


                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1743
                    self.match(PloverDictionaryParser.U)


                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1746
                    self.match(PloverDictionaryParser.F)


                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1749
                    self.match(PloverDictionaryParser.R)


                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1752
                    self.match(PloverDictionaryParser.P)


                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1755
                    self.match(PloverDictionaryParser.B)


                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1758
                    self.match(PloverDictionaryParser.L)


                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1761
                    self.match(PloverDictionaryParser.G)


                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1764
                    self.match(PloverDictionaryParser.T)


                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1767
                    self.match(PloverDictionaryParser.S)


                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1770
                    self.match(PloverDictionaryParser.D)


                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1773
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1776
                    self.match(PloverDictionaryParser.S)


                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1779
                    self.match(PloverDictionaryParser.T)


                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1782
                    self.match(PloverDictionaryParser.K)


                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1785
                    self.match(PloverDictionaryParser.P)


                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1788
                    self.match(PloverDictionaryParser.W)


                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1791
                    self.match(PloverDictionaryParser.H)


                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1794
                    self.match(PloverDictionaryParser.R)


                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1797
                    self.match(PloverDictionaryParser.A)


                self.state = 1800
                self.match(PloverDictionaryParser.O)
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1801
                    self.match(PloverDictionaryParser.E)


                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1804
                    self.match(PloverDictionaryParser.U)


                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1807
                    self.match(PloverDictionaryParser.F)


                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1810
                    self.match(PloverDictionaryParser.R)


                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1813
                    self.match(PloverDictionaryParser.P)


                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1816
                    self.match(PloverDictionaryParser.B)


                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1819
                    self.match(PloverDictionaryParser.L)


                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1822
                    self.match(PloverDictionaryParser.G)


                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1825
                    self.match(PloverDictionaryParser.T)


                self.state = 1829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1828
                    self.match(PloverDictionaryParser.S)


                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1831
                    self.match(PloverDictionaryParser.D)


                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1834
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1837
                    self.match(PloverDictionaryParser.S)


                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1840
                    self.match(PloverDictionaryParser.T)


                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1843
                    self.match(PloverDictionaryParser.K)


                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1846
                    self.match(PloverDictionaryParser.P)


                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1849
                    self.match(PloverDictionaryParser.W)


                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1852
                    self.match(PloverDictionaryParser.H)


                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1855
                    self.match(PloverDictionaryParser.R)


                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1858
                    self.match(PloverDictionaryParser.A)


                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1861
                    self.match(PloverDictionaryParser.O)


                self.state = 1864
                self.match(PloverDictionaryParser.E)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1865
                    self.match(PloverDictionaryParser.U)


                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1868
                    self.match(PloverDictionaryParser.F)


                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1871
                    self.match(PloverDictionaryParser.R)


                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1874
                    self.match(PloverDictionaryParser.P)


                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1877
                    self.match(PloverDictionaryParser.B)


                self.state = 1881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1880
                    self.match(PloverDictionaryParser.L)


                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1883
                    self.match(PloverDictionaryParser.G)


                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1886
                    self.match(PloverDictionaryParser.T)


                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1889
                    self.match(PloverDictionaryParser.S)


                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1892
                    self.match(PloverDictionaryParser.D)


                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1895
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1898
                    self.match(PloverDictionaryParser.S)


                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1901
                    self.match(PloverDictionaryParser.T)


                self.state = 1905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1904
                    self.match(PloverDictionaryParser.K)


                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1907
                    self.match(PloverDictionaryParser.P)


                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1910
                    self.match(PloverDictionaryParser.W)


                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1913
                    self.match(PloverDictionaryParser.H)


                self.state = 1917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1916
                    self.match(PloverDictionaryParser.R)


                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==88:
                    self.state = 1919
                    self.match(PloverDictionaryParser.A)


                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1922
                    self.match(PloverDictionaryParser.O)


                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1925
                    self.match(PloverDictionaryParser.E)


                self.state = 1928
                self.match(PloverDictionaryParser.U)
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1929
                    self.match(PloverDictionaryParser.F)


                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1932
                    self.match(PloverDictionaryParser.R)


                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1935
                    self.match(PloverDictionaryParser.P)


                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 1938
                    self.match(PloverDictionaryParser.B)


                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1941
                    self.match(PloverDictionaryParser.L)


                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 1944
                    self.match(PloverDictionaryParser.G)


                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1947
                    self.match(PloverDictionaryParser.T)


                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1950
                    self.match(PloverDictionaryParser.S)


                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 1953
                    self.match(PloverDictionaryParser.D)


                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1956
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 1959
                    self.match(PloverDictionaryParser.S)


                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1962
                    self.match(PloverDictionaryParser.T)


                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1965
                    self.match(PloverDictionaryParser.K)


                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1968
                    self.match(PloverDictionaryParser.P)


                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1971
                    self.match(PloverDictionaryParser.W)


                self.state = 1975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1974
                    self.match(PloverDictionaryParser.H)


                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1977
                    self.match(PloverDictionaryParser.R)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1980
                self.match(PloverDictionaryParser.S)
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1981
                    self.match(PloverDictionaryParser.T)


                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1984
                    self.match(PloverDictionaryParser.K)


                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1987
                    self.match(PloverDictionaryParser.P)


                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1990
                    self.match(PloverDictionaryParser.W)


                self.state = 1994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 1993
                    self.match(PloverDictionaryParser.H)


                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 1996
                    self.match(PloverDictionaryParser.R)


                self.state = 1999
                self.match(PloverDictionaryParser.DASH)
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2000
                    self.match(PloverDictionaryParser.F)


                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2003
                    self.match(PloverDictionaryParser.R)


                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2006
                    self.match(PloverDictionaryParser.P)


                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2009
                    self.match(PloverDictionaryParser.B)


                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2012
                    self.match(PloverDictionaryParser.L)


                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2015
                    self.match(PloverDictionaryParser.G)


                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2018
                    self.match(PloverDictionaryParser.T)


                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2021
                    self.match(PloverDictionaryParser.S)


                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2024
                    self.match(PloverDictionaryParser.D)


                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2027
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2030
                self.match(PloverDictionaryParser.T)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2031
                    self.match(PloverDictionaryParser.K)


                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2034
                    self.match(PloverDictionaryParser.P)


                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2037
                    self.match(PloverDictionaryParser.W)


                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 2040
                    self.match(PloverDictionaryParser.H)


                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2043
                    self.match(PloverDictionaryParser.R)


                self.state = 2046
                self.match(PloverDictionaryParser.DASH)
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2047
                    self.match(PloverDictionaryParser.F)


                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2050
                    self.match(PloverDictionaryParser.R)


                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2053
                    self.match(PloverDictionaryParser.P)


                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2056
                    self.match(PloverDictionaryParser.B)


                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2059
                    self.match(PloverDictionaryParser.L)


                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2062
                    self.match(PloverDictionaryParser.G)


                self.state = 2066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2065
                    self.match(PloverDictionaryParser.T)


                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2068
                    self.match(PloverDictionaryParser.S)


                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2071
                    self.match(PloverDictionaryParser.D)


                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2074
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2077
                self.match(PloverDictionaryParser.K)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2078
                    self.match(PloverDictionaryParser.P)


                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2081
                    self.match(PloverDictionaryParser.W)


                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 2084
                    self.match(PloverDictionaryParser.H)


                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2087
                    self.match(PloverDictionaryParser.R)


                self.state = 2090
                self.match(PloverDictionaryParser.DASH)
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2091
                    self.match(PloverDictionaryParser.F)


                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2094
                    self.match(PloverDictionaryParser.R)


                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2097
                    self.match(PloverDictionaryParser.P)


                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2100
                    self.match(PloverDictionaryParser.B)


                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2103
                    self.match(PloverDictionaryParser.L)


                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2106
                    self.match(PloverDictionaryParser.G)


                self.state = 2110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2109
                    self.match(PloverDictionaryParser.T)


                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2112
                    self.match(PloverDictionaryParser.S)


                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2115
                    self.match(PloverDictionaryParser.D)


                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2118
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2121
                self.match(PloverDictionaryParser.P)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2122
                    self.match(PloverDictionaryParser.W)


                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 2125
                    self.match(PloverDictionaryParser.H)


                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2128
                    self.match(PloverDictionaryParser.R)


                self.state = 2131
                self.match(PloverDictionaryParser.DASH)
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2132
                    self.match(PloverDictionaryParser.F)


                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2135
                    self.match(PloverDictionaryParser.R)


                self.state = 2139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2138
                    self.match(PloverDictionaryParser.P)


                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2141
                    self.match(PloverDictionaryParser.B)


                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2144
                    self.match(PloverDictionaryParser.L)


                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2147
                    self.match(PloverDictionaryParser.G)


                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2150
                    self.match(PloverDictionaryParser.T)


                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2153
                    self.match(PloverDictionaryParser.S)


                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2156
                    self.match(PloverDictionaryParser.D)


                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2159
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2162
                self.match(PloverDictionaryParser.W)
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 2163
                    self.match(PloverDictionaryParser.H)


                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2166
                    self.match(PloverDictionaryParser.R)


                self.state = 2169
                self.match(PloverDictionaryParser.DASH)
                self.state = 2171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2170
                    self.match(PloverDictionaryParser.F)


                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2173
                    self.match(PloverDictionaryParser.R)


                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2176
                    self.match(PloverDictionaryParser.P)


                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2179
                    self.match(PloverDictionaryParser.B)


                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2182
                    self.match(PloverDictionaryParser.L)


                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2185
                    self.match(PloverDictionaryParser.G)


                self.state = 2189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2188
                    self.match(PloverDictionaryParser.T)


                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2191
                    self.match(PloverDictionaryParser.S)


                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2194
                    self.match(PloverDictionaryParser.D)


                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2197
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2200
                self.match(PloverDictionaryParser.H)
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2201
                    self.match(PloverDictionaryParser.R)


                self.state = 2204
                self.match(PloverDictionaryParser.DASH)
                self.state = 2206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2205
                    self.match(PloverDictionaryParser.F)


                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2208
                    self.match(PloverDictionaryParser.R)


                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2211
                    self.match(PloverDictionaryParser.P)


                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2214
                    self.match(PloverDictionaryParser.B)


                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2217
                    self.match(PloverDictionaryParser.L)


                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2220
                    self.match(PloverDictionaryParser.G)


                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2223
                    self.match(PloverDictionaryParser.T)


                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2226
                    self.match(PloverDictionaryParser.S)


                self.state = 2230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2229
                    self.match(PloverDictionaryParser.D)


                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2232
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2235
                self.match(PloverDictionaryParser.R)
                self.state = 2236
                self.match(PloverDictionaryParser.DASH)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2237
                    self.match(PloverDictionaryParser.F)


                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2240
                    self.match(PloverDictionaryParser.R)


                self.state = 2244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2243
                    self.match(PloverDictionaryParser.P)


                self.state = 2247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2246
                    self.match(PloverDictionaryParser.B)


                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2249
                    self.match(PloverDictionaryParser.L)


                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2252
                    self.match(PloverDictionaryParser.G)


                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2255
                    self.match(PloverDictionaryParser.T)


                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2258
                    self.match(PloverDictionaryParser.S)


                self.state = 2262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2261
                    self.match(PloverDictionaryParser.D)


                self.state = 2265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2264
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2267
                self.match(PloverDictionaryParser.DASH)
                self.state = 2269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 2268
                    self.match(PloverDictionaryParser.F)


                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2271
                    self.match(PloverDictionaryParser.R)


                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2274
                    self.match(PloverDictionaryParser.P)


                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2277
                    self.match(PloverDictionaryParser.B)


                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2280
                    self.match(PloverDictionaryParser.L)


                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2283
                    self.match(PloverDictionaryParser.G)


                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2286
                    self.match(PloverDictionaryParser.T)


                self.state = 2290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2289
                    self.match(PloverDictionaryParser.S)


                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2292
                    self.match(PloverDictionaryParser.D)


                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2295
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2298
                self.match(PloverDictionaryParser.DASH)
                self.state = 2299
                self.match(PloverDictionaryParser.F)
                self.state = 2301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2300
                    self.match(PloverDictionaryParser.R)


                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2303
                    self.match(PloverDictionaryParser.P)


                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2306
                    self.match(PloverDictionaryParser.B)


                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2309
                    self.match(PloverDictionaryParser.L)


                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2312
                    self.match(PloverDictionaryParser.G)


                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2315
                    self.match(PloverDictionaryParser.T)


                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2318
                    self.match(PloverDictionaryParser.S)


                self.state = 2322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2321
                    self.match(PloverDictionaryParser.D)


                self.state = 2325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2324
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2327
                self.match(PloverDictionaryParser.DASH)
                self.state = 2328
                self.match(PloverDictionaryParser.R)
                self.state = 2330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 2329
                    self.match(PloverDictionaryParser.P)


                self.state = 2333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2332
                    self.match(PloverDictionaryParser.B)


                self.state = 2336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2335
                    self.match(PloverDictionaryParser.L)


                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2338
                    self.match(PloverDictionaryParser.G)


                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2341
                    self.match(PloverDictionaryParser.T)


                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2344
                    self.match(PloverDictionaryParser.S)


                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2347
                    self.match(PloverDictionaryParser.D)


                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2350
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2353
                self.match(PloverDictionaryParser.DASH)
                self.state = 2354
                self.match(PloverDictionaryParser.P)
                self.state = 2356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2355
                    self.match(PloverDictionaryParser.B)


                self.state = 2359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2358
                    self.match(PloverDictionaryParser.L)


                self.state = 2362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2361
                    self.match(PloverDictionaryParser.G)


                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2364
                    self.match(PloverDictionaryParser.T)


                self.state = 2368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2367
                    self.match(PloverDictionaryParser.S)


                self.state = 2371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2370
                    self.match(PloverDictionaryParser.D)


                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2373
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2376
                self.match(PloverDictionaryParser.DASH)
                self.state = 2377
                self.match(PloverDictionaryParser.B)
                self.state = 2379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 2378
                    self.match(PloverDictionaryParser.L)


                self.state = 2382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2381
                    self.match(PloverDictionaryParser.G)


                self.state = 2385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2384
                    self.match(PloverDictionaryParser.T)


                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2387
                    self.match(PloverDictionaryParser.S)


                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2390
                    self.match(PloverDictionaryParser.D)


                self.state = 2394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2393
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2396
                self.match(PloverDictionaryParser.DASH)
                self.state = 2397
                self.match(PloverDictionaryParser.L)
                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2398
                    self.match(PloverDictionaryParser.G)


                self.state = 2402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2401
                    self.match(PloverDictionaryParser.T)


                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2404
                    self.match(PloverDictionaryParser.S)


                self.state = 2408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2407
                    self.match(PloverDictionaryParser.D)


                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2410
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2413
                self.match(PloverDictionaryParser.DASH)
                self.state = 2414
                self.match(PloverDictionaryParser.G)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2415
                    self.match(PloverDictionaryParser.T)


                self.state = 2419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2418
                    self.match(PloverDictionaryParser.S)


                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2421
                    self.match(PloverDictionaryParser.D)


                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2424
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2427
                self.match(PloverDictionaryParser.DASH)
                self.state = 2428
                self.match(PloverDictionaryParser.T)
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2429
                    self.match(PloverDictionaryParser.S)


                self.state = 2433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2432
                    self.match(PloverDictionaryParser.D)


                self.state = 2436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2435
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2438
                self.match(PloverDictionaryParser.DASH)
                self.state = 2439
                self.match(PloverDictionaryParser.S)
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2440
                    self.match(PloverDictionaryParser.D)


                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2443
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2446
                self.match(PloverDictionaryParser.DASH)
                self.state = 2447
                self.match(PloverDictionaryParser.D)
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2448
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2451
                self.match(PloverDictionaryParser.DASH)
                self.state = 2452
                self.match(PloverDictionaryParser.Z)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberedChordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PloverDictionaryParser.STAR, 0)

        def NUM_1(self):
            return self.getToken(PloverDictionaryParser.NUM_1, 0)

        def NUM_2(self):
            return self.getToken(PloverDictionaryParser.NUM_2, 0)

        def K(self):
            return self.getToken(PloverDictionaryParser.K, 0)

        def NUM_3(self):
            return self.getToken(PloverDictionaryParser.NUM_3, 0)

        def W(self):
            return self.getToken(PloverDictionaryParser.W, 0)

        def NUM_4(self):
            return self.getToken(PloverDictionaryParser.NUM_4, 0)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.R)
            else:
                return self.getToken(PloverDictionaryParser.R, i)

        def NUM_5(self):
            return self.getToken(PloverDictionaryParser.NUM_5, 0)

        def NUM_0(self):
            return self.getToken(PloverDictionaryParser.NUM_0, 0)

        def E(self):
            return self.getToken(PloverDictionaryParser.E, 0)

        def U(self):
            return self.getToken(PloverDictionaryParser.U, 0)

        def NUM_6(self):
            return self.getToken(PloverDictionaryParser.NUM_6, 0)

        def NUM_7(self):
            return self.getToken(PloverDictionaryParser.NUM_7, 0)

        def B(self):
            return self.getToken(PloverDictionaryParser.B, 0)

        def NUM_8(self):
            return self.getToken(PloverDictionaryParser.NUM_8, 0)

        def G(self):
            return self.getToken(PloverDictionaryParser.G, 0)

        def NUM_9(self):
            return self.getToken(PloverDictionaryParser.NUM_9, 0)

        def S(self):
            return self.getToken(PloverDictionaryParser.S, 0)

        def D(self):
            return self.getToken(PloverDictionaryParser.D, 0)

        def Z(self):
            return self.getToken(PloverDictionaryParser.Z, 0)

        def DASH(self):
            return self.getToken(PloverDictionaryParser.DASH, 0)

        def HASH(self):
            return self.getToken(PloverDictionaryParser.HASH, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_numberedChord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberedChord" ):
                listener.enterNumberedChord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberedChord" ):
                listener.exitNumberedChord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberedChord" ):
                return visitor.visitNumberedChord(self)
            else:
                return visitor.visitChildren(self)




    def numberedChord(self):

        localctx = PloverDictionaryParser.NumberedChordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_numberedChord)
        self._la = 0 # Token type
        try:
            self.state = 3293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,605,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2455
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2458
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2461
                    self.match(PloverDictionaryParser.K)


                self.state = 2465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2464
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2467
                    self.match(PloverDictionaryParser.W)


                self.state = 2471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2470
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2473
                    self.match(PloverDictionaryParser.R)


                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 2476
                    self.match(PloverDictionaryParser.NUM_5)


                self.state = 2480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 2479
                    self.match(PloverDictionaryParser.NUM_0)


                self.state = 2482
                self.match(PloverDictionaryParser.STAR)
                self.state = 2484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2483
                    self.match(PloverDictionaryParser.E)


                self.state = 2487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2486
                    self.match(PloverDictionaryParser.U)


                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2489
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2492
                    self.match(PloverDictionaryParser.R)


                self.state = 2496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2495
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2498
                    self.match(PloverDictionaryParser.B)


                self.state = 2502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2501
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2504
                    self.match(PloverDictionaryParser.G)


                self.state = 2508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2507
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2510
                    self.match(PloverDictionaryParser.S)


                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2513
                    self.match(PloverDictionaryParser.D)


                self.state = 2517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2516
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2519
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2522
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2525
                    self.match(PloverDictionaryParser.K)


                self.state = 2529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2528
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2531
                    self.match(PloverDictionaryParser.W)


                self.state = 2535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2534
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2537
                    self.match(PloverDictionaryParser.R)


                self.state = 2540
                self.match(PloverDictionaryParser.NUM_5)
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 2541
                    self.match(PloverDictionaryParser.NUM_0)


                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2544
                    self.match(PloverDictionaryParser.E)


                self.state = 2548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2547
                    self.match(PloverDictionaryParser.U)


                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2550
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2553
                    self.match(PloverDictionaryParser.R)


                self.state = 2557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2556
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2559
                    self.match(PloverDictionaryParser.B)


                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2562
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2565
                    self.match(PloverDictionaryParser.G)


                self.state = 2569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2568
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2571
                    self.match(PloverDictionaryParser.S)


                self.state = 2575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2574
                    self.match(PloverDictionaryParser.D)


                self.state = 2578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2577
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2580
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2583
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2586
                    self.match(PloverDictionaryParser.K)


                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2589
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2592
                    self.match(PloverDictionaryParser.W)


                self.state = 2596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2595
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2598
                    self.match(PloverDictionaryParser.R)


                self.state = 2602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 2601
                    self.match(PloverDictionaryParser.NUM_5)


                self.state = 2604
                self.match(PloverDictionaryParser.NUM_0)
                self.state = 2606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2605
                    self.match(PloverDictionaryParser.E)


                self.state = 2609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2608
                    self.match(PloverDictionaryParser.U)


                self.state = 2612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2611
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2614
                    self.match(PloverDictionaryParser.R)


                self.state = 2618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2617
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2620
                    self.match(PloverDictionaryParser.B)


                self.state = 2624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2623
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2626
                    self.match(PloverDictionaryParser.G)


                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2629
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2632
                    self.match(PloverDictionaryParser.S)


                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2635
                    self.match(PloverDictionaryParser.D)


                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2638
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2641
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2644
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2647
                    self.match(PloverDictionaryParser.K)


                self.state = 2651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2650
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2653
                    self.match(PloverDictionaryParser.W)


                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2656
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2659
                    self.match(PloverDictionaryParser.R)


                self.state = 2662
                self.match(PloverDictionaryParser.E)
                self.state = 2664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2663
                    self.match(PloverDictionaryParser.U)


                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2666
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2669
                    self.match(PloverDictionaryParser.R)


                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2672
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2675
                    self.match(PloverDictionaryParser.B)


                self.state = 2679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2678
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2681
                    self.match(PloverDictionaryParser.G)


                self.state = 2685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2684
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2687
                    self.match(PloverDictionaryParser.S)


                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2690
                    self.match(PloverDictionaryParser.D)


                self.state = 2694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2693
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2696
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2699
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2702
                    self.match(PloverDictionaryParser.K)


                self.state = 2706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2705
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2708
                    self.match(PloverDictionaryParser.W)


                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2711
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2714
                    self.match(PloverDictionaryParser.R)


                self.state = 2718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2717
                    self.match(PloverDictionaryParser.E)


                self.state = 2720
                self.match(PloverDictionaryParser.U)
                self.state = 2722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2721
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2724
                    self.match(PloverDictionaryParser.R)


                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2727
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2730
                    self.match(PloverDictionaryParser.B)


                self.state = 2734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2733
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2736
                    self.match(PloverDictionaryParser.G)


                self.state = 2740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2739
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2742
                    self.match(PloverDictionaryParser.S)


                self.state = 2746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2745
                    self.match(PloverDictionaryParser.D)


                self.state = 2749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2748
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2751
                self.match(PloverDictionaryParser.NUM_1)
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2752
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2755
                    self.match(PloverDictionaryParser.K)


                self.state = 2759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2758
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2761
                    self.match(PloverDictionaryParser.W)


                self.state = 2765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2764
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 2767
                    self.match(PloverDictionaryParser.R)


                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 2770
                    self.match(PloverDictionaryParser.DASH)


                self.state = 2774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2773
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2776
                    self.match(PloverDictionaryParser.R)


                self.state = 2780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2779
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2782
                    self.match(PloverDictionaryParser.B)


                self.state = 2786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2785
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2788
                    self.match(PloverDictionaryParser.G)


                self.state = 2792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2791
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2794
                    self.match(PloverDictionaryParser.S)


                self.state = 2798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2797
                    self.match(PloverDictionaryParser.D)


                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2800
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2803
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2806
                self.match(PloverDictionaryParser.NUM_2)
                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2807
                    self.match(PloverDictionaryParser.K)


                self.state = 2811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2810
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2813
                    self.match(PloverDictionaryParser.W)


                self.state = 2817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2816
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 2819
                    self.match(PloverDictionaryParser.R)


                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 2822
                    self.match(PloverDictionaryParser.DASH)


                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2825
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2828
                    self.match(PloverDictionaryParser.R)


                self.state = 2832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2831
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2834
                    self.match(PloverDictionaryParser.B)


                self.state = 2838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2837
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2840
                    self.match(PloverDictionaryParser.G)


                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2843
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2846
                    self.match(PloverDictionaryParser.S)


                self.state = 2850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2849
                    self.match(PloverDictionaryParser.D)


                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2852
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2855
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2858
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2861
                    self.match(PloverDictionaryParser.K)


                self.state = 2864
                self.match(PloverDictionaryParser.NUM_3)
                self.state = 2866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2865
                    self.match(PloverDictionaryParser.W)


                self.state = 2869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2868
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 2871
                    self.match(PloverDictionaryParser.R)


                self.state = 2875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 2874
                    self.match(PloverDictionaryParser.DASH)


                self.state = 2878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2877
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2880
                    self.match(PloverDictionaryParser.R)


                self.state = 2884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2883
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2886
                    self.match(PloverDictionaryParser.B)


                self.state = 2890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2889
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2892
                    self.match(PloverDictionaryParser.G)


                self.state = 2896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2895
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2898
                    self.match(PloverDictionaryParser.S)


                self.state = 2902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2901
                    self.match(PloverDictionaryParser.D)


                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2904
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2907
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2910
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2913
                    self.match(PloverDictionaryParser.K)


                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2916
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2919
                    self.match(PloverDictionaryParser.W)


                self.state = 2922
                self.match(PloverDictionaryParser.NUM_4)
                self.state = 2924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
                if la_ == 1:
                    self.state = 2923
                    self.match(PloverDictionaryParser.R)


                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 2926
                    self.match(PloverDictionaryParser.DASH)


                self.state = 2930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 2929
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 2933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2932
                    self.match(PloverDictionaryParser.R)


                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2935
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2938
                    self.match(PloverDictionaryParser.B)


                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2941
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2944
                    self.match(PloverDictionaryParser.G)


                self.state = 2948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2947
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 2951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2950
                    self.match(PloverDictionaryParser.S)


                self.state = 2954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 2953
                    self.match(PloverDictionaryParser.D)


                self.state = 2957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 2956
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 2959
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 2962
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 2966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 2965
                    self.match(PloverDictionaryParser.K)


                self.state = 2969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 2968
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 2972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 2971
                    self.match(PloverDictionaryParser.W)


                self.state = 2975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 2974
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 2978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2977
                    self.match(PloverDictionaryParser.R)


                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 2980
                    self.match(PloverDictionaryParser.DASH)


                self.state = 2983
                self.match(PloverDictionaryParser.NUM_6)
                self.state = 2985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 2984
                    self.match(PloverDictionaryParser.R)


                self.state = 2988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 2987
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 2991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 2990
                    self.match(PloverDictionaryParser.B)


                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 2993
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 2997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 2996
                    self.match(PloverDictionaryParser.G)


                self.state = 3000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 2999
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 3003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3002
                    self.match(PloverDictionaryParser.S)


                self.state = 3006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3005
                    self.match(PloverDictionaryParser.D)


                self.state = 3009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3008
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 3011
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 3015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 3014
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 3018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3017
                    self.match(PloverDictionaryParser.K)


                self.state = 3021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3020
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 3024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3023
                    self.match(PloverDictionaryParser.W)


                self.state = 3027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 3026
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 3030
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 3029
                    self.match(PloverDictionaryParser.R)


                self.state = 3033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 3032
                    self.match(PloverDictionaryParser.DASH)


                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 3035
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 3039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3038
                    self.match(PloverDictionaryParser.R)


                self.state = 3041
                self.match(PloverDictionaryParser.NUM_7)
                self.state = 3043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3042
                    self.match(PloverDictionaryParser.B)


                self.state = 3046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 3045
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 3049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3048
                    self.match(PloverDictionaryParser.G)


                self.state = 3052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 3051
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 3055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3054
                    self.match(PloverDictionaryParser.S)


                self.state = 3058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3057
                    self.match(PloverDictionaryParser.D)


                self.state = 3061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3060
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 3063
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 3067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 3066
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 3070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3069
                    self.match(PloverDictionaryParser.K)


                self.state = 3073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3072
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3075
                    self.match(PloverDictionaryParser.W)


                self.state = 3079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 3078
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 3082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 3081
                    self.match(PloverDictionaryParser.R)


                self.state = 3085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 3084
                    self.match(PloverDictionaryParser.DASH)


                self.state = 3088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 3087
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 3091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3090
                    self.match(PloverDictionaryParser.R)


                self.state = 3094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 3093
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 3097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3096
                    self.match(PloverDictionaryParser.B)


                self.state = 3099
                self.match(PloverDictionaryParser.NUM_8)
                self.state = 3101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3100
                    self.match(PloverDictionaryParser.G)


                self.state = 3104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 3103
                    self.match(PloverDictionaryParser.NUM_9)


                self.state = 3107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3106
                    self.match(PloverDictionaryParser.S)


                self.state = 3110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3109
                    self.match(PloverDictionaryParser.D)


                self.state = 3113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3112
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 3115
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 3119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 3118
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 3122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3121
                    self.match(PloverDictionaryParser.K)


                self.state = 3125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3124
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 3128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3127
                    self.match(PloverDictionaryParser.W)


                self.state = 3131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 3130
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 3134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 3133
                    self.match(PloverDictionaryParser.R)


                self.state = 3137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 3136
                    self.match(PloverDictionaryParser.DASH)


                self.state = 3140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 3139
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 3143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3142
                    self.match(PloverDictionaryParser.R)


                self.state = 3146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 3145
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 3149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3148
                    self.match(PloverDictionaryParser.B)


                self.state = 3152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 3151
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 3155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3154
                    self.match(PloverDictionaryParser.G)


                self.state = 3157
                self.match(PloverDictionaryParser.NUM_9)
                self.state = 3159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3158
                    self.match(PloverDictionaryParser.S)


                self.state = 3162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3161
                    self.match(PloverDictionaryParser.D)


                self.state = 3165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3164
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 3167
                    self.match(PloverDictionaryParser.NUM_1)


                self.state = 3171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==101:
                    self.state = 3170
                    self.match(PloverDictionaryParser.NUM_2)


                self.state = 3174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3173
                    self.match(PloverDictionaryParser.K)


                self.state = 3177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3176
                    self.match(PloverDictionaryParser.NUM_3)


                self.state = 3180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3179
                    self.match(PloverDictionaryParser.W)


                self.state = 3183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==103:
                    self.state = 3182
                    self.match(PloverDictionaryParser.NUM_4)


                self.state = 3186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
                if la_ == 1:
                    self.state = 3185
                    self.match(PloverDictionaryParser.R)


                self.state = 3189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 3188
                    self.match(PloverDictionaryParser.DASH)


                self.state = 3192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 3191
                    self.match(PloverDictionaryParser.NUM_6)


                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3194
                    self.match(PloverDictionaryParser.R)


                self.state = 3198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106:
                    self.state = 3197
                    self.match(PloverDictionaryParser.NUM_7)


                self.state = 3201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3200
                    self.match(PloverDictionaryParser.B)


                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 3203
                    self.match(PloverDictionaryParser.NUM_8)


                self.state = 3207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3206
                    self.match(PloverDictionaryParser.G)


                self.state = 3209
                self.match(PloverDictionaryParser.NUM_9)
                self.state = 3211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3210
                    self.match(PloverDictionaryParser.S)


                self.state = 3214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3213
                    self.match(PloverDictionaryParser.D)


                self.state = 3217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3216
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3219
                self.match(PloverDictionaryParser.HASH)
                self.state = 3221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3220
                    self.match(PloverDictionaryParser.K)


                self.state = 3224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3223
                    self.match(PloverDictionaryParser.W)


                self.state = 3227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
                if la_ == 1:
                    self.state = 3226
                    self.match(PloverDictionaryParser.R)


                self.state = 3230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 3229
                    self.match(PloverDictionaryParser.DASH)


                self.state = 3233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 3232
                    self.match(PloverDictionaryParser.E)


                self.state = 3236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 3235
                    self.match(PloverDictionaryParser.U)


                self.state = 3239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3238
                    self.match(PloverDictionaryParser.R)


                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3241
                    self.match(PloverDictionaryParser.B)


                self.state = 3245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3244
                    self.match(PloverDictionaryParser.G)


                self.state = 3248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3247
                    self.match(PloverDictionaryParser.S)


                self.state = 3251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3250
                    self.match(PloverDictionaryParser.D)


                self.state = 3254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3253
                    self.match(PloverDictionaryParser.Z)


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3256
                self.match(PloverDictionaryParser.HASH)
                self.state = 3258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 3257
                    self.match(PloverDictionaryParser.K)


                self.state = 3261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3260
                    self.match(PloverDictionaryParser.W)


                self.state = 3264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
                if la_ == 1:
                    self.state = 3263
                    self.match(PloverDictionaryParser.R)


                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 3266
                    self.match(PloverDictionaryParser.STAR)


                self.state = 3270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 3269
                    self.match(PloverDictionaryParser.E)


                self.state = 3273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 3272
                    self.match(PloverDictionaryParser.U)


                self.state = 3276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==87:
                    self.state = 3275
                    self.match(PloverDictionaryParser.R)


                self.state = 3279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 3278
                    self.match(PloverDictionaryParser.B)


                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97:
                    self.state = 3281
                    self.match(PloverDictionaryParser.G)


                self.state = 3285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3284
                    self.match(PloverDictionaryParser.S)


                self.state = 3288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 3287
                    self.match(PloverDictionaryParser.D)


                self.state = 3291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3290
                    self.match(PloverDictionaryParser.Z)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anychar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PloverDictionaryParser.AnycharContext)
            else:
                return self.getTypedRuleContext(PloverDictionaryParser.AnycharContext,i)


        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PloverDictionaryParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3296 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3295
                    self.anychar()

                else:
                    raise NoViableAltException(self)
                self.state = 3298 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,606,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnycharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self, i:int=None):
            if i is None:
                return self.getTokens(PloverDictionaryParser.BACKSLASH)
            else:
                return self.getToken(PloverDictionaryParser.BACKSLASH, i)

        def LEFT_CURLY(self):
            return self.getToken(PloverDictionaryParser.LEFT_CURLY, 0)

        def RIGHT_CURLY(self):
            return self.getToken(PloverDictionaryParser.RIGHT_CURLY, 0)

        def QUOTE(self):
            return self.getToken(PloverDictionaryParser.QUOTE, 0)

        def getRuleIndex(self):
            return PloverDictionaryParser.RULE_anychar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnychar" ):
                listener.enterAnychar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnychar" ):
                listener.exitAnychar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnychar" ):
                return visitor.visitAnychar(self)
            else:
                return visitor.visitChildren(self)




    def anychar(self):

        localctx = PloverDictionaryParser.AnycharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_anychar)
        self._la = 0 # Token type
        try:
            self.state = 3306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3300
                self.match(PloverDictionaryParser.BACKSLASH)
                self.state = 3301
                self.match(PloverDictionaryParser.BACKSLASH)
                self.state = 3302
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3303
                self.match(PloverDictionaryParser.BACKSLASH)
                self.state = 3304
                _la = self._input.LA(1)
                if not(_la==14 or _la==19 or _la==109 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3305
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 141) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





